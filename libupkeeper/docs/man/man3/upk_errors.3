.TH "Upk_errors" 3 "30 Jun 2011" "Version 1" "libupkeeper" \" -*- nroff -*-
.ad l
.nh
.SH NAME
Upk_errors \- 
.SS "Defines"

.in +1c
.ti -1c
.RI "#define \fBUPK_ERRMSG\fP   __upk_err_buf"
.br
.ti -1c
.RI "#define \fBUPK_ERR_INIT\fP"
.br
.ti -1c
.RI "#define \fBUPK_FUNC_ASSERT\fP(A, B)   do { if(! (A)) { __upk_error_type = B; goto __upk_err; } } while(0)"
.br
.ti -1c
.RI "#define \fBUPK_FUNC_ASSERT_MSG\fP(A, B,)   do { if(! (A)) { snprintf(UPK_ERRMSG, UPK_MAX_STRING_LEN, __VA_ARGS__); __upk_error_type = B; goto __upk_err; } } while(0)"
.br
.ti -1c
.RI "#define \fBIF_UPK_ERROR\fP"
.br
.ti -1c
.RI "#define \fB__UPK_DIAG_LABELS\fP"
.br
.ti -1c
.RI "#define \fB__UPK_ERRORS_DESC_ARRAY\fP"
.br
.ti -1c
.RI "#define \fB_UPK_AS_STRING\fP(A)   #A"
.br
.ti -1c
.RI "#define \fBUPK_AS_STRING\fP(A)   _UPK_AS_STRING(A)"
.br
.ti -1c
.RI "#define \fB_UPK_DIAG_LOCATION\fP   __FILE__ ':' UPK_AS_STRING(__LINE__)"
.br
.ti -1c
.RI "#define \fBupk_fatal\fP()   _upk_fatal(_UPK_DIAG_LOCATION, __VA_ARGS__)"
.br
.ti -1c
.RI "#define \fBupk_alert\fP()   _upk_alert(_UPK_DIAG_LOCATION, __VA_ARGS__)"
.br
.ti -1c
.RI "#define \fBupk_crit\fP()   _upk_crit(_UPK_DIAG_LOCATION, __VA_ARGS__)"
.br
.ti -1c
.RI "#define \fBupk_error\fP()   _upk_error(_UPK_DIAG_LOCATION, __VA_ARGS__)"
.br
.ti -1c
.RI "#define \fBupk_warn\fP()   _upk_warn(_UPK_DIAG_LOCATION, __VA_ARGS__)"
.br
.ti -1c
.RI "#define \fBupk_notice\fP()   _upk_notice(_UPK_DIAG_LOCATION, __VA_ARGS__)"
.br
.ti -1c
.RI "#define \fBupk_info\fP()   _upk_info(_UPK_DIAG_LOCATION, __VA_ARGS__)"
.br
.ti -1c
.RI "#define \fBupk_verbose\fP()   _upk_verbose(_UPK_DIAG_LOCATION, __VA_ARGS__)"
.br
.ti -1c
.RI "#define \fBupk_debug0\fP()   _upk_debug0(_UPK_DIAG_LOCATION, __VA_ARGS__)"
.br
.ti -1c
.RI "#define \fBupk_debug1\fP()   _upk_debug1(_UPK_DIAG_LOCATION, __VA_ARGS__)"
.br
.in -1c
.SS "Typedefs"

.in +1c
.ti -1c
.RI "typedef void(*) \fBerr_rpt_callback_t\fP (\fBupk_error_t\fP)"
.br
.ti -1c
.RI "typedef void(*) \fBerr_rpt_msg_callback_t\fP (\fBupk_error_t\fP, unsigned const char *)"
.br
.ti -1c
.RI "typedef void(*) \fBdiag_output_callback_t\fP (\fBupk_diaglvl_t\fP diaglvl, const char *label, const char *loc, const char *fmt, va_list ap)"
.br
.in -1c
.SS "Enumerations"

.in +1c
.ti -1c
.RI "enum \fBupk_diaglvl_t\fP { \fBUPK_DIAGLVL_FATAL\fP =  0, \fBUPK_DIAGLVL_ALERT\fP, \fBUPK_DIAGLVL_CRIT\fP, \fBUPK_DIAGLVL_ERROR\fP, \fBUPK_DIAGLVL_WARN\fP, \fBUPK_DIAGLVL_NOTICE\fP, \fBUPK_DIAGLVL_VERBOSE\fP, \fBUPK_DIAGLVL_INFO\fP, \fBUPK_DIAGLVL_DEBUG0\fP, \fBUPK_DIAGLVL_DEBUG1\fP }"
.br
.ti -1c
.RI "enum \fBupk_errlevel_t\fP { \fBUPK_ERRLVL_ERROR\fP }"
.br
.ti -1c
.RI "enum \fBupk_error_t\fP { \fBUPK_ERR_UNKNOWN\fP =  0, \fBUPK_ERR_UNSUP\fP, \fBUPK_ERR_INVALID_PKT\fP, \fBUPK_SOCKET_FAILURE\fP, \fBUPK_JSON_PARSE_ERROR\fP }"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "const unsigned char * \fBupk_strerror\fP (\fBupk_error_t\fP err)"
.br
.ti -1c
.RI "void \fBupk_report_error\fP (\fBupk_error_t\fP err)"
.br
.ti -1c
.RI "void \fBupk_report_error_msg\fP (\fBupk_error_t\fP err, unsigned const char *msg)"
.br
.ti -1c
.RI "\fBerr_rpt_callback_t\fP \fBupk_reg_error_callback\fP (\fBerr_rpt_callback_t\fP func)"
.br
.ti -1c
.RI "\fBerr_rpt_msg_callback_t\fP \fBupk_reg_err_msg_callback\fP (\fBerr_rpt_msg_callback_t\fP func)"
.br
.ti -1c
.RI "\fBdiag_output_callback_t\fP \fBupk_reg_diag_callback\fP (\fBdiag_output_callback_t\fP func)"
.br
.ti -1c
.RI "int32_t \fB_upk_fatal\fP (const char *loc, const char *fmt,...)"
.br
.ti -1c
.RI "int32_t \fB_upk_alert\fP (const char *loc, const char *fmt,...)"
.br
.ti -1c
.RI "int32_t \fB_upk_crit\fP (const char *loc, const char *fmt,...)"
.br
.ti -1c
.RI "int32_t \fB_upk_error\fP (const char *loc, const char *fmt,...)"
.br
.ti -1c
.RI "int32_t \fB_upk_warn\fP (const char *loc, const char *fmt,...)"
.br
.ti -1c
.RI "int32_t \fB_upk_notice\fP (const char *loc, const char *fmt,...)"
.br
.ti -1c
.RI "int32_t \fB_upk_info\fP (const char *loc, const char *fmt,...)"
.br
.ti -1c
.RI "int32_t \fB_upk_verbose\fP (const char *loc, const char *fmt,...)"
.br
.ti -1c
.RI "int32_t \fB_upk_debug0\fP (const char *loc, const char *fmt,...)"
.br
.ti -1c
.RI "int32_t \fB_upk_debug1\fP (const char *loc, const char *fmt,...)"
.br
.in -1c
.SS "Variables"

.in +1c
.ti -1c
.RI "int32_t \fBupk_diag_verbosity\fP"
.br
.ti -1c
.RI "char \fBlabel_idx\fP [][16]"
.br
.in -1c
.SH "Define Documentation"
.PP 
.SS "#define \fB__UPK_DIAG_LABELS\fP"
.PP
\fBValue:\fP
.PP
.nf
char                    upk_diag_label_idx[][16] = {\
        [UPK_DIAGLVL_FATAL]   = 'FATAL',\
        [UPK_DIAGLVL_ALERT]   = 'ALERT',\
        [UPK_DIAGLVL_CRIT]    = 'CRITICAL',\
        [UPK_DIAGLVL_ERROR]   = 'ERROR',\
        [UPK_DIAGLVL_WARN]    = 'WARNING',\
        [UPK_DIAGLVL_NOTICE]  = 'NOTICE',\
        [UPK_DIAGLVL_VERBOSE] = 'VERBOSE',\
        [UPK_DIAGLVL_INFO]    = 'INFO',\
        [UPK_DIAGLVL_DEBUG0]  = 'DEBUG0',\
        [UPK_DIAGLVL_DEBUG1]  = 'DEBUG1'\
    };
.fi
.SS "#define \fB__UPK_ERRORS_DESC_ARRAY\fP"
.PP
\fBValue:\fP
.PP
.nf
const unsigned char     __upk_errors[][128] = { \
        'unknown', \
        'unsupported', \
        'invalid packet', \
        'socket failure', \
        'JSON parser error', \
    }
.fi
.SS "#define _UPK_AS_STRING(A)   #A"
.PP
.SS "#define _UPK_DIAG_LOCATION   __FILE__ ':' UPK_AS_STRING(__LINE__)"
.PP
.SS "#define IF_UPK_ERROR"
.PP
\fBValue:\fP
.PP
.nf
__upk_err: \
    if(*UPK_ERRMSG && __upk_error_type) upk_report_error_msg(__upk_error_type, (unsigned char *) UPK_ERRMSG); \
    else if(__upk_error_type) upk_report_error(__upk_error_type); \
    if(__upk_error_type)
.fi
.SS "#define upk_alert()   _upk_alert(_UPK_DIAG_LOCATION, __VA_ARGS__)"
.PP
.SS "#define UPK_AS_STRING(A)   _UPK_AS_STRING(A)"
.PP
.SS "#define upk_crit()   _upk_crit(_UPK_DIAG_LOCATION, __VA_ARGS__)"
.PP
.SS "#define upk_debug0()   _upk_debug0(_UPK_DIAG_LOCATION, __VA_ARGS__)"
.PP
.SS "#define upk_debug1()   _upk_debug1(_UPK_DIAG_LOCATION, __VA_ARGS__)"
.PP
.SS "#define UPK_ERR_INIT"
.PP
\fBValue:\fP
.PP
.nf
upk_error_t __upk_error_type = 0; \
    char UPK_ERRMSG[UPK_MAX_STRING_LEN] = {0}
.fi
.SS "#define UPK_ERRMSG   __upk_err_buf"
.PP
.SS "#define upk_error()   _upk_error(_UPK_DIAG_LOCATION, __VA_ARGS__)"
.PP
.SS "#define upk_fatal()   _upk_fatal(_UPK_DIAG_LOCATION, __VA_ARGS__)"
.PP
.SS "#define UPK_FUNC_ASSERT(A, B)   do { if(! (A)) { __upk_error_type = B; goto __upk_err; } } while(0)"
.PP
.SS "#define UPK_FUNC_ASSERT_MSG(A, B)   do { if(! (A)) { snprintf(UPK_ERRMSG, UPK_MAX_STRING_LEN, __VA_ARGS__); __upk_error_type = B; goto __upk_err; } } while(0)"
.PP
.SS "#define upk_info()   _upk_info(_UPK_DIAG_LOCATION, __VA_ARGS__)"
.PP
.SS "#define upk_notice()   _upk_notice(_UPK_DIAG_LOCATION, __VA_ARGS__)"
.PP
.SS "#define upk_verbose()   _upk_verbose(_UPK_DIAG_LOCATION, __VA_ARGS__)"
.PP
.SS "#define upk_warn()   _upk_warn(_UPK_DIAG_LOCATION, __VA_ARGS__)"
.PP
.SH "Typedef Documentation"
.PP 
.SS "typedef void(*) \fBdiag_output_callback_t\fP(\fBupk_diaglvl_t\fP diaglvl, const char *label, const char *loc, const char *fmt, va_list ap)"
.PP
.SS "typedef void(*) \fBerr_rpt_callback_t\fP(\fBupk_error_t\fP)"
.PP
.SS "typedef void(*) \fBerr_rpt_msg_callback_t\fP(\fBupk_error_t\fP, unsigned const char *)"
.PP
.SH "Enumeration Type Documentation"
.PP 
.SS "enum \fBupk_diaglvl_t\fP"
.PP
\fBEnumerator: \fP
.in +1c
.TP
\fB\fIUPK_DIAGLVL_FATAL \fP\fP
fatal error, operation cannot continue 
.TP
\fB\fIUPK_DIAGLVL_ALERT \fP\fP
alert; something really bad happened, but we believe we can continue 
.TP
\fB\fIUPK_DIAGLVL_CRIT \fP\fP
critical; something really bad happened, that probably shouldn't happen; we can continue 
.TP
\fB\fIUPK_DIAGLVL_ERROR \fP\fP
An error occurred. 
.TP
\fB\fIUPK_DIAGLVL_WARN \fP\fP
A warning, serious, but not too serious 
.TP
\fB\fIUPK_DIAGLVL_NOTICE \fP\fP
Something you might want to notice; possibly normal operation 
.TP
\fB\fIUPK_DIAGLVL_VERBOSE \fP\fP
verbose, probably normal operation 
.TP
\fB\fIUPK_DIAGLVL_INFO \fP\fP
information, definitely normal operation, intended to aid in troubleshooting user-configurable things 
.TP
\fB\fIUPK_DIAGLVL_DEBUG0 \fP\fP
debug0, intended to help find bugs in the program; but may also help in finding configuration or environment problems 
.TP
\fB\fIUPK_DIAGLVL_DEBUG1 \fP\fP
debug1, useful in finding and demonstrating bugs in the program (you should probably be using gdb by this point) 
.SS "enum \fBupk_errlevel_t\fP"
.PP
\fBEnumerator: \fP
.in +1c
.TP
\fB\fIUPK_ERRLVL_ERROR \fP\fP
semantically similar to diaglvl; but for error-reporting; may become purely protocol 
.SS "enum \fBupk_error_t\fP"
.PP
\fBEnumerator: \fP
.in +1c
.TP
\fB\fIUPK_ERR_UNKNOWN \fP\fP
unknown error 
.TP
\fB\fIUPK_ERR_UNSUP \fP\fP
unsupported 
.TP
\fB\fIUPK_ERR_INVALID_PKT \fP\fP
invalid packet, possibly invalid protocol, packet dimensions, or checksum 
.TP
\fB\fIUPK_SOCKET_FAILURE \fP\fP
unable to bind/connect/accept/listen on a socket 
.TP
\fB\fIUPK_JSON_PARSE_ERROR \fP\fP
json parse error; additional information should also be provided 
.SH "Function Documentation"
.PP 
.SS "int32_t _upk_alert (const char * loc, const char * fmt,  ...)"
.PP
.SS "int32_t _upk_crit (const char * loc, const char * fmt,  ...)"
.PP
.SS "int32_t _upk_debug0 (const char * loc, const char * fmt,  ...)"
.PP
.SS "int32_t _upk_debug1 (const char * loc, const char * fmt,  ...)"
.PP
.SS "int32_t _upk_error (const char * loc, const char * fmt,  ...)"
.PP
.SS "int32_t _upk_fatal (const char * loc, const char * fmt,  ...)"
.PP
.SS "int32_t _upk_info (const char * loc, const char * fmt,  ...)"
.PP
.SS "int32_t _upk_notice (const char * loc, const char * fmt,  ...)"
.PP
.SS "int32_t _upk_verbose (const char * loc, const char * fmt,  ...)"
.PP
.SS "int32_t _upk_warn (const char * loc, const char * fmt,  ...)"
.PP
.SS "\fBdiag_output_callback_t\fP upk_reg_diag_callback (\fBdiag_output_callback_t\fP func)"
.PP
.SS "\fBerr_rpt_msg_callback_t\fP upk_reg_err_msg_callback (\fBerr_rpt_msg_callback_t\fP func)"
.PP
.SS "\fBerr_rpt_callback_t\fP upk_reg_error_callback (\fBerr_rpt_callback_t\fP func)"
.PP
.SS "void upk_report_error (\fBupk_error_t\fP err)"
.PP
.SS "void upk_report_error_msg (\fBupk_error_t\fP err, unsigned const char * msg)"
.PP
.SS "const unsigned char* upk_strerror (\fBupk_error_t\fP err)"
.PP
.SH "Variable Documentation"
.PP 
.SS "char \fBlabel_idx\fP[][16]"
.PP
.SS "int32_t \fBupk_diag_verbosity\fP"
.PP

