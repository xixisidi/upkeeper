.TH "Controller" 3 "Wed Dec 7 2011" "Version 1" "upkeeper" \" -*- nroff -*-
.ad l
.nh
.SH NAME
Controller \- 
.SS "Data Structures"

.in +1c
.ti -1c
.RI "struct \fB_buddy_info\fP"
.br
.RI "\fIinformation buddy returns. \fP"
.ti -1c
.RI "struct \fB_upk_controller_config\fP"
.br
.RI "\fIcontroller configuration. \fP"
.in -1c
.SS "Defines"

.in +1c
.ti -1c
.RI "#define \fBUPSERT_TEXT\fP(A)"
.br
.RI "\fIinsert or update a list option. \fP"
.ti -1c
.RI "#define \fBUPSERT_INT\fP(A, NMIN)"
.br
.ti -1c
.RI "#define \fBLIST_UPSERT_TEXT\fP(A, B, C)"
.br
.in -1c
.SS "Typedefs"

.in +1c
.ti -1c
.RI "typedef enum \fB_buddy_cmnd\fP \fBbuddy_cmnd_t\fP"
.br
.RI "\fIcontroller side of buddy protocol. \fP"
.ti -1c
.RI "typedef struct \fB_buddy_info\fP \fBbuddy_info_t\fP"
.br
.RI "\fIinformation buddy returns. \fP"
.ti -1c
.RI "typedef struct \fB_upk_controller_config\fP \fBupk_controller_config_t\fP"
.br
.RI "\fIcontroller configuration. \fP"
.in -1c
.SS "Enumerations"

.in +1c
.ti -1c
.RI "enum \fB_buddy_cmnd\fP { \fBUPK_CTRL_NONE\fP =  0, \fBUPK_CTRL_ACK\fP =  1, \fBUPK_CTRL_SHUTDOWN\fP, \fBUPK_CTRL_STATUS_REQ\fP, \fBUPK_CTRL_ACTION_START\fP, \fBUPK_CTRL_ACTION_STOP\fP, \fBUPK_CTRL_ACTION_RELOAD\fP, \fBUPK_CTRL_ACTION_RUNONCE\fP, \fBUPK_CTRL_CUSTOM_ACTION_00\fP, \fBUPK_CTRL_CUSTOM_ACTION_01\fP, \fBUPK_CTRL_CUSTOM_ACTION_02\fP, \fBUPK_CTRL_CUSTOM_ACTION_03\fP, \fBUPK_CTRL_CUSTOM_ACTION_04\fP, \fBUPK_CTRL_CUSTOM_ACTION_05\fP, \fBUPK_CTRL_CUSTOM_ACTION_06\fP, \fBUPK_CTRL_CUSTOM_ACTION_07\fP, \fBUPK_CTRL_CUSTOM_ACTION_08\fP, \fBUPK_CTRL_CUSTOM_ACTION_09\fP, \fBUPK_CTRL_CUSTOM_ACTION_10\fP, \fBUPK_CTRL_CUSTOM_ACTION_11\fP, \fBUPK_CTRL_CUSTOM_ACTION_12\fP, \fBUPK_CTRL_CUSTOM_ACTION_13\fP, \fBUPK_CTRL_CUSTOM_ACTION_14\fP, \fBUPK_CTRL_CUSTOM_ACTION_15\fP, \fBUPK_CTRL_CUSTOM_ACTION_16\fP, \fBUPK_CTRL_CUSTOM_ACTION_17\fP, \fBUPK_CTRL_CUSTOM_ACTION_18\fP, \fBUPK_CTRL_CUSTOM_ACTION_19\fP, \fBUPK_CTRL_CUSTOM_ACTION_20\fP, \fBUPK_CTRL_CUSTOM_ACTION_21\fP, \fBUPK_CTRL_CUSTOM_ACTION_22\fP, \fBUPK_CTRL_CUSTOM_ACTION_23\fP, \fBUPK_CTRL_CUSTOM_ACTION_24\fP, \fBUPK_CTRL_CUSTOM_ACTION_25\fP, \fBUPK_CTRL_CUSTOM_ACTION_26\fP, \fBUPK_CTRL_CUSTOM_ACTION_27\fP, \fBUPK_CTRL_CUSTOM_ACTION_28\fP, \fBUPK_CTRL_CUSTOM_ACTION_29\fP, \fBUPK_CTRL_CUSTOM_ACTION_30\fP, \fBUPK_CTRL_CUSTOM_ACTION_31\fP, \fBUPK_CTRL_SIGNAL_01\fP, \fBUPK_CTRL_SIGNAL_02\fP, \fBUPK_CTRL_SIGNAL_03\fP, \fBUPK_CTRL_SIGNAL_04\fP, \fBUPK_CTRL_SIGNAL_05\fP, \fBUPK_CTRL_SIGNAL_06\fP, \fBUPK_CTRL_SIGNAL_07\fP, \fBUPK_CTRL_SIGNAL_08\fP, \fBUPK_CTRL_SIGNAL_09\fP, \fBUPK_CTRL_SIGNAL_10\fP, \fBUPK_CTRL_SIGNAL_11\fP, \fBUPK_CTRL_SIGNAL_12\fP, \fBUPK_CTRL_SIGNAL_13\fP, \fBUPK_CTRL_SIGNAL_14\fP, \fBUPK_CTRL_SIGNAL_15\fP, \fBUPK_CTRL_SIGNAL_16\fP, \fBUPK_CTRL_SIGNAL_17\fP, \fBUPK_CTRL_SIGNAL_18\fP, \fBUPK_CTRL_SIGNAL_19\fP, \fBUPK_CTRL_SIGNAL_20\fP, \fBUPK_CTRL_SIGNAL_21\fP, \fBUPK_CTRL_SIGNAL_22\fP, \fBUPK_CTRL_SIGNAL_23\fP, \fBUPK_CTRL_SIGNAL_24\fP, \fBUPK_CTRL_SIGNAL_25\fP, \fBUPK_CTRL_SIGNAL_26\fP, \fBUPK_CTRL_SIGNAL_27\fP, \fBUPK_CTRL_SIGNAL_28\fP, \fBUPK_CTRL_SIGNAL_29\fP, \fBUPK_CTRL_SIGNAL_30\fP, \fBUPK_CTRL_SIGNAL_31\fP, \fBUPK_CTRL_SIGNAL_32\fP, \fBUPK_CTRL_NONE\fP =  0, \fBUPK_CTRL_ACK\fP =  1, \fBUPK_CTRL_SHUTDOWN\fP, \fBUPK_CTRL_STATUS_REQ\fP, \fBUPK_CTRL_ACTION_START\fP, \fBUPK_CTRL_ACTION_STOP\fP, \fBUPK_CTRL_ACTION_RELOAD\fP, \fBUPK_CTRL_ACTION_RUNONCE\fP, \fBUPK_CTRL_CUSTOM_ACTION_00\fP, \fBUPK_CTRL_CUSTOM_ACTION_01\fP, \fBUPK_CTRL_CUSTOM_ACTION_02\fP, \fBUPK_CTRL_CUSTOM_ACTION_03\fP, \fBUPK_CTRL_CUSTOM_ACTION_04\fP, \fBUPK_CTRL_CUSTOM_ACTION_05\fP, \fBUPK_CTRL_CUSTOM_ACTION_06\fP, \fBUPK_CTRL_CUSTOM_ACTION_07\fP, \fBUPK_CTRL_CUSTOM_ACTION_08\fP, \fBUPK_CTRL_CUSTOM_ACTION_09\fP, \fBUPK_CTRL_CUSTOM_ACTION_10\fP, \fBUPK_CTRL_CUSTOM_ACTION_11\fP, \fBUPK_CTRL_CUSTOM_ACTION_12\fP, \fBUPK_CTRL_CUSTOM_ACTION_13\fP, \fBUPK_CTRL_CUSTOM_ACTION_14\fP, \fBUPK_CTRL_CUSTOM_ACTION_15\fP, \fBUPK_CTRL_CUSTOM_ACTION_16\fP, \fBUPK_CTRL_CUSTOM_ACTION_17\fP, \fBUPK_CTRL_CUSTOM_ACTION_18\fP, \fBUPK_CTRL_CUSTOM_ACTION_19\fP, \fBUPK_CTRL_CUSTOM_ACTION_20\fP, \fBUPK_CTRL_CUSTOM_ACTION_21\fP, \fBUPK_CTRL_CUSTOM_ACTION_22\fP, \fBUPK_CTRL_CUSTOM_ACTION_23\fP, \fBUPK_CTRL_CUSTOM_ACTION_24\fP, \fBUPK_CTRL_CUSTOM_ACTION_25\fP, \fBUPK_CTRL_CUSTOM_ACTION_26\fP, \fBUPK_CTRL_CUSTOM_ACTION_27\fP, \fBUPK_CTRL_CUSTOM_ACTION_28\fP, \fBUPK_CTRL_CUSTOM_ACTION_29\fP, \fBUPK_CTRL_CUSTOM_ACTION_30\fP, \fBUPK_CTRL_CUSTOM_ACTION_31\fP, \fBUPK_CTRL_SIGNAL_01\fP, \fBUPK_CTRL_SIGNAL_02\fP, \fBUPK_CTRL_SIGNAL_03\fP, \fBUPK_CTRL_SIGNAL_04\fP, \fBUPK_CTRL_SIGNAL_05\fP, \fBUPK_CTRL_SIGNAL_06\fP, \fBUPK_CTRL_SIGNAL_07\fP, \fBUPK_CTRL_SIGNAL_08\fP, \fBUPK_CTRL_SIGNAL_09\fP, \fBUPK_CTRL_SIGNAL_10\fP, \fBUPK_CTRL_SIGNAL_11\fP, \fBUPK_CTRL_SIGNAL_12\fP, \fBUPK_CTRL_SIGNAL_13\fP, \fBUPK_CTRL_SIGNAL_14\fP, \fBUPK_CTRL_SIGNAL_15\fP, \fBUPK_CTRL_SIGNAL_16\fP, \fBUPK_CTRL_SIGNAL_17\fP, \fBUPK_CTRL_SIGNAL_18\fP, \fBUPK_CTRL_SIGNAL_19\fP, \fBUPK_CTRL_SIGNAL_20\fP, \fBUPK_CTRL_SIGNAL_21\fP, \fBUPK_CTRL_SIGNAL_22\fP, \fBUPK_CTRL_SIGNAL_23\fP, \fBUPK_CTRL_SIGNAL_24\fP, \fBUPK_CTRL_SIGNAL_25\fP, \fBUPK_CTRL_SIGNAL_26\fP, \fBUPK_CTRL_SIGNAL_27\fP, \fBUPK_CTRL_SIGNAL_28\fP, \fBUPK_CTRL_SIGNAL_29\fP, \fBUPK_CTRL_SIGNAL_30\fP, \fBUPK_CTRL_SIGNAL_31\fP, \fBUPK_CTRL_SIGNAL_32\fP, \fBUPK_CTRL_NONE\fP =  0, \fBUPK_CTRL_ACK\fP =  1, \fBUPK_CTRL_SHUTDOWN\fP, \fBUPK_CTRL_STATUS_REQ\fP, \fBUPK_CTRL_ACTION_START\fP, \fBUPK_CTRL_ACTION_STOP\fP, \fBUPK_CTRL_ACTION_RELOAD\fP, \fBUPK_CTRL_ACTION_RUNONCE\fP, \fBUPK_CTRL_CUSTOM_ACTION_00\fP, \fBUPK_CTRL_CUSTOM_ACTION_01\fP, \fBUPK_CTRL_CUSTOM_ACTION_02\fP, \fBUPK_CTRL_CUSTOM_ACTION_03\fP, \fBUPK_CTRL_CUSTOM_ACTION_04\fP, \fBUPK_CTRL_CUSTOM_ACTION_05\fP, \fBUPK_CTRL_CUSTOM_ACTION_06\fP, \fBUPK_CTRL_CUSTOM_ACTION_07\fP, \fBUPK_CTRL_CUSTOM_ACTION_08\fP, \fBUPK_CTRL_CUSTOM_ACTION_09\fP, \fBUPK_CTRL_CUSTOM_ACTION_10\fP, \fBUPK_CTRL_CUSTOM_ACTION_11\fP, \fBUPK_CTRL_CUSTOM_ACTION_12\fP, \fBUPK_CTRL_CUSTOM_ACTION_13\fP, \fBUPK_CTRL_CUSTOM_ACTION_14\fP, \fBUPK_CTRL_CUSTOM_ACTION_15\fP, \fBUPK_CTRL_CUSTOM_ACTION_16\fP, \fBUPK_CTRL_CUSTOM_ACTION_17\fP, \fBUPK_CTRL_CUSTOM_ACTION_18\fP, \fBUPK_CTRL_CUSTOM_ACTION_19\fP, \fBUPK_CTRL_CUSTOM_ACTION_20\fP, \fBUPK_CTRL_CUSTOM_ACTION_21\fP, \fBUPK_CTRL_CUSTOM_ACTION_22\fP, \fBUPK_CTRL_CUSTOM_ACTION_23\fP, \fBUPK_CTRL_CUSTOM_ACTION_24\fP, \fBUPK_CTRL_CUSTOM_ACTION_25\fP, \fBUPK_CTRL_CUSTOM_ACTION_26\fP, \fBUPK_CTRL_CUSTOM_ACTION_27\fP, \fBUPK_CTRL_CUSTOM_ACTION_28\fP, \fBUPK_CTRL_CUSTOM_ACTION_29\fP, \fBUPK_CTRL_CUSTOM_ACTION_30\fP, \fBUPK_CTRL_CUSTOM_ACTION_31\fP, \fBUPK_CTRL_SIGNAL_01\fP, \fBUPK_CTRL_SIGNAL_02\fP, \fBUPK_CTRL_SIGNAL_03\fP, \fBUPK_CTRL_SIGNAL_04\fP, \fBUPK_CTRL_SIGNAL_05\fP, \fBUPK_CTRL_SIGNAL_06\fP, \fBUPK_CTRL_SIGNAL_07\fP, \fBUPK_CTRL_SIGNAL_08\fP, \fBUPK_CTRL_SIGNAL_09\fP, \fBUPK_CTRL_SIGNAL_10\fP, \fBUPK_CTRL_SIGNAL_11\fP, \fBUPK_CTRL_SIGNAL_12\fP, \fBUPK_CTRL_SIGNAL_13\fP, \fBUPK_CTRL_SIGNAL_14\fP, \fBUPK_CTRL_SIGNAL_15\fP, \fBUPK_CTRL_SIGNAL_16\fP, \fBUPK_CTRL_SIGNAL_17\fP, \fBUPK_CTRL_SIGNAL_18\fP, \fBUPK_CTRL_SIGNAL_19\fP, \fBUPK_CTRL_SIGNAL_20\fP, \fBUPK_CTRL_SIGNAL_21\fP, \fBUPK_CTRL_SIGNAL_22\fP, \fBUPK_CTRL_SIGNAL_23\fP, \fBUPK_CTRL_SIGNAL_24\fP, \fBUPK_CTRL_SIGNAL_25\fP, \fBUPK_CTRL_SIGNAL_26\fP, \fBUPK_CTRL_SIGNAL_27\fP, \fBUPK_CTRL_SIGNAL_28\fP, \fBUPK_CTRL_SIGNAL_29\fP, \fBUPK_CTRL_SIGNAL_30\fP, \fBUPK_CTRL_SIGNAL_31\fP, \fBUPK_CTRL_SIGNAL_32\fP }"
.br
.RI "\fIcontroller side of buddy protocol. \fP"
.ti -1c
.RI "enum \fBbuddy_runstate_t\fP { \fBBUDDY_UNKNOWN\fP =  0, \fBBUDDY_STOPPED\fP =  1, \fBBUDDY_RUNNING\fP, \fBBUDDY_RANONCE\fP, \fBBUDDY_UNKNOWN\fP =  0, \fBBUDDY_STOPPED\fP =  1, \fBBUDDY_RUNNING\fP, \fBBUDDY_RANONCE\fP, \fBBUDDY_UNKNOWN\fP =  0, \fBBUDDY_STOPPED\fP =  1, \fBBUDDY_RUNNING\fP, \fBBUDDY_RANONCE\fP }"
.br
.RI "\fIstates for buddy \fP"
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "int \fBupk_db_get_single_text\fP (\fBsqlite3\fP *dbh, char *value, const char *sql,...)"
.br
.RI "\fIlookup a table_id from the schema table. \fP"
.ti -1c
.RI "static int \fBupk_db_get_table_id\fP (\fBsqlite3\fP *dbh, const char *db, const char *table_name, char *table_id)"
.br
.RI "\fIlookup a table_id from the schema table. \fP"
.ti -1c
.RI "int \fBupk_db_get_audit_service_table\fP (\fBsqlite3\fP *dbh, char *table_id)"
.br
.RI "\fIlookup the table_id for upk_audit.service from the schema table. \fP"
.ti -1c
.RI "int \fBupk_db_get_cfg_services_table\fP (\fBsqlite3\fP *dbh, char *table_id)"
.br
.RI "\fIlookup the table_id for upk_cfg.services from the schema table. \fP"
.ti -1c
.RI "int \fBupk_db_get_cfg_svc_options_table\fP (\fBsqlite3\fP *dbh, char *table_id)"
.br
.RI "\fIlookup the table_id for upk_cfg.svc_optionsfrom the schema table. \fP"
.ti -1c
.RI "int \fBupk_db_get_cfg_svc_list_options_table\fP (\fBsqlite3\fP *dbh, char *table_id)"
.br
.RI "\fIlookup the table_id for upk_cfg.svc_list_options from the schema table. \fP"
.ti -1c
.RI "char * \fBupk_db_svc_uuid_lookup\fP (\fBsqlite3\fP *dbh, const char *svcid, const char *package)"
.br
.RI "\fIlookup a service <package>-<name> \fP"
.ti -1c
.RI "char * \fBupk_db_gen_uuid\fP (\fBsqlite3\fP *dbh)"
.br
.RI "\fIgenerate new unique service UUID. \fP"
.ti -1c
.RI "bool \fBupk_db_add_new_service\fP (\fBsqlite3\fP *dbh, \fBupk_svc_desc_t\fP *svc)"
.br
.RI "\fICreate new service definition. \fP"
.ti -1c
.RI "static int \fBupk_db_try_insert\fP (\fBsqlite3\fP *dbh, char *table_id, \fBupk_svc_desc_t\fP *svc, int type, char *optkey, void *optval, \fBsize_t\fP len, char *section, char *id)"
.br
.RI "\fItry to insert an option \fP"
.ti -1c
.RI "static int \fBupk_db_try_update\fP (\fBsqlite3\fP *dbh, char *table_id, \fBupk_svc_desc_t\fP *svc, int type, char *optkey, void *optval, \fBsize_t\fP len, char *section, char *id)"
.br
.RI "\fItry to update an option \fP"
.ti -1c
.RI "bool \fBupk_db_upsert\fP (\fBsqlite3\fP *dbh, char *table_id, \fBupk_svc_desc_t\fP *svc, int type, char *optkey, void *optval, \fBsize_t\fP len, char *section, char *id)"
.br
.RI "\fIinsert or update a option. \fP"
.ti -1c
.RI "int32_t \fBupk_db_upsert_options\fP (\fBsqlite3\fP *dbh, \fBupk_svc_desc_t\fP *svc)"
.br
.RI "\fIInsert options into database;. \fP"
.ti -1c
.RI "bool \fBupk_db_insert_cfg\fP (\fBsqlite3\fP *dbh, \fBupk_svc_desc_t\fP *svc)"
.br
.RI "\fIInsert a configuration into the database. \fP"
.in -1c
.SH "Define Documentation"
.PP 
.SS "#define LIST_UPSERT_TEXT(A, B, C)"\fBValue:\fP
.PP
.nf
do { \
            if(svc->A && svc->A->thisp && svc->A->thisp->B && strnlen(svc->A->thisp->B, UPK_MAX_STRING_LEN) > 0) { \
                n = strnlen(svc->A->thisp->B, UPK_MAX_STRING_LEN); \
                upk_db_upsert(dbh, table_id, svc, SQLITE_TEXT, stringify(B), svc->A->thisp->B, -1, stringify(A), C); \
                if(n > 0) { \
                    hash_buffer_len += n; \
                    hash_buffer = realloc(hash_buffer, hash_buffer_len); \
                    strncat(hash_buffer, svc->A->thisp->B, n); \
                } \
            } \
        } while(0)
.fi
.PP
Referenced by upk_db_upsert_options().
.SS "#define UPSERT_INT(A, NMIN)"\fBValue:\fP
.PP
.nf
do { \
            if(svc->A != NMIN) { \
                upk_db_upsert(dbh, table_id, svc, SQLITE_INTEGER, stringify(A), &svc->A, 0, NULL, NULL); \
                n = snprintf(tmp_buffer, UPK_MAX_STRING_LEN - 1, '%ld', (long int) svc->A); \
                if(n > 0) { \
                    hash_buffer_len += n;  \
                    hash_buffer = realloc(hash_buffer, hash_buffer_len); \
                    strncat(hash_buffer, tmp_buffer, n); \
                } \
            } \
        } while(0)
.fi
.PP
Referenced by upk_db_upsert_options().
.SS "#define UPSERT_TEXT(A)"\fBValue:\fP
.PP
.nf
do { \
            if(svc->A && strnlen(svc->A, UPK_MAX_STRING_LEN) > 0) { \
                n = strnlen(svc->A, UPK_MAX_STRING_LEN); \
                upk_db_upsert(dbh, table_id, svc, SQLITE_TEXT, stringify(A), svc->A, -1, NULL, NULL); \
                hash_buffer_len += n; \
                hash_buffer = realloc(hash_buffer, hash_buffer_len); \
                strncat(hash_buffer, svc->A, n); \
            } \
        } while(0)
.fi
.PP
insert or update a list option. ****************************************************************************************************************** 
.PP
\fBParameters:\fP
.RS 4
\fIdbh\fP The database handle. 
.br
\fIsvc\fP The service description to insert. 
.br
\fItype\fP The type to use for bind. 
.br
\fIoptkey\fP The name of the option to insert/update. 
.br
\fIoptval\fP The value to insert/update.
.RE
.PP
\fBReturns:\fP
.RS 4
true on success, false on failure. 
.RE
.PP

.PP
Referenced by upk_db_upsert_options().
.SH "Typedef Documentation"
.PP 
.SS "typedef enum \fB_buddy_cmnd\fP  \fBbuddy_cmnd_t\fP"
.PP
controller side of buddy protocol. This is what controller sends to buddy 
.SS "typedef struct \fB_buddy_info\fP \fBbuddy_info_t\fP"
.PP
information buddy returns. 
.SS "typedef struct \fB_upk_controller_config\fP  \fBupk_controller_config_t\fP"
.PP
controller configuration. 
.SH "Enumeration Type Documentation"
.PP 
.SS "enum \fB_buddy_cmnd\fP"
.PP
controller side of buddy protocol. This is what controller sends to buddy 
.PP
\fBEnumerator: \fP
.in +1c
.TP
\fB\fIUPK_CTRL_NONE \fP\fP
unset 
.TP
\fB\fIUPK_CTRL_ACK \fP\fP
controller received the last msg buddy sent it 
.TP
\fB\fIUPK_CTRL_SHUTDOWN \fP\fP
buddy shutdown 
.TP
\fB\fIUPK_CTRL_STATUS_REQ \fP\fP
report status to controller 
.TP
\fB\fIUPK_CTRL_ACTION_START \fP\fP
.TP
\fB\fIUPK_CTRL_ACTION_STOP \fP\fP
run stop script, which should kill the monitored process 
.TP
\fB\fIUPK_CTRL_ACTION_RELOAD \fP\fP
run reload script, which could, for example, send SIGHUP 
.TP
\fB\fIUPK_CTRL_ACTION_RUNONCE \fP\fP
run a monitored process in a restarter... only once... ??? 
.TP
\fB\fIUPK_CTRL_CUSTOM_ACTION_00 \fP\fP
run user-defined action 00 
.TP
\fB\fIUPK_CTRL_CUSTOM_ACTION_01 \fP\fP
run user-defined action 01 
.TP
\fB\fIUPK_CTRL_CUSTOM_ACTION_02 \fP\fP
run user-defined action 02 
.TP
\fB\fIUPK_CTRL_CUSTOM_ACTION_03 \fP\fP
run user-defined action 03 
.TP
\fB\fIUPK_CTRL_CUSTOM_ACTION_04 \fP\fP
run user-defined action 04 
.TP
\fB\fIUPK_CTRL_CUSTOM_ACTION_05 \fP\fP
run user-defined action 05 
.TP
\fB\fIUPK_CTRL_CUSTOM_ACTION_06 \fP\fP
run user-defined action 06 
.TP
\fB\fIUPK_CTRL_CUSTOM_ACTION_07 \fP\fP
run user-defined action 07 
.TP
\fB\fIUPK_CTRL_CUSTOM_ACTION_08 \fP\fP
run user-defined action 08 
.TP
\fB\fIUPK_CTRL_CUSTOM_ACTION_09 \fP\fP
run user-defined action 09 
.TP
\fB\fIUPK_CTRL_CUSTOM_ACTION_10 \fP\fP
run user-defined action 10 
.TP
\fB\fIUPK_CTRL_CUSTOM_ACTION_11 \fP\fP
run user-defined action 11 
.TP
\fB\fIUPK_CTRL_CUSTOM_ACTION_12 \fP\fP
run user-defined action 12 
.TP
\fB\fIUPK_CTRL_CUSTOM_ACTION_13 \fP\fP
run user-defined action 13 
.TP
\fB\fIUPK_CTRL_CUSTOM_ACTION_14 \fP\fP
run user-defined action 14 
.TP
\fB\fIUPK_CTRL_CUSTOM_ACTION_15 \fP\fP
run user-defined action 15 
.TP
\fB\fIUPK_CTRL_CUSTOM_ACTION_16 \fP\fP
run user-defined action 16 
.TP
\fB\fIUPK_CTRL_CUSTOM_ACTION_17 \fP\fP
run user-defined action 17 
.TP
\fB\fIUPK_CTRL_CUSTOM_ACTION_18 \fP\fP
run user-defined action 18 
.TP
\fB\fIUPK_CTRL_CUSTOM_ACTION_19 \fP\fP
run user-defined action 19 
.TP
\fB\fIUPK_CTRL_CUSTOM_ACTION_20 \fP\fP
run user-defined action 20 
.TP
\fB\fIUPK_CTRL_CUSTOM_ACTION_21 \fP\fP
run user-defined action 21 
.TP
\fB\fIUPK_CTRL_CUSTOM_ACTION_22 \fP\fP
run user-defined action 22 
.TP
\fB\fIUPK_CTRL_CUSTOM_ACTION_23 \fP\fP
run user-defined action 23 
.TP
\fB\fIUPK_CTRL_CUSTOM_ACTION_24 \fP\fP
run user-defined action 24 
.TP
\fB\fIUPK_CTRL_CUSTOM_ACTION_25 \fP\fP
run user-defined action 25 
.TP
\fB\fIUPK_CTRL_CUSTOM_ACTION_26 \fP\fP
run user-defined action 26 
.TP
\fB\fIUPK_CTRL_CUSTOM_ACTION_27 \fP\fP
run user-defined action 27 
.TP
\fB\fIUPK_CTRL_CUSTOM_ACTION_28 \fP\fP
run user-defined action 28 
.TP
\fB\fIUPK_CTRL_CUSTOM_ACTION_29 \fP\fP
run user-defined action 29 
.TP
\fB\fIUPK_CTRL_CUSTOM_ACTION_30 \fP\fP
run user-defined action 30 
.TP
\fB\fIUPK_CTRL_CUSTOM_ACTION_31 \fP\fP
run user-defined action 31 
.TP
\fB\fIUPK_CTRL_SIGNAL_01 \fP\fP
send managed process signal 01 
.TP
\fB\fIUPK_CTRL_SIGNAL_02 \fP\fP
send managed process signal 02 
.TP
\fB\fIUPK_CTRL_SIGNAL_03 \fP\fP
send managed process signal 03 
.TP
\fB\fIUPK_CTRL_SIGNAL_04 \fP\fP
send managed process signal 04 
.TP
\fB\fIUPK_CTRL_SIGNAL_05 \fP\fP
send managed process signal 05 
.TP
\fB\fIUPK_CTRL_SIGNAL_06 \fP\fP
send managed process signal 06 
.TP
\fB\fIUPK_CTRL_SIGNAL_07 \fP\fP
send managed process signal 07 
.TP
\fB\fIUPK_CTRL_SIGNAL_08 \fP\fP
send managed process signal 08 
.TP
\fB\fIUPK_CTRL_SIGNAL_09 \fP\fP
send managed process signal 09 
.TP
\fB\fIUPK_CTRL_SIGNAL_10 \fP\fP
send managed process signal 10 
.TP
\fB\fIUPK_CTRL_SIGNAL_11 \fP\fP
send managed process signal 11 
.TP
\fB\fIUPK_CTRL_SIGNAL_12 \fP\fP
send managed process signal 12 
.TP
\fB\fIUPK_CTRL_SIGNAL_13 \fP\fP
send managed process signal 13 
.TP
\fB\fIUPK_CTRL_SIGNAL_14 \fP\fP
send managed process signal 14 
.TP
\fB\fIUPK_CTRL_SIGNAL_15 \fP\fP
send managed process signal 15 
.TP
\fB\fIUPK_CTRL_SIGNAL_16 \fP\fP
send managed process signal 16 
.TP
\fB\fIUPK_CTRL_SIGNAL_17 \fP\fP
send managed process signal 17 
.TP
\fB\fIUPK_CTRL_SIGNAL_18 \fP\fP
send managed process signal 18 
.TP
\fB\fIUPK_CTRL_SIGNAL_19 \fP\fP
send managed process signal 19 
.TP
\fB\fIUPK_CTRL_SIGNAL_20 \fP\fP
send managed process signal 20 
.TP
\fB\fIUPK_CTRL_SIGNAL_21 \fP\fP
send managed process signal 21 
.TP
\fB\fIUPK_CTRL_SIGNAL_22 \fP\fP
send managed process signal 22 
.TP
\fB\fIUPK_CTRL_SIGNAL_23 \fP\fP
send managed process signal 23 
.TP
\fB\fIUPK_CTRL_SIGNAL_24 \fP\fP
send managed process signal 24 
.TP
\fB\fIUPK_CTRL_SIGNAL_25 \fP\fP
send managed process signal 25 
.TP
\fB\fIUPK_CTRL_SIGNAL_26 \fP\fP
send managed process signal 26 
.TP
\fB\fIUPK_CTRL_SIGNAL_27 \fP\fP
send managed process signal 27 
.TP
\fB\fIUPK_CTRL_SIGNAL_28 \fP\fP
send managed process signal 28 
.TP
\fB\fIUPK_CTRL_SIGNAL_29 \fP\fP
send managed process signal 29 
.TP
\fB\fIUPK_CTRL_SIGNAL_30 \fP\fP
send managed process signal 30 
.TP
\fB\fIUPK_CTRL_SIGNAL_31 \fP\fP
send managed process signal 31 
.TP
\fB\fIUPK_CTRL_SIGNAL_32 \fP\fP
send managed process signal 32 
.TP
\fB\fIUPK_CTRL_NONE \fP\fP
.TP
\fB\fIUPK_CTRL_ACK \fP\fP
.TP
\fB\fIUPK_CTRL_SHUTDOWN \fP\fP
.TP
\fB\fIUPK_CTRL_STATUS_REQ \fP\fP
.TP
\fB\fIUPK_CTRL_ACTION_START \fP\fP
.TP
\fB\fIUPK_CTRL_ACTION_STOP \fP\fP
.TP
\fB\fIUPK_CTRL_ACTION_RELOAD \fP\fP
.TP
\fB\fIUPK_CTRL_ACTION_RUNONCE \fP\fP
.TP
\fB\fIUPK_CTRL_CUSTOM_ACTION_00 \fP\fP
.TP
\fB\fIUPK_CTRL_CUSTOM_ACTION_01 \fP\fP
.TP
\fB\fIUPK_CTRL_CUSTOM_ACTION_02 \fP\fP
.TP
\fB\fIUPK_CTRL_CUSTOM_ACTION_03 \fP\fP
.TP
\fB\fIUPK_CTRL_CUSTOM_ACTION_04 \fP\fP
.TP
\fB\fIUPK_CTRL_CUSTOM_ACTION_05 \fP\fP
.TP
\fB\fIUPK_CTRL_CUSTOM_ACTION_06 \fP\fP
.TP
\fB\fIUPK_CTRL_CUSTOM_ACTION_07 \fP\fP
.TP
\fB\fIUPK_CTRL_CUSTOM_ACTION_08 \fP\fP
.TP
\fB\fIUPK_CTRL_CUSTOM_ACTION_09 \fP\fP
.TP
\fB\fIUPK_CTRL_CUSTOM_ACTION_10 \fP\fP
.TP
\fB\fIUPK_CTRL_CUSTOM_ACTION_11 \fP\fP
.TP
\fB\fIUPK_CTRL_CUSTOM_ACTION_12 \fP\fP
.TP
\fB\fIUPK_CTRL_CUSTOM_ACTION_13 \fP\fP
.TP
\fB\fIUPK_CTRL_CUSTOM_ACTION_14 \fP\fP
.TP
\fB\fIUPK_CTRL_CUSTOM_ACTION_15 \fP\fP
.TP
\fB\fIUPK_CTRL_CUSTOM_ACTION_16 \fP\fP
.TP
\fB\fIUPK_CTRL_CUSTOM_ACTION_17 \fP\fP
.TP
\fB\fIUPK_CTRL_CUSTOM_ACTION_18 \fP\fP
.TP
\fB\fIUPK_CTRL_CUSTOM_ACTION_19 \fP\fP
.TP
\fB\fIUPK_CTRL_CUSTOM_ACTION_20 \fP\fP
.TP
\fB\fIUPK_CTRL_CUSTOM_ACTION_21 \fP\fP
.TP
\fB\fIUPK_CTRL_CUSTOM_ACTION_22 \fP\fP
.TP
\fB\fIUPK_CTRL_CUSTOM_ACTION_23 \fP\fP
.TP
\fB\fIUPK_CTRL_CUSTOM_ACTION_24 \fP\fP
.TP
\fB\fIUPK_CTRL_CUSTOM_ACTION_25 \fP\fP
.TP
\fB\fIUPK_CTRL_CUSTOM_ACTION_26 \fP\fP
.TP
\fB\fIUPK_CTRL_CUSTOM_ACTION_27 \fP\fP
.TP
\fB\fIUPK_CTRL_CUSTOM_ACTION_28 \fP\fP
.TP
\fB\fIUPK_CTRL_CUSTOM_ACTION_29 \fP\fP
.TP
\fB\fIUPK_CTRL_CUSTOM_ACTION_30 \fP\fP
.TP
\fB\fIUPK_CTRL_CUSTOM_ACTION_31 \fP\fP
.TP
\fB\fIUPK_CTRL_SIGNAL_01 \fP\fP
.TP
\fB\fIUPK_CTRL_SIGNAL_02 \fP\fP
.TP
\fB\fIUPK_CTRL_SIGNAL_03 \fP\fP
.TP
\fB\fIUPK_CTRL_SIGNAL_04 \fP\fP
.TP
\fB\fIUPK_CTRL_SIGNAL_05 \fP\fP
.TP
\fB\fIUPK_CTRL_SIGNAL_06 \fP\fP
.TP
\fB\fIUPK_CTRL_SIGNAL_07 \fP\fP
.TP
\fB\fIUPK_CTRL_SIGNAL_08 \fP\fP
.TP
\fB\fIUPK_CTRL_SIGNAL_09 \fP\fP
.TP
\fB\fIUPK_CTRL_SIGNAL_10 \fP\fP
.TP
\fB\fIUPK_CTRL_SIGNAL_11 \fP\fP
.TP
\fB\fIUPK_CTRL_SIGNAL_12 \fP\fP
.TP
\fB\fIUPK_CTRL_SIGNAL_13 \fP\fP
.TP
\fB\fIUPK_CTRL_SIGNAL_14 \fP\fP
.TP
\fB\fIUPK_CTRL_SIGNAL_15 \fP\fP
.TP
\fB\fIUPK_CTRL_SIGNAL_16 \fP\fP
.TP
\fB\fIUPK_CTRL_SIGNAL_17 \fP\fP
.TP
\fB\fIUPK_CTRL_SIGNAL_18 \fP\fP
.TP
\fB\fIUPK_CTRL_SIGNAL_19 \fP\fP
.TP
\fB\fIUPK_CTRL_SIGNAL_20 \fP\fP
.TP
\fB\fIUPK_CTRL_SIGNAL_21 \fP\fP
.TP
\fB\fIUPK_CTRL_SIGNAL_22 \fP\fP
.TP
\fB\fIUPK_CTRL_SIGNAL_23 \fP\fP
.TP
\fB\fIUPK_CTRL_SIGNAL_24 \fP\fP
.TP
\fB\fIUPK_CTRL_SIGNAL_25 \fP\fP
.TP
\fB\fIUPK_CTRL_SIGNAL_26 \fP\fP
.TP
\fB\fIUPK_CTRL_SIGNAL_27 \fP\fP
.TP
\fB\fIUPK_CTRL_SIGNAL_28 \fP\fP
.TP
\fB\fIUPK_CTRL_SIGNAL_29 \fP\fP
.TP
\fB\fIUPK_CTRL_SIGNAL_30 \fP\fP
.TP
\fB\fIUPK_CTRL_SIGNAL_31 \fP\fP
.TP
\fB\fIUPK_CTRL_SIGNAL_32 \fP\fP
.TP
\fB\fIUPK_CTRL_NONE \fP\fP
.TP
\fB\fIUPK_CTRL_ACK \fP\fP
.TP
\fB\fIUPK_CTRL_SHUTDOWN \fP\fP
.TP
\fB\fIUPK_CTRL_STATUS_REQ \fP\fP
.TP
\fB\fIUPK_CTRL_ACTION_START \fP\fP
.TP
\fB\fIUPK_CTRL_ACTION_STOP \fP\fP
.TP
\fB\fIUPK_CTRL_ACTION_RELOAD \fP\fP
.TP
\fB\fIUPK_CTRL_ACTION_RUNONCE \fP\fP
.TP
\fB\fIUPK_CTRL_CUSTOM_ACTION_00 \fP\fP
.TP
\fB\fIUPK_CTRL_CUSTOM_ACTION_01 \fP\fP
.TP
\fB\fIUPK_CTRL_CUSTOM_ACTION_02 \fP\fP
.TP
\fB\fIUPK_CTRL_CUSTOM_ACTION_03 \fP\fP
.TP
\fB\fIUPK_CTRL_CUSTOM_ACTION_04 \fP\fP
.TP
\fB\fIUPK_CTRL_CUSTOM_ACTION_05 \fP\fP
.TP
\fB\fIUPK_CTRL_CUSTOM_ACTION_06 \fP\fP
.TP
\fB\fIUPK_CTRL_CUSTOM_ACTION_07 \fP\fP
.TP
\fB\fIUPK_CTRL_CUSTOM_ACTION_08 \fP\fP
.TP
\fB\fIUPK_CTRL_CUSTOM_ACTION_09 \fP\fP
.TP
\fB\fIUPK_CTRL_CUSTOM_ACTION_10 \fP\fP
.TP
\fB\fIUPK_CTRL_CUSTOM_ACTION_11 \fP\fP
.TP
\fB\fIUPK_CTRL_CUSTOM_ACTION_12 \fP\fP
.TP
\fB\fIUPK_CTRL_CUSTOM_ACTION_13 \fP\fP
.TP
\fB\fIUPK_CTRL_CUSTOM_ACTION_14 \fP\fP
.TP
\fB\fIUPK_CTRL_CUSTOM_ACTION_15 \fP\fP
.TP
\fB\fIUPK_CTRL_CUSTOM_ACTION_16 \fP\fP
.TP
\fB\fIUPK_CTRL_CUSTOM_ACTION_17 \fP\fP
.TP
\fB\fIUPK_CTRL_CUSTOM_ACTION_18 \fP\fP
.TP
\fB\fIUPK_CTRL_CUSTOM_ACTION_19 \fP\fP
.TP
\fB\fIUPK_CTRL_CUSTOM_ACTION_20 \fP\fP
.TP
\fB\fIUPK_CTRL_CUSTOM_ACTION_21 \fP\fP
.TP
\fB\fIUPK_CTRL_CUSTOM_ACTION_22 \fP\fP
.TP
\fB\fIUPK_CTRL_CUSTOM_ACTION_23 \fP\fP
.TP
\fB\fIUPK_CTRL_CUSTOM_ACTION_24 \fP\fP
.TP
\fB\fIUPK_CTRL_CUSTOM_ACTION_25 \fP\fP
.TP
\fB\fIUPK_CTRL_CUSTOM_ACTION_26 \fP\fP
.TP
\fB\fIUPK_CTRL_CUSTOM_ACTION_27 \fP\fP
.TP
\fB\fIUPK_CTRL_CUSTOM_ACTION_28 \fP\fP
.TP
\fB\fIUPK_CTRL_CUSTOM_ACTION_29 \fP\fP
.TP
\fB\fIUPK_CTRL_CUSTOM_ACTION_30 \fP\fP
.TP
\fB\fIUPK_CTRL_CUSTOM_ACTION_31 \fP\fP
.TP
\fB\fIUPK_CTRL_SIGNAL_01 \fP\fP
.TP
\fB\fIUPK_CTRL_SIGNAL_02 \fP\fP
.TP
\fB\fIUPK_CTRL_SIGNAL_03 \fP\fP
.TP
\fB\fIUPK_CTRL_SIGNAL_04 \fP\fP
.TP
\fB\fIUPK_CTRL_SIGNAL_05 \fP\fP
.TP
\fB\fIUPK_CTRL_SIGNAL_06 \fP\fP
.TP
\fB\fIUPK_CTRL_SIGNAL_07 \fP\fP
.TP
\fB\fIUPK_CTRL_SIGNAL_08 \fP\fP
.TP
\fB\fIUPK_CTRL_SIGNAL_09 \fP\fP
.TP
\fB\fIUPK_CTRL_SIGNAL_10 \fP\fP
.TP
\fB\fIUPK_CTRL_SIGNAL_11 \fP\fP
.TP
\fB\fIUPK_CTRL_SIGNAL_12 \fP\fP
.TP
\fB\fIUPK_CTRL_SIGNAL_13 \fP\fP
.TP
\fB\fIUPK_CTRL_SIGNAL_14 \fP\fP
.TP
\fB\fIUPK_CTRL_SIGNAL_15 \fP\fP
.TP
\fB\fIUPK_CTRL_SIGNAL_16 \fP\fP
.TP
\fB\fIUPK_CTRL_SIGNAL_17 \fP\fP
.TP
\fB\fIUPK_CTRL_SIGNAL_18 \fP\fP
.TP
\fB\fIUPK_CTRL_SIGNAL_19 \fP\fP
.TP
\fB\fIUPK_CTRL_SIGNAL_20 \fP\fP
.TP
\fB\fIUPK_CTRL_SIGNAL_21 \fP\fP
.TP
\fB\fIUPK_CTRL_SIGNAL_22 \fP\fP
.TP
\fB\fIUPK_CTRL_SIGNAL_23 \fP\fP
.TP
\fB\fIUPK_CTRL_SIGNAL_24 \fP\fP
.TP
\fB\fIUPK_CTRL_SIGNAL_25 \fP\fP
.TP
\fB\fIUPK_CTRL_SIGNAL_26 \fP\fP
.TP
\fB\fIUPK_CTRL_SIGNAL_27 \fP\fP
.TP
\fB\fIUPK_CTRL_SIGNAL_28 \fP\fP
.TP
\fB\fIUPK_CTRL_SIGNAL_29 \fP\fP
.TP
\fB\fIUPK_CTRL_SIGNAL_30 \fP\fP
.TP
\fB\fIUPK_CTRL_SIGNAL_31 \fP\fP
.TP
\fB\fIUPK_CTRL_SIGNAL_32 \fP\fP

.SS "enum \fBbuddy_runstate_t\fP"
.PP
states for buddy 
.PP
\fBEnumerator: \fP
.in +1c
.TP
\fB\fIBUDDY_UNKNOWN \fP\fP
.TP
\fB\fIBUDDY_STOPPED \fP\fP
the current state of the managed process is stopped 
.TP
\fB\fIBUDDY_RUNNING \fP\fP
the current state of the managed process is running 
.TP
\fB\fIBUDDY_RANONCE \fP\fP
the current state of the managed process was that it ran once 
.TP
\fB\fIBUDDY_UNKNOWN \fP\fP
.TP
\fB\fIBUDDY_STOPPED \fP\fP
.TP
\fB\fIBUDDY_RUNNING \fP\fP
.TP
\fB\fIBUDDY_RANONCE \fP\fP
.TP
\fB\fIBUDDY_UNKNOWN \fP\fP
.TP
\fB\fIBUDDY_STOPPED \fP\fP
.TP
\fB\fIBUDDY_RUNNING \fP\fP
.TP
\fB\fIBUDDY_RANONCE \fP\fP

.SH "Function Documentation"
.PP 
.SS "bool upk_db_add_new_service (\fBsqlite3\fP *dbh, \fBupk_svc_desc_t\fP *svc)"
.PP
Create new service definition. ****************************************************************************************************************** 
.PP
\fBParameters:\fP
.RS 4
\fIdbh\fP The database handle. 
.br
\fIsvc\fP The service description to insert.
.RE
.PP
\fBReturns:\fP
.RS 4
true on success, false on failure. 
.RE
.PP

.PP
References IF_UPK_ERROR, _upk_svc_desc::Name, _upk_svc_desc::Package, sqlite3_exec(), sqlite3_free(), upk_concat_svcid(), UPK_CONF_ERROR, upk_db_gen_uuid(), upk_db_get_cfg_services_table(), upk_db_get_single_text(), UPK_FUNC_ASSERT_MSG, UPK_MAX_STRING_LEN, UPK_SQL_ERROR, upk_string_to_uuid(), UPK_UUID_STRING_LEN, upk_uuid_to_string(), and _upk_svc_desc::UUID.
.PP
Referenced by upk_db_insert_cfg().
.SS "char* upk_db_gen_uuid (\fBsqlite3\fP *dbh)"
.PP
generate new unique service UUID. ****************************************************************************************************************** 
.PP
\fBParameters:\fP
.RS 4
\fIdbh\fP The database handle.
.RE
.PP
\fBReturns:\fP
.RS 4
uuid 
.RE
.PP

.PP
References strnlen(), upk_db_get_cfg_services_table(), upk_db_get_single_text(), upk_gen_uuid_bytes(), UPK_MAX_STRING_LEN, upk_uuid_open_random(), upk_uuid_seed_random(), UPK_UUID_STRING_LEN, and upk_uuid_to_string().
.PP
Referenced by upk_db_add_new_service().
.SS "int upk_db_get_audit_service_table (\fBsqlite3\fP *dbh, char *table_id)"
.PP
lookup the table_id for upk_audit.service from the schema table. ****************************************************************************************************************** 
.PP
\fBParameters:\fP
.RS 4
\fIdbh\fP The database handle. 
.br
\fItable_id\fP The result of looking up the table id.
.RE
.PP
\fBReturns:\fP
.RS 4
0 on success, -1 if table-name not found, and the result code if there was a sql error 
.RE
.PP

.SS "int upk_db_get_cfg_services_table (\fBsqlite3\fP *dbh, char *table_id)"
.PP
lookup the table_id for upk_cfg.services from the schema table. ****************************************************************************************************************** 
.PP
\fBParameters:\fP
.RS 4
\fIdbh\fP The database handle. 
.br
\fItable_id\fP The result of looking up the table id.
.RE
.PP
\fBReturns:\fP
.RS 4
0 on success, -1 if table-name not found, and the result code if there was a sql error 
.RE
.PP

.PP
Referenced by upk_db_add_new_service(), upk_db_gen_uuid(), and upk_db_svc_uuid_lookup().
.SS "int upk_db_get_cfg_svc_list_options_table (\fBsqlite3\fP *dbh, char *table_id)"
.PP
lookup the table_id for upk_cfg.svc_list_options from the schema table. ****************************************************************************************************************** 
.PP
\fBParameters:\fP
.RS 4
\fIdbh\fP The database handle. 
.br
\fItable_id\fP The result of looking up the table id.
.RE
.PP
\fBReturns:\fP
.RS 4
0 on success, -1 if table-name not found, and the result code if there was a sql error 
.RE
.PP

.PP
References upk_db_get_table_id().
.PP
Referenced by upk_db_upsert_options().
.SS "int upk_db_get_cfg_svc_options_table (\fBsqlite3\fP *dbh, char *table_id)"
.PP
lookup the table_id for upk_cfg.svc_optionsfrom the schema table. ****************************************************************************************************************** 
.PP
\fBParameters:\fP
.RS 4
\fIdbh\fP The database handle. 
.br
\fItable_id\fP The result of looking up the table id.
.RE
.PP
\fBReturns:\fP
.RS 4
0 on success, -1 if table-name not found, and the result code if there was a sql error 
.RE
.PP

.PP
Referenced by upk_db_try_insert(), upk_db_try_update(), and upk_db_upsert_options().
.SS "int upk_db_get_single_text (\fBsqlite3\fP *dbh, char *value, const char *sql, ...)"
.PP
lookup a table_id from the schema table. ****************************************************************************************************************** 
.PP
\fBParameters:\fP
.RS 4
\fIdbh\fP The database handle. 
.br
\fIvalue\fP The place to store the single value. 
.br
\fIsql\fP The table to query. 
.br
\fI...\fP Values to substitute via bind (terminate with (char *) NULL) - If there are 0 arguments, you must still include a (char *) NULL).
.RE
.PP
\fBReturns:\fP
.RS 4
0 on success, -1 if table-name not found, and the result code if there was a sql error 
.RE
.PP

.PP
Referenced by upk_db_add_new_service(), upk_db_gen_uuid(), upk_db_get_table_id(), and upk_db_svc_uuid_lookup().
.SS "static int upk_db_get_table_id (\fBsqlite3\fP *dbh, const char *db, const char *table_name, char *table_id)\fC [static]\fP"
.PP
lookup a table_id from the schema table. ****************************************************************************************************************** 
.PP
\fBParameters:\fP
.RS 4
\fIdbh\fP The database handle. 
.br
\fIdb\fP The name of the database to search in. 
.br
\fItable_name\fP The name of the table you are lookin for. 
.br
\fItable_id\fP The result of looking up the table id.
.RE
.PP
\fBReturns:\fP
.RS 4
0 on success, -1 if table-name not found, and the result code if there was a sql error 
.RE
.PP

.PP
References upk_db_get_single_text(), and UPK_MAX_STRING_LEN.
.PP
Referenced by upk_db_get_audit_service_table(), upk_db_get_cfg_services_table(), upk_db_get_cfg_svc_list_options_table(), and upk_db_get_cfg_svc_options_table().
.SS "bool upk_db_insert_cfg (\fBsqlite3\fP *dbh, \fBupk_svc_desc_t\fP *svc)"
.PP
Insert a configuration into the database. ****************************************************************************************************************** 
.PP
\fBParameters:\fP
.RS 4
\fIdbh\fP The database handle. 
.br
\fIsvc\fP The service description to insert.
.RE
.PP
\fBReturns:\fP
.RS 4
true on success, false on failure. 
.RE
.PP

.PP
Referenced by upk_ctrl_init().
.SS "char* upk_db_svc_uuid_lookup (\fBsqlite3\fP *dbh, const char *svcid, const char *package)"
.PP
lookup a service <package>-<name> ****************************************************************************************************************** 
.PP
\fBParameters:\fP
.RS 4
\fIdbh\fP The database handle. 
.br
\fIsvc_id\fP The service description to lookup. 
.br
\fIpackage\fP The package to lookup.
.RE
.PP
\fBReturns:\fP
.RS 4
the UUID of the service if found, NULL if not found. 
.RE
.PP

.PP
Referenced by upk_db_insert_cfg().
.SS "static int upk_db_try_insert (\fBsqlite3\fP *dbh, char *table_id, \fBupk_svc_desc_t\fP *svc, inttype, char *optkey, void *optval, \fBsize_t\fPlen, char *section, char *id)\fC [inline, static]\fP"
.PP
try to insert an option ****************************************************************************************************************** 
.PP
\fBParameters:\fP
.RS 4
\fIdbh\fP The database handle. 
.br
\fIsvc\fP The service description to insert. 
.br
\fItype\fP The type to use for bind. 
.br
\fIoptkey\fP The name of the option to insert/update. 
.br
\fIoptval\fP The value to insert/update.
.RE
.PP
\fBReturns:\fP
.RS 4
0 on success, ! 0 on error. 
.RE
.PP

.PP
References IF_UPK_ERROR, sqlite3_bind_blob(), sqlite3_bind_double(), sqlite3_bind_int(), sqlite3_bind_null(), sqlite3_bind_text(), sqlite3_errmsg(), sqlite3_finalize(), sqlite3_prepare(), sqlite3_reset(), sqlite3_step(), upk_debug1, upk_error, UPK_FUNC_ASSERT_MSG, UPK_MAX_STRING_LEN, UPK_SQL_ERROR, UPK_UUID_STRING_LEN, upk_uuid_to_string(), and _upk_svc_desc::UUID.
.PP
Referenced by upk_db_upsert().
.SS "static int upk_db_try_update (\fBsqlite3\fP *dbh, char *table_id, \fBupk_svc_desc_t\fP *svc, inttype, char *optkey, void *optval, \fBsize_t\fPlen, char *section, char *id)\fC [inline, static]\fP"
.PP
try to update an option ****************************************************************************************************************** 
.PP
\fBParameters:\fP
.RS 4
\fIdbh\fP The database handle. 
.br
\fIsvc\fP The service description to insert. 
.br
\fItype\fP The type to use for bind. 
.br
\fIoptkey\fP The name of the option to insert/update. 
.br
\fIoptval\fP The value to insert/update.
.RE
.PP
\fBReturns:\fP
.RS 4
0 on success, ! 0 on error. 
.RE
.PP

.PP
References IF_UPK_ERROR, sqlite3_bind_blob(), sqlite3_bind_double(), sqlite3_bind_int(), sqlite3_bind_null(), sqlite3_bind_text(), sqlite3_errmsg(), sqlite3_finalize(), sqlite3_prepare(), sqlite3_reset(), sqlite3_step(), upk_error, UPK_FUNC_ASSERT_MSG, UPK_MAX_STRING_LEN, UPK_SQL_ERROR, UPK_UUID_STRING_LEN, upk_uuid_to_string(), and _upk_svc_desc::UUID.
.PP
Referenced by upk_db_upsert().
.SS "bool upk_db_upsert (\fBsqlite3\fP *dbh, char *table_id, \fBupk_svc_desc_t\fP *svc, inttype, char *optkey, void *optval, \fBsize_t\fPlen, char *section, char *id)"
.PP
insert or update a option. ****************************************************************************************************************** 
.PP
\fBParameters:\fP
.RS 4
\fIdbh\fP The database handle. 
.br
\fIsvc\fP The service description to insert. 
.br
\fItype\fP The type to use for bind. 
.br
\fIoptkey\fP The name of the option to insert/update. 
.br
\fIoptval\fP The value to insert/update.
.RE
.PP
\fBReturns:\fP
.RS 4
true on success, false on failure. 
.RE
.PP

.PP
References _upk_svc_desc::Name, _upk_svc_desc::Package, upk_concat_svcid(), upk_db_try_insert(), upk_db_try_update(), UPK_MAX_STRING_LEN, UPK_UUID_STRING_LEN, upk_uuid_to_string(), upk_verbose, and _upk_svc_desc::UUID.
.PP
Referenced by upk_db_upsert_options().
.SS "int32_t upk_db_upsert_options (\fBsqlite3\fP *dbh, \fBupk_svc_desc_t\fP *svc)"
.PP
Insert options into database;. ****************************************************************************************************************** 
.PP
\fBParameters:\fP
.RS 4
\fIdbh\fP The database handle. 
.br
\fIsvc\fP The service description to insert.
.RE
.PP
\fBReturns:\fP
.RS 4
the hash of the added options on success, 0 on failure. 
.RE
.PP

.PP
References calloc(), _upk_cust_actscr_meta_p::count, _upk_svcid_meta_p::count, _upk_svc_desc::CustomActions, free(), LIST_UPSERT_TEXT, _upk_svc_desc::Provides, _upk_svc_desc::RestartOnNamedPrereqRestart, sqlite3_exec(), sqlite3_free(), _upk_svc_desc::StartAfter, upk_crc32(), upk_db_get_cfg_svc_list_options_table(), upk_db_get_cfg_svc_options_table(), upk_debug1, UPK_MAX_STRING_LEN, upk_uuid_to_string(), UPKLIST_FOREACH, UPSERT_INT, UPSERT_TEXT, and _upk_svc_desc::UUID.
.PP
Referenced by upk_db_insert_cfg().
.SH "Author"
.PP 
Generated automatically by Doxygen for upkeeper from the source code.
