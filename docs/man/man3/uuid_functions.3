.TH "Uuid_functions" 3 "Wed Dec 7 2011" "Version 1" "upkeeper" \" -*- nroff -*-
.ad l
.nh
.SH NAME
Uuid_functions \- 
.SS "Functions"

.in +1c
.ti -1c
.RI "void \fBupk_uuid_seed_random\fP (void)"
.br
.RI "\fIseed random number pool used by upk_gen_uuid_bytes. \fP"
.ti -1c
.RI "int \fBupk_uuid_open_random\fP (void)"
.br
.RI "\fIopen random device, prefering /dev/urandom, but also trying /dev/random if urandom is unavailable. \fP"
.ti -1c
.RI "void \fBupk_gen_uuid_bytes\fP (\fBupk_uuid_t\fP *buf)"
.br
.RI "\fIcollect and/or generate 16 bytes of random data. \fP"
.ti -1c
.RI "void \fBupk_uuid_to_string\fP (char *buf, const \fBupk_uuid_t\fP *uuid)"
.br
.RI "\fIconvert uuid to string and place in buf. \fP"
.ti -1c
.RI "bool \fBis_valid_upk_uuid_string\fP (const char *string)"
.br
.RI "\fItest if a given string is a valid uuid string. \fP"
.ti -1c
.RI "void \fBupk_string_to_uuid\fP (\fBupk_uuid_t\fP *uuid, const char *string)"
.br
.RI "\fIconvert uuid string into uuid structure. \fP"
.in -1c
.SH "Function Documentation"
.PP 
.SS "bool is_valid_upk_uuid_string (const char *string)"
.PP
test if a given string is a valid uuid string. ****************************************************************************************************************** verify string is 36 chars long; and consists of a correctly hiphen-separated sequence of hexidecimal digits
.PP
\fBParameters:\fP
.RS 4
\fIstring\fP string to check 
.RE
.PP

.SS "void upk_gen_uuid_bytes (\fBupk_uuid_t\fP *buf)"
.PP
collect and/or generate 16 bytes of random data. ****************************************************************************************************************** pack the structure you passed; also sets version correctly on structure to conform with spec
.PP
\fBParameters:\fP
.RS 4
\fIbuf\fP uuid structure to populate 
.RE
.PP

.SS "void upk_string_to_uuid (\fBupk_uuid_t\fP *uuid, const char *string)"
.PP
convert uuid string into uuid structure. ****************************************************************************************************************** 
.PP
\fBParameters:\fP
.RS 4
\fIstring\fP uuid string to convert
.br
\fIuuid\fP pointer to buffer to populate 
.RE
.PP

.SS "int upk_uuid_open_random (void)"
.PP
open random device, prefering /dev/urandom, but also trying /dev/random if urandom is unavailable. ****************************************************************************************************************** 
.PP
\fBReturns:\fP
.RS 4
fd of opened device 
.PP
< 0 on error (check errno) 
.RE
.PP

.SS "void upk_uuid_seed_random (void)"
.PP
seed random number pool used by upk_gen_uuid_bytes. ***************************************************************************************************************** Only necessary if /dev/urandom and /dev/random are unavailable; for instance, check upk_uuid_open_random to see if you get a valid fd; if not, call this (unless you have already seeded random elsewhere, in whatever manner you prefer 
.SS "void upk_uuid_to_string (char *buf, const \fBupk_uuid_t\fP *uuid)"
.PP
convert uuid to string and place in buf. ****************************************************************************************************************** 
.PP
\fBParameters:\fP
.RS 4
\fIbuf\fP string buffer (must be at least (UPK_UUID_STRING_LEN + 1) bytes long)
.br
\fIuuid\fP uuid structure to convert 
.RE
.PP

.SH "Author"
.PP 
Generated automatically by Doxygen for upkeeper from the source code.
