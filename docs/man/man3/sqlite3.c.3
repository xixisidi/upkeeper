.TH "deps/sqlite-3.7.3/sqlite3.c" 3 "20 Jul 2011" "Version 1" "upkeeper" \" -*- nroff -*-
.ad l
.nh
.SH NAME
deps/sqlite-3.7.3/sqlite3.c \- 
.SH SYNOPSIS
.br
.PP
\fC#include <stdarg.h>\fP
.br
\fC#include <stdio.h>\fP
.br
\fC#include <stdlib.h>\fP
.br
\fC#include <string.h>\fP
.br
\fC#include <assert.h>\fP
.br
\fC#include <stddef.h>\fP
.br
\fC#include <time.h>\fP
.br
\fC#include <pthread.h>\fP
.br
\fC#include <sys/types.h>\fP
.br
\fC#include <sys/stat.h>\fP
.br
\fC#include <fcntl.h>\fP
.br
\fC#include <unistd.h>\fP
.br
\fC#include <sys/time.h>\fP
.br
\fC#include <errno.h>\fP
.br
\fC#include <sys/mman.h>\fP
.br
\fC#include <dlfcn.h>\fP
.br

.SS "Data Structures"

.in +1c
.ti -1c
.RI "struct \fBsqlite3_file\fP"
.br
.ti -1c
.RI "struct \fBsqlite3_io_methods\fP"
.br
.ti -1c
.RI "struct \fBsqlite3_vfs\fP"
.br
.ti -1c
.RI "struct \fBsqlite3_mem_methods\fP"
.br
.ti -1c
.RI "struct \fBsqlite3_module\fP"
.br
.ti -1c
.RI "struct \fBsqlite3_index_info\fP"
.br
.ti -1c
.RI "struct \fBsqlite3_index_info::sqlite3_index_constraint\fP"
.br
.ti -1c
.RI "struct \fBsqlite3_index_info::sqlite3_index_orderby\fP"
.br
.ti -1c
.RI "struct \fBsqlite3_index_info::sqlite3_index_constraint_usage\fP"
.br
.ti -1c
.RI "struct \fBsqlite3_vtab\fP"
.br
.ti -1c
.RI "struct \fBsqlite3_vtab_cursor\fP"
.br
.ti -1c
.RI "struct \fBsqlite3_mutex_methods\fP"
.br
.ti -1c
.RI "struct \fBsqlite3_pcache_methods\fP"
.br
.ti -1c
.RI "struct \fBsqlite3_rtree_geometry\fP"
.br
.ti -1c
.RI "struct \fBHash\fP"
.br
.ti -1c
.RI "struct \fBHash::_ht\fP"
.br
.ti -1c
.RI "struct \fBHashElem\fP"
.br
.ti -1c
.RI "struct \fBBusyHandler\fP"
.br
.ti -1c
.RI "struct \fBBtreeMutexArray\fP"
.br
.ti -1c
.RI "struct \fBVdbeOp\fP"
.br
.ti -1c
.RI "struct \fBSubProgram\fP"
.br
.ti -1c
.RI "struct \fBVdbeOpList\fP"
.br
.ti -1c
.RI "struct \fBPgHdr\fP"
.br
.ti -1c
.RI "struct \fBDb\fP"
.br
.ti -1c
.RI "struct \fBSchema\fP"
.br
.ti -1c
.RI "struct \fBLookaside\fP"
.br
.ti -1c
.RI "struct \fBLookasideSlot\fP"
.br
.ti -1c
.RI "struct \fBFuncDefHash\fP"
.br
.ti -1c
.RI "struct \fBsqlite3\fP"
.br
.ti -1c
.RI "struct \fBsqlite3::sqlite3InitInfo\fP"
.br
.ti -1c
.RI "struct \fBFuncDef\fP"
.br
.ti -1c
.RI "struct \fBFuncDestructor\fP"
.br
.ti -1c
.RI "struct \fBSavepoint\fP"
.br
.ti -1c
.RI "struct \fBModule\fP"
.br
.ti -1c
.RI "struct \fBColumn\fP"
.br
.ti -1c
.RI "struct \fBCollSeq\fP"
.br
.ti -1c
.RI "struct \fBVTable\fP"
.br
.ti -1c
.RI "struct \fBTable\fP"
.br
.ti -1c
.RI "struct \fBFKey\fP"
.br
.ti -1c
.RI "struct \fBFKey::sColMap\fP"
.br
.ti -1c
.RI "struct \fBKeyInfo\fP"
.br
.ti -1c
.RI "struct \fBUnpackedRecord\fP"
.br
.ti -1c
.RI "struct \fBIndex\fP"
.br
.ti -1c
.RI "struct \fBIndexSample\fP"
.br
.ti -1c
.RI "struct \fBToken\fP"
.br
.ti -1c
.RI "struct \fBAggInfo\fP"
.br
.ti -1c
.RI "struct \fBAggInfo::AggInfo_col\fP"
.br
.ti -1c
.RI "struct \fBAggInfo::AggInfo_func\fP"
.br
.ti -1c
.RI "struct \fBExpr\fP"
.br
.ti -1c
.RI "struct \fBExprList\fP"
.br
.ti -1c
.RI "struct \fBExprList::ExprList_item\fP"
.br
.ti -1c
.RI "struct \fBExprSpan\fP"
.br
.ti -1c
.RI "struct \fBIdList\fP"
.br
.ti -1c
.RI "struct \fBIdList::IdList_item\fP"
.br
.ti -1c
.RI "struct \fBSrcList\fP"
.br
.ti -1c
.RI "struct \fBSrcList::SrcList_item\fP"
.br
.ti -1c
.RI "struct \fBWherePlan\fP"
.br
.ti -1c
.RI "struct \fBWhereLevel\fP"
.br
.ti -1c
.RI "struct \fBWhereInfo\fP"
.br
.ti -1c
.RI "struct \fBNameContext\fP"
.br
.ti -1c
.RI "struct \fBSelect\fP"
.br
.ti -1c
.RI "struct \fBSelectDest\fP"
.br
.ti -1c
.RI "struct \fBAutoincInfo\fP"
.br
.ti -1c
.RI "struct \fBTriggerPrg\fP"
.br
.ti -1c
.RI "struct \fBParse\fP"
.br
.ti -1c
.RI "struct \fBParse::yColCache\fP"
.br
.ti -1c
.RI "struct \fBAuthContext\fP"
.br
.ti -1c
.RI "struct \fBTrigger\fP"
.br
.ti -1c
.RI "struct \fBTriggerStep\fP"
.br
.ti -1c
.RI "struct \fBDbFixer\fP"
.br
.ti -1c
.RI "struct \fBStrAccum\fP"
.br
.ti -1c
.RI "struct \fBInitData\fP"
.br
.ti -1c
.RI "struct \fBSqlite3Config\fP"
.br
.ti -1c
.RI "struct \fBWalker\fP"
.br
.ti -1c
.RI "struct \fBVdbeCursor\fP"
.br
.ti -1c
.RI "struct \fBVdbeFrame\fP"
.br
.ti -1c
.RI "struct \fBMem\fP"
.br
.ti -1c
.RI "struct \fBVdbeFunc\fP"
.br
.ti -1c
.RI "struct \fBVdbeFunc::AuxData\fP"
.br
.ti -1c
.RI "struct \fBsqlite3_context\fP"
.br
.ti -1c
.RI "struct \fBSet\fP"
.br
.ti -1c
.RI "struct \fBVdbe\fP"
.br
.ti -1c
.RI "struct \fBsqlite3StatType\fP"
.br
.ti -1c
.RI "struct \fBDateTime\fP"
.br
.ti -1c
.RI "struct \fBBenignMallocHooks\fP"
.br
.ti -1c
.RI "struct \fBsqlite3_mutex\fP"
.br
.ti -1c
.RI "struct \fBScratchFreeslot\fP"
.br
.ti -1c
.RI "struct \fBMem0Global\fP"
.br
.ti -1c
.RI "struct \fBet_info\fP"
.br
.ti -1c
.RI "struct \fBsqlite3PrngType\fP"
.br
.ti -1c
.RI "struct \fBUnixUnusedFd\fP"
.br
.ti -1c
.RI "struct \fBunixFile\fP"
.br
.ti -1c
.RI "struct \fBvxworksFileId\fP"
.br
.ti -1c
.RI "struct \fBunixFileId\fP"
.br
.ti -1c
.RI "struct \fBunixInodeInfo\fP"
.br
.ti -1c
.RI "struct \fBunixShmNode\fP"
.br
.ti -1c
.RI "struct \fBunixShm\fP"
.br
.ti -1c
.RI "struct \fBBitvec\fP"
.br
.ti -1c
.RI "struct \fBPCache\fP"
.br
.ti -1c
.RI "struct \fBPCache1\fP"
.br
.ti -1c
.RI "struct \fBPgHdr1\fP"
.br
.ti -1c
.RI "struct \fBPgFreeslot\fP"
.br
.ti -1c
.RI "struct \fBPCacheGlobal\fP"
.br
.ti -1c
.RI "struct \fBRowSetEntry\fP"
.br
.ti -1c
.RI "struct \fBRowSetChunk\fP"
.br
.ti -1c
.RI "struct \fBRowSet\fP"
.br
.ti -1c
.RI "struct \fBPagerSavepoint\fP"
.br
.ti -1c
.RI "struct \fBPager\fP"
.br
.ti -1c
.RI "struct \fBWalIndexHdr\fP"
.br
.ti -1c
.RI "struct \fBWalCkptInfo\fP"
.br
.ti -1c
.RI "struct \fBWal\fP"
.br
.ti -1c
.RI "struct \fBWalIterator\fP"
.br
.ti -1c
.RI "struct \fBWalIterator::WalSegment\fP"
.br
.ti -1c
.RI "struct \fBMemPage\fP"
.br
.ti -1c
.RI "struct \fBMemPage::_OvflCell\fP"
.br
.ti -1c
.RI "struct \fBBtLock\fP"
.br
.ti -1c
.RI "struct \fBBtree\fP"
.br
.ti -1c
.RI "struct \fBBtShared\fP"
.br
.ti -1c
.RI "struct \fBCellInfo\fP"
.br
.ti -1c
.RI "struct \fBBtCursor\fP"
.br
.ti -1c
.RI "struct \fBIntegrityCk\fP"
.br
.ti -1c
.RI "struct \fBsqlite3_backup\fP"
.br
.ti -1c
.RI "struct \fBIncrblob\fP"
.br
.ti -1c
.RI "struct \fBFileChunk\fP"
.br
.ti -1c
.RI "struct \fBFilePoint\fP"
.br
.ti -1c
.RI "struct \fBMemJournal\fP"
.br
.ti -1c
.RI "struct \fBanalysisInfo\fP"
.br
.ti -1c
.RI "struct \fBTableLock\fP"
.br
.ti -1c
.RI "struct \fBcompareInfo\fP"
.br
.ti -1c
.RI "struct \fBSumCtx\fP"
.br
.ti -1c
.RI "struct \fBCountCtx\fP"
.br
.ti -1c
.RI "struct \fBsqlite3_api_routines\fP"
.br
.ti -1c
.RI "struct \fBsqlite3AutoExtList\fP"
.br
.ti -1c
.RI "struct \fBTabResult\fP"
.br
.ti -1c
.RI "struct \fBWhereTerm\fP"
.br
.ti -1c
.RI "struct \fBWhereClause\fP"
.br
.ti -1c
.RI "struct \fBWhereOrInfo\fP"
.br
.ti -1c
.RI "struct \fBWhereAndInfo\fP"
.br
.ti -1c
.RI "struct \fBWhereMaskSet\fP"
.br
.ti -1c
.RI "struct \fBWhereCost\fP"
.br
.ti -1c
.RI "struct \fBLimitVal\fP"
.br
.ti -1c
.RI "struct \fBLikeOp\fP"
.br
.ti -1c
.RI "struct \fBTrigEvent\fP"
.br
.ti -1c
.RI "struct \fBAttachKey\fP"
.br
.ti -1c
.RI "union \fBYYMINORTYPE\fP"
.br
.ti -1c
.RI "struct \fByyStackEntry\fP"
.br
.ti -1c
.RI "struct \fByyParser\fP"
.br
.in -1c
.SS "Defines"

.in +1c
.ti -1c
.RI "#define \fBSQLITE_CORE\fP   1"
.br
.ti -1c
.RI "#define \fBSQLITE_AMALGAMATION\fP   1"
.br
.ti -1c
.RI "#define \fBSQLITE_PRIVATE\fP   static"
.br
.ti -1c
.RI "#define \fB_LARGE_FILE\fP   1"
.br
.ti -1c
.RI "#define \fB_FILE_OFFSET_BITS\fP   64"
.br
.ti -1c
.RI "#define \fB_LARGEFILE_SOURCE\fP   1"
.br
.ti -1c
.RI "#define \fBSQLITE_MAX_LENGTH\fP   1000000000"
.br
.ti -1c
.RI "#define \fBSQLITE_MAX_COLUMN\fP   2000"
.br
.ti -1c
.RI "#define \fBSQLITE_MAX_SQL_LENGTH\fP   1000000000"
.br
.ti -1c
.RI "#define \fBSQLITE_MAX_EXPR_DEPTH\fP   1000"
.br
.ti -1c
.RI "#define \fBSQLITE_MAX_COMPOUND_SELECT\fP   500"
.br
.ti -1c
.RI "#define \fBSQLITE_MAX_VDBE_OP\fP   25000"
.br
.ti -1c
.RI "#define \fBSQLITE_MAX_FUNCTION_ARG\fP   127"
.br
.ti -1c
.RI "#define \fBSQLITE_DEFAULT_CACHE_SIZE\fP   2000"
.br
.ti -1c
.RI "#define \fBSQLITE_DEFAULT_TEMP_CACHE_SIZE\fP   500"
.br
.ti -1c
.RI "#define \fBSQLITE_DEFAULT_WAL_AUTOCHECKPOINT\fP   1000"
.br
.ti -1c
.RI "#define \fBSQLITE_MAX_ATTACHED\fP   10"
.br
.ti -1c
.RI "#define \fBSQLITE_MAX_VARIABLE_NUMBER\fP   999"
.br
.ti -1c
.RI "#define \fBSQLITE_MAX_PAGE_SIZE\fP   65536"
.br
.ti -1c
.RI "#define \fBSQLITE_DEFAULT_PAGE_SIZE\fP   1024"
.br
.ti -1c
.RI "#define \fBSQLITE_MAX_DEFAULT_PAGE_SIZE\fP   8192"
.br
.ti -1c
.RI "#define \fBSQLITE_MAX_PAGE_COUNT\fP   1073741823"
.br
.ti -1c
.RI "#define \fBSQLITE_MAX_LIKE_PATTERN_LENGTH\fP   50000"
.br
.ti -1c
.RI "#define \fBSQLITE_MAX_TRIGGER_DEPTH\fP   1000"
.br
.ti -1c
.RI "#define \fBSQLITE_INDEX_SAMPLES\fP   10"
.br
.ti -1c
.RI "#define \fBSQLITE_INT_TO_PTR\fP(X)   ((void*)&((char*)0)[X])"
.br
.ti -1c
.RI "#define \fBSQLITE_PTR_TO_INT\fP(X)   ((int)(((char*)X)-(char*)0))"
.br
.ti -1c
.RI "#define \fBSQLITE_THREADSAFE\fP   1"
.br
.ti -1c
.RI "#define \fBSQLITE_DEFAULT_MEMSTATUS\fP   1"
.br
.ti -1c
.RI "#define \fBSQLITE_SYSTEM_MALLOC\fP   1"
.br
.ti -1c
.RI "#define \fBSQLITE_MALLOC_SOFT_LIMIT\fP   1024"
.br
.ti -1c
.RI "#define \fB_XOPEN_SOURCE\fP   500"
.br
.ti -1c
.RI "#define \fBNDEBUG\fP   1"
.br
.ti -1c
.RI "#define \fBtestcase\fP(X)"
.br
.ti -1c
.RI "#define \fBTESTONLY\fP(X)"
.br
.ti -1c
.RI "#define \fBVVA_ONLY\fP(X)"
.br
.ti -1c
.RI "#define \fBALWAYS\fP(X)   (X)"
.br
.ti -1c
.RI "#define \fBNEVER\fP(X)   (X)"
.br
.ti -1c
.RI "#define \fBIS_BIG_INT\fP(X)   (((X)&~(\fBi64\fP)0xffffffff)!=0)"
.br
.ti -1c
.RI "#define \fBlikely\fP(X)   !!(X)"
.br
.ti -1c
.RI "#define \fBunlikely\fP(X)   !!(X)"
.br
.ti -1c
.RI "#define \fBSQLITE_EXTERN\fP   extern"
.br
.ti -1c
.RI "#define \fBSQLITE_DEPRECATED\fP"
.br
.ti -1c
.RI "#define \fBSQLITE_EXPERIMENTAL\fP"
.br
.ti -1c
.RI "#define \fBSQLITE_VERSION\fP   '3.7.3'"
.br
.ti -1c
.RI "#define \fBSQLITE_VERSION_NUMBER\fP   3007003"
.br
.ti -1c
.RI "#define \fBSQLITE_SOURCE_ID\fP   '2010-10-08 02:34:02 2677848087c9c090efb17c1893e77d6136a9111d'"
.br
.ti -1c
.RI "#define \fBSQLITE_OK\fP   0"
.br
.ti -1c
.RI "#define \fBSQLITE_ERROR\fP   1"
.br
.ti -1c
.RI "#define \fBSQLITE_INTERNAL\fP   2"
.br
.ti -1c
.RI "#define \fBSQLITE_PERM\fP   3"
.br
.ti -1c
.RI "#define \fBSQLITE_ABORT\fP   4"
.br
.ti -1c
.RI "#define \fBSQLITE_BUSY\fP   5"
.br
.ti -1c
.RI "#define \fBSQLITE_LOCKED\fP   6"
.br
.ti -1c
.RI "#define \fBSQLITE_NOMEM\fP   7"
.br
.ti -1c
.RI "#define \fBSQLITE_READONLY\fP   8"
.br
.ti -1c
.RI "#define \fBSQLITE_INTERRUPT\fP   9"
.br
.ti -1c
.RI "#define \fBSQLITE_IOERR\fP   10"
.br
.ti -1c
.RI "#define \fBSQLITE_CORRUPT\fP   11"
.br
.ti -1c
.RI "#define \fBSQLITE_NOTFOUND\fP   12"
.br
.ti -1c
.RI "#define \fBSQLITE_FULL\fP   13"
.br
.ti -1c
.RI "#define \fBSQLITE_CANTOPEN\fP   14"
.br
.ti -1c
.RI "#define \fBSQLITE_PROTOCOL\fP   15"
.br
.ti -1c
.RI "#define \fBSQLITE_EMPTY\fP   16"
.br
.ti -1c
.RI "#define \fBSQLITE_SCHEMA\fP   17"
.br
.ti -1c
.RI "#define \fBSQLITE_TOOBIG\fP   18"
.br
.ti -1c
.RI "#define \fBSQLITE_CONSTRAINT\fP   19"
.br
.ti -1c
.RI "#define \fBSQLITE_MISMATCH\fP   20"
.br
.ti -1c
.RI "#define \fBSQLITE_MISUSE\fP   21"
.br
.ti -1c
.RI "#define \fBSQLITE_NOLFS\fP   22"
.br
.ti -1c
.RI "#define \fBSQLITE_AUTH\fP   23"
.br
.ti -1c
.RI "#define \fBSQLITE_FORMAT\fP   24"
.br
.ti -1c
.RI "#define \fBSQLITE_RANGE\fP   25"
.br
.ti -1c
.RI "#define \fBSQLITE_NOTADB\fP   26"
.br
.ti -1c
.RI "#define \fBSQLITE_ROW\fP   100"
.br
.ti -1c
.RI "#define \fBSQLITE_DONE\fP   101"
.br
.ti -1c
.RI "#define \fBSQLITE_IOERR_READ\fP   (SQLITE_IOERR | (1<<8))"
.br
.ti -1c
.RI "#define \fBSQLITE_IOERR_SHORT_READ\fP   (SQLITE_IOERR | (2<<8))"
.br
.ti -1c
.RI "#define \fBSQLITE_IOERR_WRITE\fP   (SQLITE_IOERR | (3<<8))"
.br
.ti -1c
.RI "#define \fBSQLITE_IOERR_FSYNC\fP   (SQLITE_IOERR | (4<<8))"
.br
.ti -1c
.RI "#define \fBSQLITE_IOERR_DIR_FSYNC\fP   (SQLITE_IOERR | (5<<8))"
.br
.ti -1c
.RI "#define \fBSQLITE_IOERR_TRUNCATE\fP   (SQLITE_IOERR | (6<<8))"
.br
.ti -1c
.RI "#define \fBSQLITE_IOERR_FSTAT\fP   (SQLITE_IOERR | (7<<8))"
.br
.ti -1c
.RI "#define \fBSQLITE_IOERR_UNLOCK\fP   (SQLITE_IOERR | (8<<8))"
.br
.ti -1c
.RI "#define \fBSQLITE_IOERR_RDLOCK\fP   (SQLITE_IOERR | (9<<8))"
.br
.ti -1c
.RI "#define \fBSQLITE_IOERR_DELETE\fP   (SQLITE_IOERR | (10<<8))"
.br
.ti -1c
.RI "#define \fBSQLITE_IOERR_BLOCKED\fP   (SQLITE_IOERR | (11<<8))"
.br
.ti -1c
.RI "#define \fBSQLITE_IOERR_NOMEM\fP   (SQLITE_IOERR | (12<<8))"
.br
.ti -1c
.RI "#define \fBSQLITE_IOERR_ACCESS\fP   (SQLITE_IOERR | (13<<8))"
.br
.ti -1c
.RI "#define \fBSQLITE_IOERR_CHECKRESERVEDLOCK\fP   (SQLITE_IOERR | (14<<8))"
.br
.ti -1c
.RI "#define \fBSQLITE_IOERR_LOCK\fP   (SQLITE_IOERR | (15<<8))"
.br
.ti -1c
.RI "#define \fBSQLITE_IOERR_CLOSE\fP   (SQLITE_IOERR | (16<<8))"
.br
.ti -1c
.RI "#define \fBSQLITE_IOERR_DIR_CLOSE\fP   (SQLITE_IOERR | (17<<8))"
.br
.ti -1c
.RI "#define \fBSQLITE_IOERR_SHMOPEN\fP   (SQLITE_IOERR | (18<<8))"
.br
.ti -1c
.RI "#define \fBSQLITE_IOERR_SHMSIZE\fP   (SQLITE_IOERR | (19<<8))"
.br
.ti -1c
.RI "#define \fBSQLITE_IOERR_SHMLOCK\fP   (SQLITE_IOERR | (20<<8))"
.br
.ti -1c
.RI "#define \fBSQLITE_LOCKED_SHAREDCACHE\fP   (SQLITE_LOCKED |  (1<<8))"
.br
.ti -1c
.RI "#define \fBSQLITE_BUSY_RECOVERY\fP   (SQLITE_BUSY   |  (1<<8))"
.br
.ti -1c
.RI "#define \fBSQLITE_CANTOPEN_NOTEMPDIR\fP   (SQLITE_CANTOPEN | (1<<8))"
.br
.ti -1c
.RI "#define \fBSQLITE_OPEN_READONLY\fP   0x00000001"
.br
.ti -1c
.RI "#define \fBSQLITE_OPEN_READWRITE\fP   0x00000002"
.br
.ti -1c
.RI "#define \fBSQLITE_OPEN_CREATE\fP   0x00000004"
.br
.ti -1c
.RI "#define \fBSQLITE_OPEN_DELETEONCLOSE\fP   0x00000008"
.br
.ti -1c
.RI "#define \fBSQLITE_OPEN_EXCLUSIVE\fP   0x00000010"
.br
.ti -1c
.RI "#define \fBSQLITE_OPEN_AUTOPROXY\fP   0x00000020"
.br
.ti -1c
.RI "#define \fBSQLITE_OPEN_MAIN_DB\fP   0x00000100"
.br
.ti -1c
.RI "#define \fBSQLITE_OPEN_TEMP_DB\fP   0x00000200"
.br
.ti -1c
.RI "#define \fBSQLITE_OPEN_TRANSIENT_DB\fP   0x00000400"
.br
.ti -1c
.RI "#define \fBSQLITE_OPEN_MAIN_JOURNAL\fP   0x00000800"
.br
.ti -1c
.RI "#define \fBSQLITE_OPEN_TEMP_JOURNAL\fP   0x00001000"
.br
.ti -1c
.RI "#define \fBSQLITE_OPEN_SUBJOURNAL\fP   0x00002000"
.br
.ti -1c
.RI "#define \fBSQLITE_OPEN_MASTER_JOURNAL\fP   0x00004000"
.br
.ti -1c
.RI "#define \fBSQLITE_OPEN_NOMUTEX\fP   0x00008000"
.br
.ti -1c
.RI "#define \fBSQLITE_OPEN_FULLMUTEX\fP   0x00010000"
.br
.ti -1c
.RI "#define \fBSQLITE_OPEN_SHAREDCACHE\fP   0x00020000"
.br
.ti -1c
.RI "#define \fBSQLITE_OPEN_PRIVATECACHE\fP   0x00040000"
.br
.ti -1c
.RI "#define \fBSQLITE_OPEN_WAL\fP   0x00080000"
.br
.ti -1c
.RI "#define \fBSQLITE_IOCAP_ATOMIC\fP   0x00000001"
.br
.ti -1c
.RI "#define \fBSQLITE_IOCAP_ATOMIC512\fP   0x00000002"
.br
.ti -1c
.RI "#define \fBSQLITE_IOCAP_ATOMIC1K\fP   0x00000004"
.br
.ti -1c
.RI "#define \fBSQLITE_IOCAP_ATOMIC2K\fP   0x00000008"
.br
.ti -1c
.RI "#define \fBSQLITE_IOCAP_ATOMIC4K\fP   0x00000010"
.br
.ti -1c
.RI "#define \fBSQLITE_IOCAP_ATOMIC8K\fP   0x00000020"
.br
.ti -1c
.RI "#define \fBSQLITE_IOCAP_ATOMIC16K\fP   0x00000040"
.br
.ti -1c
.RI "#define \fBSQLITE_IOCAP_ATOMIC32K\fP   0x00000080"
.br
.ti -1c
.RI "#define \fBSQLITE_IOCAP_ATOMIC64K\fP   0x00000100"
.br
.ti -1c
.RI "#define \fBSQLITE_IOCAP_SAFE_APPEND\fP   0x00000200"
.br
.ti -1c
.RI "#define \fBSQLITE_IOCAP_SEQUENTIAL\fP   0x00000400"
.br
.ti -1c
.RI "#define \fBSQLITE_IOCAP_UNDELETABLE_WHEN_OPEN\fP   0x00000800"
.br
.ti -1c
.RI "#define \fBSQLITE_LOCK_NONE\fP   0"
.br
.ti -1c
.RI "#define \fBSQLITE_LOCK_SHARED\fP   1"
.br
.ti -1c
.RI "#define \fBSQLITE_LOCK_RESERVED\fP   2"
.br
.ti -1c
.RI "#define \fBSQLITE_LOCK_PENDING\fP   3"
.br
.ti -1c
.RI "#define \fBSQLITE_LOCK_EXCLUSIVE\fP   4"
.br
.ti -1c
.RI "#define \fBSQLITE_SYNC_NORMAL\fP   0x00002"
.br
.ti -1c
.RI "#define \fBSQLITE_SYNC_FULL\fP   0x00003"
.br
.ti -1c
.RI "#define \fBSQLITE_SYNC_DATAONLY\fP   0x00010"
.br
.ti -1c
.RI "#define \fBSQLITE_FCNTL_LOCKSTATE\fP   1"
.br
.ti -1c
.RI "#define \fBSQLITE_GET_LOCKPROXYFILE\fP   2"
.br
.ti -1c
.RI "#define \fBSQLITE_SET_LOCKPROXYFILE\fP   3"
.br
.ti -1c
.RI "#define \fBSQLITE_LAST_ERRNO\fP   4"
.br
.ti -1c
.RI "#define \fBSQLITE_FCNTL_SIZE_HINT\fP   5"
.br
.ti -1c
.RI "#define \fBSQLITE_FCNTL_CHUNK_SIZE\fP   6"
.br
.ti -1c
.RI "#define \fBSQLITE_ACCESS_EXISTS\fP   0"
.br
.ti -1c
.RI "#define \fBSQLITE_ACCESS_READWRITE\fP   1"
.br
.ti -1c
.RI "#define \fBSQLITE_ACCESS_READ\fP   2"
.br
.ti -1c
.RI "#define \fBSQLITE_SHM_UNLOCK\fP   1"
.br
.ti -1c
.RI "#define \fBSQLITE_SHM_LOCK\fP   2"
.br
.ti -1c
.RI "#define \fBSQLITE_SHM_SHARED\fP   4"
.br
.ti -1c
.RI "#define \fBSQLITE_SHM_EXCLUSIVE\fP   8"
.br
.ti -1c
.RI "#define \fBSQLITE_SHM_NLOCK\fP   8"
.br
.ti -1c
.RI "#define \fBSQLITE_CONFIG_SINGLETHREAD\fP   1"
.br
.ti -1c
.RI "#define \fBSQLITE_CONFIG_MULTITHREAD\fP   2"
.br
.ti -1c
.RI "#define \fBSQLITE_CONFIG_SERIALIZED\fP   3"
.br
.ti -1c
.RI "#define \fBSQLITE_CONFIG_MALLOC\fP   4"
.br
.ti -1c
.RI "#define \fBSQLITE_CONFIG_GETMALLOC\fP   5"
.br
.ti -1c
.RI "#define \fBSQLITE_CONFIG_SCRATCH\fP   6"
.br
.ti -1c
.RI "#define \fBSQLITE_CONFIG_PAGECACHE\fP   7"
.br
.ti -1c
.RI "#define \fBSQLITE_CONFIG_HEAP\fP   8"
.br
.ti -1c
.RI "#define \fBSQLITE_CONFIG_MEMSTATUS\fP   9"
.br
.ti -1c
.RI "#define \fBSQLITE_CONFIG_MUTEX\fP   10"
.br
.ti -1c
.RI "#define \fBSQLITE_CONFIG_GETMUTEX\fP   11"
.br
.ti -1c
.RI "#define \fBSQLITE_CONFIG_LOOKASIDE\fP   13"
.br
.ti -1c
.RI "#define \fBSQLITE_CONFIG_PCACHE\fP   14"
.br
.ti -1c
.RI "#define \fBSQLITE_CONFIG_GETPCACHE\fP   15"
.br
.ti -1c
.RI "#define \fBSQLITE_CONFIG_LOG\fP   16"
.br
.ti -1c
.RI "#define \fBSQLITE_DBCONFIG_LOOKASIDE\fP   1001"
.br
.ti -1c
.RI "#define \fBSQLITE_DENY\fP   1"
.br
.ti -1c
.RI "#define \fBSQLITE_IGNORE\fP   2"
.br
.ti -1c
.RI "#define \fBSQLITE_CREATE_INDEX\fP   1"
.br
.ti -1c
.RI "#define \fBSQLITE_CREATE_TABLE\fP   2"
.br
.ti -1c
.RI "#define \fBSQLITE_CREATE_TEMP_INDEX\fP   3"
.br
.ti -1c
.RI "#define \fBSQLITE_CREATE_TEMP_TABLE\fP   4"
.br
.ti -1c
.RI "#define \fBSQLITE_CREATE_TEMP_TRIGGER\fP   5"
.br
.ti -1c
.RI "#define \fBSQLITE_CREATE_TEMP_VIEW\fP   6"
.br
.ti -1c
.RI "#define \fBSQLITE_CREATE_TRIGGER\fP   7"
.br
.ti -1c
.RI "#define \fBSQLITE_CREATE_VIEW\fP   8"
.br
.ti -1c
.RI "#define \fBSQLITE_DELETE\fP   9"
.br
.ti -1c
.RI "#define \fBSQLITE_DROP_INDEX\fP   10"
.br
.ti -1c
.RI "#define \fBSQLITE_DROP_TABLE\fP   11"
.br
.ti -1c
.RI "#define \fBSQLITE_DROP_TEMP_INDEX\fP   12"
.br
.ti -1c
.RI "#define \fBSQLITE_DROP_TEMP_TABLE\fP   13"
.br
.ti -1c
.RI "#define \fBSQLITE_DROP_TEMP_TRIGGER\fP   14"
.br
.ti -1c
.RI "#define \fBSQLITE_DROP_TEMP_VIEW\fP   15"
.br
.ti -1c
.RI "#define \fBSQLITE_DROP_TRIGGER\fP   16"
.br
.ti -1c
.RI "#define \fBSQLITE_DROP_VIEW\fP   17"
.br
.ti -1c
.RI "#define \fBSQLITE_INSERT\fP   18"
.br
.ti -1c
.RI "#define \fBSQLITE_PRAGMA\fP   19"
.br
.ti -1c
.RI "#define \fBSQLITE_READ\fP   20"
.br
.ti -1c
.RI "#define \fBSQLITE_SELECT\fP   21"
.br
.ti -1c
.RI "#define \fBSQLITE_TRANSACTION\fP   22"
.br
.ti -1c
.RI "#define \fBSQLITE_UPDATE\fP   23"
.br
.ti -1c
.RI "#define \fBSQLITE_ATTACH\fP   24"
.br
.ti -1c
.RI "#define \fBSQLITE_DETACH\fP   25"
.br
.ti -1c
.RI "#define \fBSQLITE_ALTER_TABLE\fP   26"
.br
.ti -1c
.RI "#define \fBSQLITE_REINDEX\fP   27"
.br
.ti -1c
.RI "#define \fBSQLITE_ANALYZE\fP   28"
.br
.ti -1c
.RI "#define \fBSQLITE_CREATE_VTABLE\fP   29"
.br
.ti -1c
.RI "#define \fBSQLITE_DROP_VTABLE\fP   30"
.br
.ti -1c
.RI "#define \fBSQLITE_FUNCTION\fP   31"
.br
.ti -1c
.RI "#define \fBSQLITE_SAVEPOINT\fP   32"
.br
.ti -1c
.RI "#define \fBSQLITE_COPY\fP   0"
.br
.ti -1c
.RI "#define \fBSQLITE_LIMIT_LENGTH\fP   0"
.br
.ti -1c
.RI "#define \fBSQLITE_LIMIT_SQL_LENGTH\fP   1"
.br
.ti -1c
.RI "#define \fBSQLITE_LIMIT_COLUMN\fP   2"
.br
.ti -1c
.RI "#define \fBSQLITE_LIMIT_EXPR_DEPTH\fP   3"
.br
.ti -1c
.RI "#define \fBSQLITE_LIMIT_COMPOUND_SELECT\fP   4"
.br
.ti -1c
.RI "#define \fBSQLITE_LIMIT_VDBE_OP\fP   5"
.br
.ti -1c
.RI "#define \fBSQLITE_LIMIT_FUNCTION_ARG\fP   6"
.br
.ti -1c
.RI "#define \fBSQLITE_LIMIT_ATTACHED\fP   7"
.br
.ti -1c
.RI "#define \fBSQLITE_LIMIT_LIKE_PATTERN_LENGTH\fP   8"
.br
.ti -1c
.RI "#define \fBSQLITE_LIMIT_VARIABLE_NUMBER\fP   9"
.br
.ti -1c
.RI "#define \fBSQLITE_LIMIT_TRIGGER_DEPTH\fP   10"
.br
.ti -1c
.RI "#define \fBSQLITE_INTEGER\fP   1"
.br
.ti -1c
.RI "#define \fBSQLITE_FLOAT\fP   2"
.br
.ti -1c
.RI "#define \fBSQLITE_BLOB\fP   4"
.br
.ti -1c
.RI "#define \fBSQLITE_NULL\fP   5"
.br
.ti -1c
.RI "#define \fBSQLITE_TEXT\fP   3"
.br
.ti -1c
.RI "#define \fBSQLITE3_TEXT\fP   3"
.br
.ti -1c
.RI "#define \fBSQLITE_UTF8\fP   1"
.br
.ti -1c
.RI "#define \fBSQLITE_UTF16LE\fP   2"
.br
.ti -1c
.RI "#define \fBSQLITE_UTF16BE\fP   3"
.br
.ti -1c
.RI "#define \fBSQLITE_UTF16\fP   4"
.br
.ti -1c
.RI "#define \fBSQLITE_ANY\fP   5"
.br
.ti -1c
.RI "#define \fBSQLITE_UTF16_ALIGNED\fP   8"
.br
.ti -1c
.RI "#define \fBSQLITE_STATIC\fP   ((\fBsqlite3_destructor_type\fP)0)"
.br
.ti -1c
.RI "#define \fBSQLITE_TRANSIENT\fP   ((\fBsqlite3_destructor_type\fP)-1)"
.br
.ti -1c
.RI "#define \fBSQLITE_INDEX_CONSTRAINT_EQ\fP   2"
.br
.ti -1c
.RI "#define \fBSQLITE_INDEX_CONSTRAINT_GT\fP   4"
.br
.ti -1c
.RI "#define \fBSQLITE_INDEX_CONSTRAINT_LE\fP   8"
.br
.ti -1c
.RI "#define \fBSQLITE_INDEX_CONSTRAINT_LT\fP   16"
.br
.ti -1c
.RI "#define \fBSQLITE_INDEX_CONSTRAINT_GE\fP   32"
.br
.ti -1c
.RI "#define \fBSQLITE_INDEX_CONSTRAINT_MATCH\fP   64"
.br
.ti -1c
.RI "#define \fBSQLITE_MUTEX_FAST\fP   0"
.br
.ti -1c
.RI "#define \fBSQLITE_MUTEX_RECURSIVE\fP   1"
.br
.ti -1c
.RI "#define \fBSQLITE_MUTEX_STATIC_MASTER\fP   2"
.br
.ti -1c
.RI "#define \fBSQLITE_MUTEX_STATIC_MEM\fP   3"
.br
.ti -1c
.RI "#define \fBSQLITE_MUTEX_STATIC_MEM2\fP   4"
.br
.ti -1c
.RI "#define \fBSQLITE_MUTEX_STATIC_OPEN\fP   4"
.br
.ti -1c
.RI "#define \fBSQLITE_MUTEX_STATIC_PRNG\fP   5"
.br
.ti -1c
.RI "#define \fBSQLITE_MUTEX_STATIC_LRU\fP   6"
.br
.ti -1c
.RI "#define \fBSQLITE_MUTEX_STATIC_LRU2\fP   7"
.br
.ti -1c
.RI "#define \fBSQLITE_TESTCTRL_FIRST\fP   5"
.br
.ti -1c
.RI "#define \fBSQLITE_TESTCTRL_PRNG_SAVE\fP   5"
.br
.ti -1c
.RI "#define \fBSQLITE_TESTCTRL_PRNG_RESTORE\fP   6"
.br
.ti -1c
.RI "#define \fBSQLITE_TESTCTRL_PRNG_RESET\fP   7"
.br
.ti -1c
.RI "#define \fBSQLITE_TESTCTRL_BITVEC_TEST\fP   8"
.br
.ti -1c
.RI "#define \fBSQLITE_TESTCTRL_FAULT_INSTALL\fP   9"
.br
.ti -1c
.RI "#define \fBSQLITE_TESTCTRL_BENIGN_MALLOC_HOOKS\fP   10"
.br
.ti -1c
.RI "#define \fBSQLITE_TESTCTRL_PENDING_BYTE\fP   11"
.br
.ti -1c
.RI "#define \fBSQLITE_TESTCTRL_ASSERT\fP   12"
.br
.ti -1c
.RI "#define \fBSQLITE_TESTCTRL_ALWAYS\fP   13"
.br
.ti -1c
.RI "#define \fBSQLITE_TESTCTRL_RESERVE\fP   14"
.br
.ti -1c
.RI "#define \fBSQLITE_TESTCTRL_OPTIMIZATIONS\fP   15"
.br
.ti -1c
.RI "#define \fBSQLITE_TESTCTRL_ISKEYWORD\fP   16"
.br
.ti -1c
.RI "#define \fBSQLITE_TESTCTRL_PGHDRSZ\fP   17"
.br
.ti -1c
.RI "#define \fBSQLITE_TESTCTRL_SCRATCHMALLOC\fP   18"
.br
.ti -1c
.RI "#define \fBSQLITE_TESTCTRL_LAST\fP   18"
.br
.ti -1c
.RI "#define \fBSQLITE_STATUS_MEMORY_USED\fP   0"
.br
.ti -1c
.RI "#define \fBSQLITE_STATUS_PAGECACHE_USED\fP   1"
.br
.ti -1c
.RI "#define \fBSQLITE_STATUS_PAGECACHE_OVERFLOW\fP   2"
.br
.ti -1c
.RI "#define \fBSQLITE_STATUS_SCRATCH_USED\fP   3"
.br
.ti -1c
.RI "#define \fBSQLITE_STATUS_SCRATCH_OVERFLOW\fP   4"
.br
.ti -1c
.RI "#define \fBSQLITE_STATUS_MALLOC_SIZE\fP   5"
.br
.ti -1c
.RI "#define \fBSQLITE_STATUS_PARSER_STACK\fP   6"
.br
.ti -1c
.RI "#define \fBSQLITE_STATUS_PAGECACHE_SIZE\fP   7"
.br
.ti -1c
.RI "#define \fBSQLITE_STATUS_SCRATCH_SIZE\fP   8"
.br
.ti -1c
.RI "#define \fBSQLITE_STATUS_MALLOC_COUNT\fP   9"
.br
.ti -1c
.RI "#define \fBSQLITE_DBSTATUS_LOOKASIDE_USED\fP   0"
.br
.ti -1c
.RI "#define \fBSQLITE_DBSTATUS_CACHE_USED\fP   1"
.br
.ti -1c
.RI "#define \fBSQLITE_DBSTATUS_SCHEMA_USED\fP   2"
.br
.ti -1c
.RI "#define \fBSQLITE_DBSTATUS_STMT_USED\fP   3"
.br
.ti -1c
.RI "#define \fBSQLITE_DBSTATUS_MAX\fP   3"
.br
.ti -1c
.RI "#define \fBSQLITE_STMTSTATUS_FULLSCAN_STEP\fP   1"
.br
.ti -1c
.RI "#define \fBSQLITE_STMTSTATUS_SORT\fP   2"
.br
.ti -1c
.RI "#define \fBSQLITE_STMTSTATUS_AUTOINDEX\fP   3"
.br
.ti -1c
.RI "#define \fBsqliteHashFirst\fP(H)   ((H)->first)"
.br
.ti -1c
.RI "#define \fBsqliteHashNext\fP(E)   ((E)->next)"
.br
.ti -1c
.RI "#define \fBsqliteHashData\fP(E)   ((E)->data)"
.br
.ti -1c
.RI "#define \fBTK_SEMI\fP   1"
.br
.ti -1c
.RI "#define \fBTK_EXPLAIN\fP   2"
.br
.ti -1c
.RI "#define \fBTK_QUERY\fP   3"
.br
.ti -1c
.RI "#define \fBTK_PLAN\fP   4"
.br
.ti -1c
.RI "#define \fBTK_BEGIN\fP   5"
.br
.ti -1c
.RI "#define \fBTK_TRANSACTION\fP   6"
.br
.ti -1c
.RI "#define \fBTK_DEFERRED\fP   7"
.br
.ti -1c
.RI "#define \fBTK_IMMEDIATE\fP   8"
.br
.ti -1c
.RI "#define \fBTK_EXCLUSIVE\fP   9"
.br
.ti -1c
.RI "#define \fBTK_COMMIT\fP   10"
.br
.ti -1c
.RI "#define \fBTK_END\fP   11"
.br
.ti -1c
.RI "#define \fBTK_ROLLBACK\fP   12"
.br
.ti -1c
.RI "#define \fBTK_SAVEPOINT\fP   13"
.br
.ti -1c
.RI "#define \fBTK_RELEASE\fP   14"
.br
.ti -1c
.RI "#define \fBTK_TO\fP   15"
.br
.ti -1c
.RI "#define \fBTK_TABLE\fP   16"
.br
.ti -1c
.RI "#define \fBTK_CREATE\fP   17"
.br
.ti -1c
.RI "#define \fBTK_IF\fP   18"
.br
.ti -1c
.RI "#define \fBTK_NOT\fP   19"
.br
.ti -1c
.RI "#define \fBTK_EXISTS\fP   20"
.br
.ti -1c
.RI "#define \fBTK_TEMP\fP   21"
.br
.ti -1c
.RI "#define \fBTK_LP\fP   22"
.br
.ti -1c
.RI "#define \fBTK_RP\fP   23"
.br
.ti -1c
.RI "#define \fBTK_AS\fP   24"
.br
.ti -1c
.RI "#define \fBTK_COMMA\fP   25"
.br
.ti -1c
.RI "#define \fBTK_ID\fP   26"
.br
.ti -1c
.RI "#define \fBTK_INDEXED\fP   27"
.br
.ti -1c
.RI "#define \fBTK_ABORT\fP   28"
.br
.ti -1c
.RI "#define \fBTK_ACTION\fP   29"
.br
.ti -1c
.RI "#define \fBTK_AFTER\fP   30"
.br
.ti -1c
.RI "#define \fBTK_ANALYZE\fP   31"
.br
.ti -1c
.RI "#define \fBTK_ASC\fP   32"
.br
.ti -1c
.RI "#define \fBTK_ATTACH\fP   33"
.br
.ti -1c
.RI "#define \fBTK_BEFORE\fP   34"
.br
.ti -1c
.RI "#define \fBTK_BY\fP   35"
.br
.ti -1c
.RI "#define \fBTK_CASCADE\fP   36"
.br
.ti -1c
.RI "#define \fBTK_CAST\fP   37"
.br
.ti -1c
.RI "#define \fBTK_COLUMNKW\fP   38"
.br
.ti -1c
.RI "#define \fBTK_CONFLICT\fP   39"
.br
.ti -1c
.RI "#define \fBTK_DATABASE\fP   40"
.br
.ti -1c
.RI "#define \fBTK_DESC\fP   41"
.br
.ti -1c
.RI "#define \fBTK_DETACH\fP   42"
.br
.ti -1c
.RI "#define \fBTK_EACH\fP   43"
.br
.ti -1c
.RI "#define \fBTK_FAIL\fP   44"
.br
.ti -1c
.RI "#define \fBTK_FOR\fP   45"
.br
.ti -1c
.RI "#define \fBTK_IGNORE\fP   46"
.br
.ti -1c
.RI "#define \fBTK_INITIALLY\fP   47"
.br
.ti -1c
.RI "#define \fBTK_INSTEAD\fP   48"
.br
.ti -1c
.RI "#define \fBTK_LIKE_KW\fP   49"
.br
.ti -1c
.RI "#define \fBTK_MATCH\fP   50"
.br
.ti -1c
.RI "#define \fBTK_NO\fP   51"
.br
.ti -1c
.RI "#define \fBTK_KEY\fP   52"
.br
.ti -1c
.RI "#define \fBTK_OF\fP   53"
.br
.ti -1c
.RI "#define \fBTK_OFFSET\fP   54"
.br
.ti -1c
.RI "#define \fBTK_PRAGMA\fP   55"
.br
.ti -1c
.RI "#define \fBTK_RAISE\fP   56"
.br
.ti -1c
.RI "#define \fBTK_REPLACE\fP   57"
.br
.ti -1c
.RI "#define \fBTK_RESTRICT\fP   58"
.br
.ti -1c
.RI "#define \fBTK_ROW\fP   59"
.br
.ti -1c
.RI "#define \fBTK_TRIGGER\fP   60"
.br
.ti -1c
.RI "#define \fBTK_VACUUM\fP   61"
.br
.ti -1c
.RI "#define \fBTK_VIEW\fP   62"
.br
.ti -1c
.RI "#define \fBTK_VIRTUAL\fP   63"
.br
.ti -1c
.RI "#define \fBTK_REINDEX\fP   64"
.br
.ti -1c
.RI "#define \fBTK_RENAME\fP   65"
.br
.ti -1c
.RI "#define \fBTK_CTIME_KW\fP   66"
.br
.ti -1c
.RI "#define \fBTK_ANY\fP   67"
.br
.ti -1c
.RI "#define \fBTK_OR\fP   68"
.br
.ti -1c
.RI "#define \fBTK_AND\fP   69"
.br
.ti -1c
.RI "#define \fBTK_IS\fP   70"
.br
.ti -1c
.RI "#define \fBTK_BETWEEN\fP   71"
.br
.ti -1c
.RI "#define \fBTK_IN\fP   72"
.br
.ti -1c
.RI "#define \fBTK_ISNULL\fP   73"
.br
.ti -1c
.RI "#define \fBTK_NOTNULL\fP   74"
.br
.ti -1c
.RI "#define \fBTK_NE\fP   75"
.br
.ti -1c
.RI "#define \fBTK_EQ\fP   76"
.br
.ti -1c
.RI "#define \fBTK_GT\fP   77"
.br
.ti -1c
.RI "#define \fBTK_LE\fP   78"
.br
.ti -1c
.RI "#define \fBTK_LT\fP   79"
.br
.ti -1c
.RI "#define \fBTK_GE\fP   80"
.br
.ti -1c
.RI "#define \fBTK_ESCAPE\fP   81"
.br
.ti -1c
.RI "#define \fBTK_BITAND\fP   82"
.br
.ti -1c
.RI "#define \fBTK_BITOR\fP   83"
.br
.ti -1c
.RI "#define \fBTK_LSHIFT\fP   84"
.br
.ti -1c
.RI "#define \fBTK_RSHIFT\fP   85"
.br
.ti -1c
.RI "#define \fBTK_PLUS\fP   86"
.br
.ti -1c
.RI "#define \fBTK_MINUS\fP   87"
.br
.ti -1c
.RI "#define \fBTK_STAR\fP   88"
.br
.ti -1c
.RI "#define \fBTK_SLASH\fP   89"
.br
.ti -1c
.RI "#define \fBTK_REM\fP   90"
.br
.ti -1c
.RI "#define \fBTK_CONCAT\fP   91"
.br
.ti -1c
.RI "#define \fBTK_COLLATE\fP   92"
.br
.ti -1c
.RI "#define \fBTK_BITNOT\fP   93"
.br
.ti -1c
.RI "#define \fBTK_STRING\fP   94"
.br
.ti -1c
.RI "#define \fBTK_JOIN_KW\fP   95"
.br
.ti -1c
.RI "#define \fBTK_CONSTRAINT\fP   96"
.br
.ti -1c
.RI "#define \fBTK_DEFAULT\fP   97"
.br
.ti -1c
.RI "#define \fBTK_NULL\fP   98"
.br
.ti -1c
.RI "#define \fBTK_PRIMARY\fP   99"
.br
.ti -1c
.RI "#define \fBTK_UNIQUE\fP   100"
.br
.ti -1c
.RI "#define \fBTK_CHECK\fP   101"
.br
.ti -1c
.RI "#define \fBTK_REFERENCES\fP   102"
.br
.ti -1c
.RI "#define \fBTK_AUTOINCR\fP   103"
.br
.ti -1c
.RI "#define \fBTK_ON\fP   104"
.br
.ti -1c
.RI "#define \fBTK_INSERT\fP   105"
.br
.ti -1c
.RI "#define \fBTK_DELETE\fP   106"
.br
.ti -1c
.RI "#define \fBTK_UPDATE\fP   107"
.br
.ti -1c
.RI "#define \fBTK_SET\fP   108"
.br
.ti -1c
.RI "#define \fBTK_DEFERRABLE\fP   109"
.br
.ti -1c
.RI "#define \fBTK_FOREIGN\fP   110"
.br
.ti -1c
.RI "#define \fBTK_DROP\fP   111"
.br
.ti -1c
.RI "#define \fBTK_UNION\fP   112"
.br
.ti -1c
.RI "#define \fBTK_ALL\fP   113"
.br
.ti -1c
.RI "#define \fBTK_EXCEPT\fP   114"
.br
.ti -1c
.RI "#define \fBTK_INTERSECT\fP   115"
.br
.ti -1c
.RI "#define \fBTK_SELECT\fP   116"
.br
.ti -1c
.RI "#define \fBTK_DISTINCT\fP   117"
.br
.ti -1c
.RI "#define \fBTK_DOT\fP   118"
.br
.ti -1c
.RI "#define \fBTK_FROM\fP   119"
.br
.ti -1c
.RI "#define \fBTK_JOIN\fP   120"
.br
.ti -1c
.RI "#define \fBTK_USING\fP   121"
.br
.ti -1c
.RI "#define \fBTK_ORDER\fP   122"
.br
.ti -1c
.RI "#define \fBTK_GROUP\fP   123"
.br
.ti -1c
.RI "#define \fBTK_HAVING\fP   124"
.br
.ti -1c
.RI "#define \fBTK_LIMIT\fP   125"
.br
.ti -1c
.RI "#define \fBTK_WHERE\fP   126"
.br
.ti -1c
.RI "#define \fBTK_INTO\fP   127"
.br
.ti -1c
.RI "#define \fBTK_VALUES\fP   128"
.br
.ti -1c
.RI "#define \fBTK_INTEGER\fP   129"
.br
.ti -1c
.RI "#define \fBTK_FLOAT\fP   130"
.br
.ti -1c
.RI "#define \fBTK_BLOB\fP   131"
.br
.ti -1c
.RI "#define \fBTK_REGISTER\fP   132"
.br
.ti -1c
.RI "#define \fBTK_VARIABLE\fP   133"
.br
.ti -1c
.RI "#define \fBTK_CASE\fP   134"
.br
.ti -1c
.RI "#define \fBTK_WHEN\fP   135"
.br
.ti -1c
.RI "#define \fBTK_THEN\fP   136"
.br
.ti -1c
.RI "#define \fBTK_ELSE\fP   137"
.br
.ti -1c
.RI "#define \fBTK_INDEX\fP   138"
.br
.ti -1c
.RI "#define \fBTK_ALTER\fP   139"
.br
.ti -1c
.RI "#define \fBTK_ADD\fP   140"
.br
.ti -1c
.RI "#define \fBTK_TO_TEXT\fP   141"
.br
.ti -1c
.RI "#define \fBTK_TO_BLOB\fP   142"
.br
.ti -1c
.RI "#define \fBTK_TO_NUMERIC\fP   143"
.br
.ti -1c
.RI "#define \fBTK_TO_INT\fP   144"
.br
.ti -1c
.RI "#define \fBTK_TO_REAL\fP   145"
.br
.ti -1c
.RI "#define \fBTK_ISNOT\fP   146"
.br
.ti -1c
.RI "#define \fBTK_END_OF_FILE\fP   147"
.br
.ti -1c
.RI "#define \fBTK_ILLEGAL\fP   148"
.br
.ti -1c
.RI "#define \fBTK_SPACE\fP   149"
.br
.ti -1c
.RI "#define \fBTK_UNCLOSED_STRING\fP   150"
.br
.ti -1c
.RI "#define \fBTK_FUNCTION\fP   151"
.br
.ti -1c
.RI "#define \fBTK_COLUMN\fP   152"
.br
.ti -1c
.RI "#define \fBTK_AGG_FUNCTION\fP   153"
.br
.ti -1c
.RI "#define \fBTK_AGG_COLUMN\fP   154"
.br
.ti -1c
.RI "#define \fBTK_CONST_FUNC\fP   155"
.br
.ti -1c
.RI "#define \fBTK_UMINUS\fP   156"
.br
.ti -1c
.RI "#define \fBTK_UPLUS\fP   157"
.br
.ti -1c
.RI "#define \fBSQLITE_BIG_DBL\fP   (1e99)"
.br
.ti -1c
.RI "#define \fBOMIT_TEMPDB\fP   0"
.br
.ti -1c
.RI "#define \fBSQLITE_MAX_FILE_FORMAT\fP   4"
.br
.ti -1c
.RI "#define \fBSQLITE_DEFAULT_FILE_FORMAT\fP   1"
.br
.ti -1c
.RI "#define \fBSQLITE_DEFAULT_RECURSIVE_TRIGGERS\fP   0"
.br
.ti -1c
.RI "#define \fBSQLITE_TEMP_STORE\fP   1"
.br
.ti -1c
.RI "#define \fBoffsetof\fP(STRUCTURE, FIELD)   ((int)((char*)&((STRUCTURE*)0)->FIELD))"
.br
.ti -1c
.RI "#define \fBSQLITE_ASCII\fP   1"
.br
.ti -1c
.RI "#define \fBUINT32_TYPE\fP   unsigned int"
.br
.ti -1c
.RI "#define \fBUINT16_TYPE\fP   unsigned short int"
.br
.ti -1c
.RI "#define \fBINT16_TYPE\fP   short int"
.br
.ti -1c
.RI "#define \fBUINT8_TYPE\fP   unsigned char"
.br
.ti -1c
.RI "#define \fBINT8_TYPE\fP   signed char"
.br
.ti -1c
.RI "#define \fBLONGDOUBLE_TYPE\fP   long double"
.br
.ti -1c
.RI "#define \fBSQLITE_MAX_U32\fP   ((((\fBu64\fP)1)<<32)-1)"
.br
.ti -1c
.RI "#define \fBSQLITE_BIGENDIAN\fP   (*(char *)(&\fBsqlite3one\fP)==0)"
.br
.ti -1c
.RI "#define \fBSQLITE_LITTLEENDIAN\fP   (*(char *)(&\fBsqlite3one\fP)==1)"
.br
.ti -1c
.RI "#define \fBSQLITE_UTF16NATIVE\fP   (SQLITE_BIGENDIAN?SQLITE_UTF16BE:SQLITE_UTF16LE)"
.br
.ti -1c
.RI "#define \fBLARGEST_INT64\fP   (0xffffffff|(((i64)0x7fffffff)<<32))"
.br
.ti -1c
.RI "#define \fBSMALLEST_INT64\fP   (((\fBi64\fP)-1) - LARGEST_INT64)"
.br
.ti -1c
.RI "#define \fBROUND8\fP(x)   (((x)+7)&~7)"
.br
.ti -1c
.RI "#define \fBROUNDDOWN8\fP(x)   ((x)&~7)"
.br
.ti -1c
.RI "#define \fBEIGHT_BYTE_ALIGNMENT\fP(X)   ((((char*)(X) - (char*)0)&7)==0)"
.br
.ti -1c
.RI "#define \fBMASTER_NAME\fP   'sqlite_master'"
.br
.ti -1c
.RI "#define \fBTEMP_MASTER_NAME\fP   'sqlite_temp_master'"
.br
.ti -1c
.RI "#define \fBMASTER_ROOT\fP   1"
.br
.ti -1c
.RI "#define \fBSCHEMA_TABLE\fP(x)   ((!OMIT_TEMPDB)&&(x==1)?TEMP_MASTER_NAME:MASTER_NAME)"
.br
.ti -1c
.RI "#define \fBArraySize\fP(X)   ((int)(sizeof(X)/sizeof(X[0])))"
.br
.ti -1c
.RI "#define \fBSQLITE_DYNAMIC\fP   ((\fBsqlite3_destructor_type\fP)sqlite3DbFree)"
.br
.ti -1c
.RI "#define \fBSQLITE_WSD\fP"
.br
.ti -1c
.RI "#define \fBGLOBAL\fP(t, v)   v"
.br
.ti -1c
.RI "#define \fBsqlite3GlobalConfig\fP   \fBsqlite3Config\fP"
.br
.ti -1c
.RI "#define \fBUNUSED_PARAMETER\fP(x)   (void)(x)"
.br
.ti -1c
.RI "#define \fBUNUSED_PARAMETER2\fP(x, y)   UNUSED_PARAMETER(x),UNUSED_PARAMETER(y)"
.br
.ti -1c
.RI "#define \fBSQLITE_N_BTREE_META\fP   10"
.br
.ti -1c
.RI "#define \fBSQLITE_DEFAULT_AUTOVACUUM\fP   0"
.br
.ti -1c
.RI "#define \fBBTREE_AUTOVACUUM_NONE\fP   0"
.br
.ti -1c
.RI "#define \fBBTREE_AUTOVACUUM_FULL\fP   1"
.br
.ti -1c
.RI "#define \fBBTREE_AUTOVACUUM_INCR\fP   2"
.br
.ti -1c
.RI "#define \fBBTREE_OMIT_JOURNAL\fP   1"
.br
.ti -1c
.RI "#define \fBBTREE_NO_READLOCK\fP   2"
.br
.ti -1c
.RI "#define \fBBTREE_MEMORY\fP   4"
.br
.ti -1c
.RI "#define \fBBTREE_SINGLE\fP   8"
.br
.ti -1c
.RI "#define \fBBTREE_UNORDERED\fP   16"
.br
.ti -1c
.RI "#define \fBBTREE_INTKEY\fP   1"
.br
.ti -1c
.RI "#define \fBBTREE_BLOBKEY\fP   2"
.br
.ti -1c
.RI "#define \fBBTREE_FREE_PAGE_COUNT\fP   0"
.br
.ti -1c
.RI "#define \fBBTREE_SCHEMA_VERSION\fP   1"
.br
.ti -1c
.RI "#define \fBBTREE_FILE_FORMAT\fP   2"
.br
.ti -1c
.RI "#define \fBBTREE_DEFAULT_CACHE_SIZE\fP   3"
.br
.ti -1c
.RI "#define \fBBTREE_LARGEST_ROOT_PAGE\fP   4"
.br
.ti -1c
.RI "#define \fBBTREE_TEXT_ENCODING\fP   5"
.br
.ti -1c
.RI "#define \fBBTREE_USER_VERSION\fP   6"
.br
.ti -1c
.RI "#define \fBBTREE_INCR_VACUUM\fP   7"
.br
.ti -1c
.RI "#define \fBP4_NOTUSED\fP   0"
.br
.ti -1c
.RI "#define \fBP4_DYNAMIC\fP   (-1)"
.br
.ti -1c
.RI "#define \fBP4_STATIC\fP   (-2)"
.br
.ti -1c
.RI "#define \fBP4_COLLSEQ\fP   (-4)"
.br
.ti -1c
.RI "#define \fBP4_FUNCDEF\fP   (-5)"
.br
.ti -1c
.RI "#define \fBP4_KEYINFO\fP   (-6)"
.br
.ti -1c
.RI "#define \fBP4_VDBEFUNC\fP   (-7)"
.br
.ti -1c
.RI "#define \fBP4_MEM\fP   (-8)"
.br
.ti -1c
.RI "#define \fBP4_TRANSIENT\fP   (-9)"
.br
.ti -1c
.RI "#define \fBP4_VTAB\fP   (-10)"
.br
.ti -1c
.RI "#define \fBP4_MPRINTF\fP   (-11)"
.br
.ti -1c
.RI "#define \fBP4_REAL\fP   (-12)"
.br
.ti -1c
.RI "#define \fBP4_INT64\fP   (-13)"
.br
.ti -1c
.RI "#define \fBP4_INT32\fP   (-14)"
.br
.ti -1c
.RI "#define \fBP4_INTARRAY\fP   (-15)"
.br
.ti -1c
.RI "#define \fBP4_SUBPROGRAM\fP   (-18)"
.br
.ti -1c
.RI "#define \fBP4_KEYINFO_HANDOFF\fP   (-16)"
.br
.ti -1c
.RI "#define \fBP4_KEYINFO_STATIC\fP   (-17)"
.br
.ti -1c
.RI "#define \fBCOLNAME_NAME\fP   0"
.br
.ti -1c
.RI "#define \fBCOLNAME_DECLTYPE\fP   1"
.br
.ti -1c
.RI "#define \fBCOLNAME_DATABASE\fP   2"
.br
.ti -1c
.RI "#define \fBCOLNAME_TABLE\fP   3"
.br
.ti -1c
.RI "#define \fBCOLNAME_COLUMN\fP   4"
.br
.ti -1c
.RI "#define \fBCOLNAME_N\fP   2"
.br
.ti -1c
.RI "#define \fBADDR\fP(X)   (-1-(X))"
.br
.ti -1c
.RI "#define \fBOP_Goto\fP   1"
.br
.ti -1c
.RI "#define \fBOP_Gosub\fP   2"
.br
.ti -1c
.RI "#define \fBOP_Return\fP   3"
.br
.ti -1c
.RI "#define \fBOP_Yield\fP   4"
.br
.ti -1c
.RI "#define \fBOP_HaltIfNull\fP   5"
.br
.ti -1c
.RI "#define \fBOP_Halt\fP   6"
.br
.ti -1c
.RI "#define \fBOP_Integer\fP   7"
.br
.ti -1c
.RI "#define \fBOP_Int64\fP   8"
.br
.ti -1c
.RI "#define \fBOP_Real\fP   130"
.br
.ti -1c
.RI "#define \fBOP_String8\fP   94"
.br
.ti -1c
.RI "#define \fBOP_String\fP   9"
.br
.ti -1c
.RI "#define \fBOP_Null\fP   10"
.br
.ti -1c
.RI "#define \fBOP_Blob\fP   11"
.br
.ti -1c
.RI "#define \fBOP_Variable\fP   12"
.br
.ti -1c
.RI "#define \fBOP_Move\fP   13"
.br
.ti -1c
.RI "#define \fBOP_Copy\fP   14"
.br
.ti -1c
.RI "#define \fBOP_SCopy\fP   15"
.br
.ti -1c
.RI "#define \fBOP_ResultRow\fP   16"
.br
.ti -1c
.RI "#define \fBOP_Concat\fP   91"
.br
.ti -1c
.RI "#define \fBOP_Add\fP   86"
.br
.ti -1c
.RI "#define \fBOP_Subtract\fP   87"
.br
.ti -1c
.RI "#define \fBOP_Multiply\fP   88"
.br
.ti -1c
.RI "#define \fBOP_Divide\fP   89"
.br
.ti -1c
.RI "#define \fBOP_Remainder\fP   90"
.br
.ti -1c
.RI "#define \fBOP_CollSeq\fP   17"
.br
.ti -1c
.RI "#define \fBOP_Function\fP   18"
.br
.ti -1c
.RI "#define \fBOP_BitAnd\fP   82"
.br
.ti -1c
.RI "#define \fBOP_BitOr\fP   83"
.br
.ti -1c
.RI "#define \fBOP_ShiftLeft\fP   84"
.br
.ti -1c
.RI "#define \fBOP_ShiftRight\fP   85"
.br
.ti -1c
.RI "#define \fBOP_AddImm\fP   20"
.br
.ti -1c
.RI "#define \fBOP_MustBeInt\fP   21"
.br
.ti -1c
.RI "#define \fBOP_RealAffinity\fP   22"
.br
.ti -1c
.RI "#define \fBOP_ToText\fP   141"
.br
.ti -1c
.RI "#define \fBOP_ToBlob\fP   142"
.br
.ti -1c
.RI "#define \fBOP_ToNumeric\fP   143"
.br
.ti -1c
.RI "#define \fBOP_ToInt\fP   144"
.br
.ti -1c
.RI "#define \fBOP_ToReal\fP   145"
.br
.ti -1c
.RI "#define \fBOP_Eq\fP   76"
.br
.ti -1c
.RI "#define \fBOP_Ne\fP   75"
.br
.ti -1c
.RI "#define \fBOP_Lt\fP   79"
.br
.ti -1c
.RI "#define \fBOP_Le\fP   78"
.br
.ti -1c
.RI "#define \fBOP_Gt\fP   77"
.br
.ti -1c
.RI "#define \fBOP_Ge\fP   80"
.br
.ti -1c
.RI "#define \fBOP_Permutation\fP   23"
.br
.ti -1c
.RI "#define \fBOP_Compare\fP   24"
.br
.ti -1c
.RI "#define \fBOP_Jump\fP   25"
.br
.ti -1c
.RI "#define \fBOP_And\fP   69"
.br
.ti -1c
.RI "#define \fBOP_Or\fP   68"
.br
.ti -1c
.RI "#define \fBOP_Not\fP   19"
.br
.ti -1c
.RI "#define \fBOP_BitNot\fP   93"
.br
.ti -1c
.RI "#define \fBOP_If\fP   26"
.br
.ti -1c
.RI "#define \fBOP_IfNot\fP   27"
.br
.ti -1c
.RI "#define \fBOP_IsNull\fP   73"
.br
.ti -1c
.RI "#define \fBOP_NotNull\fP   74"
.br
.ti -1c
.RI "#define \fBOP_Column\fP   28"
.br
.ti -1c
.RI "#define \fBOP_Affinity\fP   29"
.br
.ti -1c
.RI "#define \fBOP_MakeRecord\fP   30"
.br
.ti -1c
.RI "#define \fBOP_Count\fP   31"
.br
.ti -1c
.RI "#define \fBOP_Savepoint\fP   32"
.br
.ti -1c
.RI "#define \fBOP_AutoCommit\fP   33"
.br
.ti -1c
.RI "#define \fBOP_Transaction\fP   34"
.br
.ti -1c
.RI "#define \fBOP_ReadCookie\fP   35"
.br
.ti -1c
.RI "#define \fBOP_SetCookie\fP   36"
.br
.ti -1c
.RI "#define \fBOP_VerifyCookie\fP   37"
.br
.ti -1c
.RI "#define \fBOP_OpenRead\fP   38"
.br
.ti -1c
.RI "#define \fBOP_OpenWrite\fP   39"
.br
.ti -1c
.RI "#define \fBOP_OpenAutoindex\fP   40"
.br
.ti -1c
.RI "#define \fBOP_OpenEphemeral\fP   41"
.br
.ti -1c
.RI "#define \fBOP_OpenPseudo\fP   42"
.br
.ti -1c
.RI "#define \fBOP_Close\fP   43"
.br
.ti -1c
.RI "#define \fBOP_SeekLt\fP   44"
.br
.ti -1c
.RI "#define \fBOP_SeekLe\fP   45"
.br
.ti -1c
.RI "#define \fBOP_SeekGe\fP   46"
.br
.ti -1c
.RI "#define \fBOP_SeekGt\fP   47"
.br
.ti -1c
.RI "#define \fBOP_Seek\fP   48"
.br
.ti -1c
.RI "#define \fBOP_NotFound\fP   49"
.br
.ti -1c
.RI "#define \fBOP_Found\fP   50"
.br
.ti -1c
.RI "#define \fBOP_IsUnique\fP   51"
.br
.ti -1c
.RI "#define \fBOP_NotExists\fP   52"
.br
.ti -1c
.RI "#define \fBOP_Sequence\fP   53"
.br
.ti -1c
.RI "#define \fBOP_NewRowid\fP   54"
.br
.ti -1c
.RI "#define \fBOP_Insert\fP   55"
.br
.ti -1c
.RI "#define \fBOP_InsertInt\fP   56"
.br
.ti -1c
.RI "#define \fBOP_Delete\fP   57"
.br
.ti -1c
.RI "#define \fBOP_ResetCount\fP   58"
.br
.ti -1c
.RI "#define \fBOP_RowKey\fP   59"
.br
.ti -1c
.RI "#define \fBOP_RowData\fP   60"
.br
.ti -1c
.RI "#define \fBOP_Rowid\fP   61"
.br
.ti -1c
.RI "#define \fBOP_NullRow\fP   62"
.br
.ti -1c
.RI "#define \fBOP_Last\fP   63"
.br
.ti -1c
.RI "#define \fBOP_Sort\fP   64"
.br
.ti -1c
.RI "#define \fBOP_Rewind\fP   65"
.br
.ti -1c
.RI "#define \fBOP_Prev\fP   66"
.br
.ti -1c
.RI "#define \fBOP_Next\fP   67"
.br
.ti -1c
.RI "#define \fBOP_IdxInsert\fP   70"
.br
.ti -1c
.RI "#define \fBOP_IdxDelete\fP   71"
.br
.ti -1c
.RI "#define \fBOP_IdxRowid\fP   72"
.br
.ti -1c
.RI "#define \fBOP_IdxLT\fP   81"
.br
.ti -1c
.RI "#define \fBOP_IdxGE\fP   92"
.br
.ti -1c
.RI "#define \fBOP_Destroy\fP   95"
.br
.ti -1c
.RI "#define \fBOP_Clear\fP   96"
.br
.ti -1c
.RI "#define \fBOP_CreateIndex\fP   97"
.br
.ti -1c
.RI "#define \fBOP_CreateTable\fP   98"
.br
.ti -1c
.RI "#define \fBOP_ParseSchema\fP   99"
.br
.ti -1c
.RI "#define \fBOP_LoadAnalysis\fP   100"
.br
.ti -1c
.RI "#define \fBOP_DropTable\fP   101"
.br
.ti -1c
.RI "#define \fBOP_DropIndex\fP   102"
.br
.ti -1c
.RI "#define \fBOP_DropTrigger\fP   103"
.br
.ti -1c
.RI "#define \fBOP_IntegrityCk\fP   104"
.br
.ti -1c
.RI "#define \fBOP_RowSetAdd\fP   105"
.br
.ti -1c
.RI "#define \fBOP_RowSetRead\fP   106"
.br
.ti -1c
.RI "#define \fBOP_RowSetTest\fP   107"
.br
.ti -1c
.RI "#define \fBOP_Program\fP   108"
.br
.ti -1c
.RI "#define \fBOP_Param\fP   109"
.br
.ti -1c
.RI "#define \fBOP_FkCounter\fP   110"
.br
.ti -1c
.RI "#define \fBOP_FkIfZero\fP   111"
.br
.ti -1c
.RI "#define \fBOP_MemMax\fP   112"
.br
.ti -1c
.RI "#define \fBOP_IfPos\fP   113"
.br
.ti -1c
.RI "#define \fBOP_IfNeg\fP   114"
.br
.ti -1c
.RI "#define \fBOP_IfZero\fP   115"
.br
.ti -1c
.RI "#define \fBOP_AggStep\fP   116"
.br
.ti -1c
.RI "#define \fBOP_AggFinal\fP   117"
.br
.ti -1c
.RI "#define \fBOP_Checkpoint\fP   118"
.br
.ti -1c
.RI "#define \fBOP_JournalMode\fP   119"
.br
.ti -1c
.RI "#define \fBOP_Vacuum\fP   120"
.br
.ti -1c
.RI "#define \fBOP_IncrVacuum\fP   121"
.br
.ti -1c
.RI "#define \fBOP_Expire\fP   122"
.br
.ti -1c
.RI "#define \fBOP_TableLock\fP   123"
.br
.ti -1c
.RI "#define \fBOP_VBegin\fP   124"
.br
.ti -1c
.RI "#define \fBOP_VCreate\fP   125"
.br
.ti -1c
.RI "#define \fBOP_VDestroy\fP   126"
.br
.ti -1c
.RI "#define \fBOP_VOpen\fP   127"
.br
.ti -1c
.RI "#define \fBOP_VFilter\fP   128"
.br
.ti -1c
.RI "#define \fBOP_VColumn\fP   129"
.br
.ti -1c
.RI "#define \fBOP_VNext\fP   131"
.br
.ti -1c
.RI "#define \fBOP_VRename\fP   132"
.br
.ti -1c
.RI "#define \fBOP_VUpdate\fP   133"
.br
.ti -1c
.RI "#define \fBOP_Pagecount\fP   134"
.br
.ti -1c
.RI "#define \fBOP_Trace\fP   135"
.br
.ti -1c
.RI "#define \fBOP_Noop\fP   136"
.br
.ti -1c
.RI "#define \fBOP_Explain\fP   137"
.br
.ti -1c
.RI "#define \fBOP_NotUsed_138\fP   138"
.br
.ti -1c
.RI "#define \fBOP_NotUsed_139\fP   139"
.br
.ti -1c
.RI "#define \fBOP_NotUsed_140\fP   140"
.br
.ti -1c
.RI "#define \fBOPFLG_JUMP\fP   0x0001"
.br
.ti -1c
.RI "#define \fBOPFLG_OUT2_PRERELEASE\fP   0x0002"
.br
.ti -1c
.RI "#define \fBOPFLG_IN1\fP   0x0004"
.br
.ti -1c
.RI "#define \fBOPFLG_IN2\fP   0x0008"
.br
.ti -1c
.RI "#define \fBOPFLG_IN3\fP   0x0010"
.br
.ti -1c
.RI "#define \fBOPFLG_OUT2\fP   0x0020"
.br
.ti -1c
.RI "#define \fBOPFLG_OUT3\fP   0x0040"
.br
.ti -1c
.RI "#define \fBOPFLG_INITIALIZER\fP"
.br
.ti -1c
.RI "#define \fBVdbeComment\fP(X)"
.br
.ti -1c
.RI "#define \fBVdbeNoopComment\fP(X)"
.br
.ti -1c
.RI "#define \fBSQLITE_DEFAULT_JOURNAL_SIZE_LIMIT\fP   -1"
.br
.ti -1c
.RI "#define \fBPAGER_MJ_PGNO\fP(x)   ((\fBPgno\fP)((PENDING_BYTE/((x)->pageSize))+1))"
.br
.ti -1c
.RI "#define \fBPAGER_OMIT_JOURNAL\fP   0x0001"
.br
.ti -1c
.RI "#define \fBPAGER_NO_READLOCK\fP   0x0002"
.br
.ti -1c
.RI "#define \fBPAGER_MEMORY\fP   0x0004"
.br
.ti -1c
.RI "#define \fBPAGER_LOCKINGMODE_QUERY\fP   -1"
.br
.ti -1c
.RI "#define \fBPAGER_LOCKINGMODE_NORMAL\fP   0"
.br
.ti -1c
.RI "#define \fBPAGER_LOCKINGMODE_EXCLUSIVE\fP   1"
.br
.ti -1c
.RI "#define \fBPAGER_JOURNALMODE_QUERY\fP   (-1)"
.br
.ti -1c
.RI "#define \fBPAGER_JOURNALMODE_DELETE\fP   0"
.br
.ti -1c
.RI "#define \fBPAGER_JOURNALMODE_PERSIST\fP   1"
.br
.ti -1c
.RI "#define \fBPAGER_JOURNALMODE_OFF\fP   2"
.br
.ti -1c
.RI "#define \fBPAGER_JOURNALMODE_TRUNCATE\fP   3"
.br
.ti -1c
.RI "#define \fBPAGER_JOURNALMODE_MEMORY\fP   4"
.br
.ti -1c
.RI "#define \fBPAGER_JOURNALMODE_WAL\fP   5"
.br
.ti -1c
.RI "#define \fBsqlite3PagerGet\fP(A, B, C)   sqlite3PagerAcquire(A,B,C,0)"
.br
.ti -1c
.RI "#define \fBdisable_simulated_io_errors\fP()"
.br
.ti -1c
.RI "#define \fBenable_simulated_io_errors\fP()"
.br
.ti -1c
.RI "#define \fBPGHDR_DIRTY\fP   0x002"
.br
.ti -1c
.RI "#define \fBPGHDR_NEED_SYNC\fP   0x004"
.br
.ti -1c
.RI "#define \fBPGHDR_NEED_READ\fP   0x008"
.br
.ti -1c
.RI "#define \fBPGHDR_REUSE_UNLIKELY\fP   0x010"
.br
.ti -1c
.RI "#define \fBPGHDR_DONT_WRITE\fP   0x020"
.br
.ti -1c
.RI "#define \fBSQLITE_OS_OTHER\fP   0"
.br
.ti -1c
.RI "#define \fBSQLITE_OS_WIN\fP   0"
.br
.ti -1c
.RI "#define \fBSQLITE_OS_UNIX\fP   1"
.br
.ti -1c
.RI "#define \fBSQLITE_OS_OS2\fP   0"
.br
.ti -1c
.RI "#define \fBSQLITE_OS_WINCE\fP   0"
.br
.ti -1c
.RI "#define \fBSQLITE_TEMPNAME_SIZE\fP   200"
.br
.ti -1c
.RI "#define \fBSET_FULLSYNC\fP(x, y)"
.br
.ti -1c
.RI "#define \fBSQLITE_DEFAULT_SECTOR_SIZE\fP   512"
.br
.ti -1c
.RI "#define \fBSQLITE_TEMP_FILE_PREFIX\fP   'etilqs_'"
.br
.ti -1c
.RI "#define \fBNO_LOCK\fP   0"
.br
.ti -1c
.RI "#define \fBSHARED_LOCK\fP   1"
.br
.ti -1c
.RI "#define \fBRESERVED_LOCK\fP   2"
.br
.ti -1c
.RI "#define \fBPENDING_LOCK\fP   3"
.br
.ti -1c
.RI "#define \fBEXCLUSIVE_LOCK\fP   4"
.br
.ti -1c
.RI "#define \fBPENDING_BYTE\fP   \fBsqlite3PendingByte\fP"
.br
.ti -1c
.RI "#define \fBRESERVED_BYTE\fP   (PENDING_BYTE+1)"
.br
.ti -1c
.RI "#define \fBSHARED_FIRST\fP   (PENDING_BYTE+2)"
.br
.ti -1c
.RI "#define \fBSHARED_SIZE\fP   510"
.br
.ti -1c
.RI "#define \fBSQLITE_FCNTL_DB_UNCHANGED\fP   0xca093fa0"
.br
.ti -1c
.RI "#define \fBSQLITE_MUTEX_PTHREADS\fP"
.br
.ti -1c
.RI "#define \fBDbHasProperty\fP(D, I, P)   (((D)->aDb[I].pSchema->flags&(P))==(P))"
.br
.ti -1c
.RI "#define \fBDbHasAnyProperty\fP(D, I, P)   (((D)->aDb[I].pSchema->flags&(P))!=0)"
.br
.ti -1c
.RI "#define \fBDbSetProperty\fP(D, I, P)   (D)->aDb[I].pSchema->flags|=(P)"
.br
.ti -1c
.RI "#define \fBDbClearProperty\fP(D, I, P)   (D)->aDb[I].pSchema->flags&=~(P)"
.br
.ti -1c
.RI "#define \fBDB_SchemaLoaded\fP   0x0001"
.br
.ti -1c
.RI "#define \fBDB_UnresetViews\fP   0x0002"
.br
.ti -1c
.RI "#define \fBDB_Empty\fP   0x0004"
.br
.ti -1c
.RI "#define \fBSQLITE_N_LIMIT\fP   (SQLITE_LIMIT_TRIGGER_DEPTH+1)"
.br
.ti -1c
.RI "#define \fBENC\fP(\fBdb\fP)   ((\fBdb\fP)->aDb[0].pSchema->enc)"
.br
.ti -1c
.RI "#define \fBSQLITE_VdbeTrace\fP   0x00000100"
.br
.ti -1c
.RI "#define \fBSQLITE_InternChanges\fP   0x00000200"
.br
.ti -1c
.RI "#define \fBSQLITE_FullColNames\fP   0x00000400"
.br
.ti -1c
.RI "#define \fBSQLITE_ShortColNames\fP   0x00000800"
.br
.ti -1c
.RI "#define \fBSQLITE_CountRows\fP   0x00001000"
.br
.ti -1c
.RI "#define \fBSQLITE_NullCallback\fP   0x00002000"
.br
.ti -1c
.RI "#define \fBSQLITE_SqlTrace\fP   0x00004000"
.br
.ti -1c
.RI "#define \fBSQLITE_VdbeListing\fP   0x00008000"
.br
.ti -1c
.RI "#define \fBSQLITE_WriteSchema\fP   0x00010000"
.br
.ti -1c
.RI "#define \fBSQLITE_NoReadlock\fP   0x00020000"
.br
.ti -1c
.RI "#define \fBSQLITE_IgnoreChecks\fP   0x00040000"
.br
.ti -1c
.RI "#define \fBSQLITE_ReadUncommitted\fP   0x0080000"
.br
.ti -1c
.RI "#define \fBSQLITE_LegacyFileFmt\fP   0x00100000"
.br
.ti -1c
.RI "#define \fBSQLITE_FullFSync\fP   0x00200000"
.br
.ti -1c
.RI "#define \fBSQLITE_LoadExtension\fP   0x00400000"
.br
.ti -1c
.RI "#define \fBSQLITE_RecoveryMode\fP   0x00800000"
.br
.ti -1c
.RI "#define \fBSQLITE_ReverseOrder\fP   0x01000000"
.br
.ti -1c
.RI "#define \fBSQLITE_RecTriggers\fP   0x02000000"
.br
.ti -1c
.RI "#define \fBSQLITE_ForeignKeys\fP   0x04000000"
.br
.ti -1c
.RI "#define \fBSQLITE_AutoIndex\fP   0x08000000"
.br
.ti -1c
.RI "#define \fBSQLITE_PreferBuiltin\fP   0x10000000"
.br
.ti -1c
.RI "#define \fBSQLITE_QueryFlattener\fP   0x01"
.br
.ti -1c
.RI "#define \fBSQLITE_ColumnCache\fP   0x02"
.br
.ti -1c
.RI "#define \fBSQLITE_IndexSort\fP   0x04"
.br
.ti -1c
.RI "#define \fBSQLITE_IndexSearch\fP   0x08"
.br
.ti -1c
.RI "#define \fBSQLITE_IndexCover\fP   0x10"
.br
.ti -1c
.RI "#define \fBSQLITE_GroupByOrder\fP   0x20"
.br
.ti -1c
.RI "#define \fBSQLITE_OptMask\fP   0xff"
.br
.ti -1c
.RI "#define \fBSQLITE_MAGIC_OPEN\fP   0xa029a697"
.br
.ti -1c
.RI "#define \fBSQLITE_MAGIC_CLOSED\fP   0x9f3c2d33"
.br
.ti -1c
.RI "#define \fBSQLITE_MAGIC_SICK\fP   0x4b771290"
.br
.ti -1c
.RI "#define \fBSQLITE_MAGIC_BUSY\fP   0xf03b7906"
.br
.ti -1c
.RI "#define \fBSQLITE_MAGIC_ERROR\fP   0xb5357930"
.br
.ti -1c
.RI "#define \fBSQLITE_FUNC_LIKE\fP   0x01"
.br
.ti -1c
.RI "#define \fBSQLITE_FUNC_CASE\fP   0x02"
.br
.ti -1c
.RI "#define \fBSQLITE_FUNC_EPHEM\fP   0x04"
.br
.ti -1c
.RI "#define \fBSQLITE_FUNC_NEEDCOLL\fP   0x08"
.br
.ti -1c
.RI "#define \fBSQLITE_FUNC_PRIVATE\fP   0x10"
.br
.ti -1c
.RI "#define \fBSQLITE_FUNC_COUNT\fP   0x20"
.br
.ti -1c
.RI "#define \fBSQLITE_FUNC_COALESCE\fP   0x40"
.br
.ti -1c
.RI "#define \fBFUNCTION\fP(zName, nArg, iArg, bNC, xFunc)"
.br
.ti -1c
.RI "#define \fBSTR_FUNCTION\fP(zName, nArg, pArg, bNC, xFunc)"
.br
.ti -1c
.RI "#define \fBLIKEFUNC\fP(zName, nArg, arg, flags)   {nArg, SQLITE_UTF8, flags, (void *)arg, 0, likeFunc, 0, 0, #zName, 0, 0}"
.br
.ti -1c
.RI "#define \fBAGGREGATE\fP(zName, nArg, arg, nc, xStep, xFinal)"
.br
.ti -1c
.RI "#define \fBSAVEPOINT_BEGIN\fP   0"
.br
.ti -1c
.RI "#define \fBSAVEPOINT_RELEASE\fP   1"
.br
.ti -1c
.RI "#define \fBSAVEPOINT_ROLLBACK\fP   2"
.br
.ti -1c
.RI "#define \fBSQLITE_COLL_BINARY\fP   1"
.br
.ti -1c
.RI "#define \fBSQLITE_COLL_NOCASE\fP   2"
.br
.ti -1c
.RI "#define \fBSQLITE_COLL_REVERSE\fP   3"
.br
.ti -1c
.RI "#define \fBSQLITE_COLL_USER\fP   0"
.br
.ti -1c
.RI "#define \fBSQLITE_SO_ASC\fP   0"
.br
.ti -1c
.RI "#define \fBSQLITE_SO_DESC\fP   1"
.br
.ti -1c
.RI "#define \fBSQLITE_AFF_TEXT\fP   'a'"
.br
.ti -1c
.RI "#define \fBSQLITE_AFF_NONE\fP   'b'"
.br
.ti -1c
.RI "#define \fBSQLITE_AFF_NUMERIC\fP   'c'"
.br
.ti -1c
.RI "#define \fBSQLITE_AFF_INTEGER\fP   'd'"
.br
.ti -1c
.RI "#define \fBSQLITE_AFF_REAL\fP   'e'"
.br
.ti -1c
.RI "#define \fBsqlite3IsNumericAffinity\fP(X)   ((X)>=SQLITE_AFF_NUMERIC)"
.br
.ti -1c
.RI "#define \fBSQLITE_AFF_MASK\fP   0x67"
.br
.ti -1c
.RI "#define \fBSQLITE_JUMPIFNULL\fP   0x08"
.br
.ti -1c
.RI "#define \fBSQLITE_STOREP2\fP   0x10"
.br
.ti -1c
.RI "#define \fBSQLITE_NULLEQ\fP   0x80"
.br
.ti -1c
.RI "#define \fBTF_Readonly\fP   0x01"
.br
.ti -1c
.RI "#define \fBTF_Ephemeral\fP   0x02"
.br
.ti -1c
.RI "#define \fBTF_HasPrimaryKey\fP   0x04"
.br
.ti -1c
.RI "#define \fBTF_Autoincrement\fP   0x08"
.br
.ti -1c
.RI "#define \fBTF_Virtual\fP   0x10"
.br
.ti -1c
.RI "#define \fBTF_NeedMetadata\fP   0x20"
.br
.ti -1c
.RI "#define \fBIsVirtual\fP(X)   (((X)->tabFlags & TF_Virtual)!=0)"
.br
.ti -1c
.RI "#define \fBIsHiddenColumn\fP(X)   ((X)->isHidden)"
.br
.ti -1c
.RI "#define \fBOE_None\fP   0"
.br
.ti -1c
.RI "#define \fBOE_Rollback\fP   1"
.br
.ti -1c
.RI "#define \fBOE_Abort\fP   2"
.br
.ti -1c
.RI "#define \fBOE_Fail\fP   3"
.br
.ti -1c
.RI "#define \fBOE_Ignore\fP   4"
.br
.ti -1c
.RI "#define \fBOE_Replace\fP   5"
.br
.ti -1c
.RI "#define \fBOE_Restrict\fP   6"
.br
.ti -1c
.RI "#define \fBOE_SetNull\fP   7"
.br
.ti -1c
.RI "#define \fBOE_SetDflt\fP   8"
.br
.ti -1c
.RI "#define \fBOE_Cascade\fP   9"
.br
.ti -1c
.RI "#define \fBOE_Default\fP   99"
.br
.ti -1c
.RI "#define \fBUNPACKED_NEED_FREE\fP   0x0001"
.br
.ti -1c
.RI "#define \fBUNPACKED_NEED_DESTROY\fP   0x0002"
.br
.ti -1c
.RI "#define \fBUNPACKED_IGNORE_ROWID\fP   0x0004"
.br
.ti -1c
.RI "#define \fBUNPACKED_INCRKEY\fP   0x0008"
.br
.ti -1c
.RI "#define \fBUNPACKED_PREFIX_MATCH\fP   0x0010"
.br
.ti -1c
.RI "#define \fBUNPACKED_PREFIX_SEARCH\fP   0x0020"
.br
.ti -1c
.RI "#define \fBEP_FromJoin\fP   0x0001"
.br
.ti -1c
.RI "#define \fBEP_Agg\fP   0x0002"
.br
.ti -1c
.RI "#define \fBEP_Resolved\fP   0x0004"
.br
.ti -1c
.RI "#define \fBEP_Error\fP   0x0008"
.br
.ti -1c
.RI "#define \fBEP_Distinct\fP   0x0010"
.br
.ti -1c
.RI "#define \fBEP_VarSelect\fP   0x0020"
.br
.ti -1c
.RI "#define \fBEP_DblQuoted\fP   0x0040"
.br
.ti -1c
.RI "#define \fBEP_InfixFunc\fP   0x0080"
.br
.ti -1c
.RI "#define \fBEP_ExpCollate\fP   0x0100"
.br
.ti -1c
.RI "#define \fBEP_FixedDest\fP   0x0200"
.br
.ti -1c
.RI "#define \fBEP_IntValue\fP   0x0400"
.br
.ti -1c
.RI "#define \fBEP_xIsSelect\fP   0x0800"
.br
.ti -1c
.RI "#define \fBEP_Reduced\fP   0x1000"
.br
.ti -1c
.RI "#define \fBEP_TokenOnly\fP   0x2000"
.br
.ti -1c
.RI "#define \fBEP_Static\fP   0x4000"
.br
.ti -1c
.RI "#define \fBEP2_MallocedToken\fP   0x0001"
.br
.ti -1c
.RI "#define \fBEP2_Irreducible\fP   0x0002"
.br
.ti -1c
.RI "#define \fBExprSetIrreducible\fP(X)"
.br
.ti -1c
.RI "#define \fBExprHasProperty\fP(E, P)   (((E)->flags&(P))==(P))"
.br
.ti -1c
.RI "#define \fBExprHasAnyProperty\fP(E, P)   (((E)->flags&(P))!=0)"
.br
.ti -1c
.RI "#define \fBExprSetProperty\fP(E, P)   (E)->flags|=(P)"
.br
.ti -1c
.RI "#define \fBExprClearProperty\fP(E, P)   (E)->flags&=~(P)"
.br
.ti -1c
.RI "#define \fBEXPR_FULLSIZE\fP   sizeof(\fBExpr\fP)"
.br
.ti -1c
.RI "#define \fBEXPR_REDUCEDSIZE\fP   offsetof(\fBExpr\fP,iTable)"
.br
.ti -1c
.RI "#define \fBEXPR_TOKENONLYSIZE\fP   offsetof(\fBExpr\fP,pLeft)"
.br
.ti -1c
.RI "#define \fBEXPRDUP_REDUCE\fP   0x0001"
.br
.ti -1c
.RI "#define \fBBMS\fP   ((int)(sizeof(\fBBitmask\fP)*8))"
.br
.ti -1c
.RI "#define \fBJT_INNER\fP   0x0001"
.br
.ti -1c
.RI "#define \fBJT_CROSS\fP   0x0002"
.br
.ti -1c
.RI "#define \fBJT_NATURAL\fP   0x0004"
.br
.ti -1c
.RI "#define \fBJT_LEFT\fP   0x0008"
.br
.ti -1c
.RI "#define \fBJT_RIGHT\fP   0x0010"
.br
.ti -1c
.RI "#define \fBJT_OUTER\fP   0x0020"
.br
.ti -1c
.RI "#define \fBJT_ERROR\fP   0x0040"
.br
.ti -1c
.RI "#define \fBWHERE_ORDERBY_NORMAL\fP   0x0000"
.br
.ti -1c
.RI "#define \fBWHERE_ORDERBY_MIN\fP   0x0001"
.br
.ti -1c
.RI "#define \fBWHERE_ORDERBY_MAX\fP   0x0002"
.br
.ti -1c
.RI "#define \fBWHERE_ONEPASS_DESIRED\fP   0x0004"
.br
.ti -1c
.RI "#define \fBWHERE_DUPLICATES_OK\fP   0x0008"
.br
.ti -1c
.RI "#define \fBWHERE_OMIT_OPEN\fP   0x0010"
.br
.ti -1c
.RI "#define \fBWHERE_OMIT_CLOSE\fP   0x0020"
.br
.ti -1c
.RI "#define \fBWHERE_FORCE_TABLE\fP   0x0040"
.br
.ti -1c
.RI "#define \fBWHERE_ONETABLE_ONLY\fP   0x0080"
.br
.ti -1c
.RI "#define \fBSF_Distinct\fP   0x0001"
.br
.ti -1c
.RI "#define \fBSF_Resolved\fP   0x0002"
.br
.ti -1c
.RI "#define \fBSF_Aggregate\fP   0x0004"
.br
.ti -1c
.RI "#define \fBSF_UsesEphemeral\fP   0x0008"
.br
.ti -1c
.RI "#define \fBSF_Expanded\fP   0x0010"
.br
.ti -1c
.RI "#define \fBSF_HasTypeInfo\fP   0x0020"
.br
.ti -1c
.RI "#define \fBSRT_Union\fP   1"
.br
.ti -1c
.RI "#define \fBSRT_Except\fP   2"
.br
.ti -1c
.RI "#define \fBSRT_Exists\fP   3"
.br
.ti -1c
.RI "#define \fBSRT_Discard\fP   4"
.br
.ti -1c
.RI "#define \fBIgnorableOrderby\fP(X)   ((X->eDest)<=SRT_Discard)"
.br
.ti -1c
.RI "#define \fBSRT_Output\fP   5"
.br
.ti -1c
.RI "#define \fBSRT_Mem\fP   6"
.br
.ti -1c
.RI "#define \fBSRT_Set\fP   7"
.br
.ti -1c
.RI "#define \fBSRT_Table\fP   8"
.br
.ti -1c
.RI "#define \fBSRT_EphemTab\fP   9"
.br
.ti -1c
.RI "#define \fBSRT_Coroutine\fP   10"
.br
.ti -1c
.RI "#define \fBSQLITE_N_COLCACHE\fP   10"
.br
.ti -1c
.RI "#define \fBIN_DECLARE_VTAB\fP   (pParse->declareVtab)"
.br
.ti -1c
.RI "#define \fBOPFLAG_NCHANGE\fP   0x01"
.br
.ti -1c
.RI "#define \fBOPFLAG_LASTROWID\fP   0x02"
.br
.ti -1c
.RI "#define \fBOPFLAG_ISUPDATE\fP   0x04"
.br
.ti -1c
.RI "#define \fBOPFLAG_APPEND\fP   0x08"
.br
.ti -1c
.RI "#define \fBOPFLAG_USESEEKRESULT\fP   0x10"
.br
.ti -1c
.RI "#define \fBOPFLAG_CLEARCACHE\fP   0x20"
.br
.ti -1c
.RI "#define \fBTRIGGER_BEFORE\fP   1"
.br
.ti -1c
.RI "#define \fBTRIGGER_AFTER\fP   2"
.br
.ti -1c
.RI "#define \fBWRC_Continue\fP   0"
.br
.ti -1c
.RI "#define \fBWRC_Prune\fP   1"
.br
.ti -1c
.RI "#define \fBWRC_Abort\fP   2"
.br
.ti -1c
.RI "#define \fBSQLITE_SKIP_UTF8\fP(zIn)"
.br
.ti -1c
.RI "#define \fBSQLITE_CORRUPT_BKPT\fP   sqlite3CorruptError(__LINE__)"
.br
.ti -1c
.RI "#define \fBSQLITE_MISUSE_BKPT\fP   sqlite3MisuseError(__LINE__)"
.br
.ti -1c
.RI "#define \fBSQLITE_CANTOPEN_BKPT\fP   sqlite3CantopenError(__LINE__)"
.br
.ti -1c
.RI "#define \fBsqlite3Toupper\fP(x)   ((x)&~(\fBsqlite3CtypeMap\fP[(unsigned char)(x)]&0x20))"
.br
.ti -1c
.RI "#define \fBsqlite3Isspace\fP(x)   (\fBsqlite3CtypeMap\fP[(unsigned char)(x)]&0x01)"
.br
.ti -1c
.RI "#define \fBsqlite3Isalnum\fP(x)   (\fBsqlite3CtypeMap\fP[(unsigned char)(x)]&0x06)"
.br
.ti -1c
.RI "#define \fBsqlite3Isalpha\fP(x)   (\fBsqlite3CtypeMap\fP[(unsigned char)(x)]&0x02)"
.br
.ti -1c
.RI "#define \fBsqlite3Isdigit\fP(x)   (\fBsqlite3CtypeMap\fP[(unsigned char)(x)]&0x04)"
.br
.ti -1c
.RI "#define \fBsqlite3Isxdigit\fP(x)   (\fBsqlite3CtypeMap\fP[(unsigned char)(x)]&0x08)"
.br
.ti -1c
.RI "#define \fBsqlite3Tolower\fP(x)   (\fBsqlite3UpperToLower\fP[(unsigned char)(x)])"
.br
.ti -1c
.RI "#define \fBsqlite3StrNICmp\fP   sqlite3_strnicmp"
.br
.ti -1c
.RI "#define \fBsqlite3StackAllocRaw\fP(D, N)   sqlite3DbMallocRaw(D,N)"
.br
.ti -1c
.RI "#define \fBsqlite3StackAllocZero\fP(D, N)   sqlite3DbMallocZero(D,N)"
.br
.ti -1c
.RI "#define \fBsqlite3StackFree\fP(D, P)   sqlite3DbFree(D,P)"
.br
.ti -1c
.RI "#define \fBsqlite3ParseToplevel\fP(p)   ((p)->pToplevel ? (p)->pToplevel : (p))"
.br
.ti -1c
.RI "#define \fBgetVarint32\fP(A, B)   (\fBu8\fP)((*(A)<(\fBu8\fP)0x80) ? ((B) = (u32)*(A)),1 : sqlite3GetVarint32((A), (u32 *)&(B)))"
.br
.ti -1c
.RI "#define \fBputVarint32\fP(A, B)   (\fBu8\fP)(((\fBu32\fP)(B)<(\fBu32\fP)0x80) ? (*(A) = (unsigned char)(B)),1 : sqlite3PutVarint32((A), (B)))"
.br
.ti -1c
.RI "#define \fBgetVarint\fP   sqlite3GetVarint"
.br
.ti -1c
.RI "#define \fBputVarint\fP   sqlite3PutVarint"
.br
.ti -1c
.RI "#define \fBsqlite3VtabInSync\fP(\fBdb\fP)   ((\fBdb\fP)->nVTrans>0 && (\fBdb\fP)->aVTrans==0)"
.br
.ti -1c
.RI "#define \fBSQLITE_FAULTINJECTOR_MALLOC\fP   0"
.br
.ti -1c
.RI "#define \fBSQLITE_FAULTINJECTOR_COUNT\fP   1"
.br
.ti -1c
.RI "#define \fBIN_INDEX_ROWID\fP   1"
.br
.ti -1c
.RI "#define \fBIN_INDEX_EPH\fP   2"
.br
.ti -1c
.RI "#define \fBIN_INDEX_INDEX\fP   3"
.br
.ti -1c
.RI "#define \fBsqlite3JournalSize\fP(pVfs)   ((pVfs)->szOsFile)"
.br
.ti -1c
.RI "#define \fBsqlite3ConnectionBlocked\fP(x, y)"
.br
.ti -1c
.RI "#define \fBsqlite3ConnectionUnlocked\fP(x)"
.br
.ti -1c
.RI "#define \fBsqlite3ConnectionClosed\fP(x)"
.br
.ti -1c
.RI "#define \fBIOTRACE\fP(A)"
.br
.ti -1c
.RI "#define \fBsqlite3VdbeIOTraceSql\fP(X)"
.br
.ti -1c
.RI "#define \fBsqlite3MemdebugSetType\fP(X, Y)"
.br
.ti -1c
.RI "#define \fBsqlite3MemdebugHasType\fP(X, Y)   1"
.br
.ti -1c
.RI "#define \fBsqlite3MemdebugNoType\fP(X, Y)   1"
.br
.ti -1c
.RI "#define \fBMEMTYPE_HEAP\fP   0x01"
.br
.ti -1c
.RI "#define \fBMEMTYPE_LOOKASIDE\fP   0x02"
.br
.ti -1c
.RI "#define \fBMEMTYPE_SCRATCH\fP   0x04"
.br
.ti -1c
.RI "#define \fBMEMTYPE_PCACHE\fP   0x08"
.br
.ti -1c
.RI "#define \fBMEMTYPE_DB\fP   0x10"
.br
.ti -1c
.RI "#define \fBCTIMEOPT_VAL_\fP(opt)   #opt"
.br
.ti -1c
.RI "#define \fBCTIMEOPT_VAL\fP(opt)   CTIMEOPT_VAL_(opt)"
.br
.ti -1c
.RI "#define \fBVdbeFrameMem\fP(p)   ((\fBMem\fP *)&((\fBu8\fP *)p)[ROUND8(sizeof(\fBVdbeFrame\fP))])"
.br
.ti -1c
.RI "#define \fBCACHE_STALE\fP   0"
.br
.ti -1c
.RI "#define \fBMEM_Null\fP   0x0001"
.br
.ti -1c
.RI "#define \fBMEM_Str\fP   0x0002"
.br
.ti -1c
.RI "#define \fBMEM_Int\fP   0x0004"
.br
.ti -1c
.RI "#define \fBMEM_Real\fP   0x0008"
.br
.ti -1c
.RI "#define \fBMEM_Blob\fP   0x0010"
.br
.ti -1c
.RI "#define \fBMEM_RowSet\fP   0x0020"
.br
.ti -1c
.RI "#define \fBMEM_Frame\fP   0x0040"
.br
.ti -1c
.RI "#define \fBMEM_Invalid\fP   0x0080"
.br
.ti -1c
.RI "#define \fBMEM_TypeMask\fP   0x00ff"
.br
.ti -1c
.RI "#define \fBMEM_Term\fP   0x0200"
.br
.ti -1c
.RI "#define \fBMEM_Dyn\fP   0x0400"
.br
.ti -1c
.RI "#define \fBMEM_Static\fP   0x0800"
.br
.ti -1c
.RI "#define \fBMEM_Ephem\fP   0x1000"
.br
.ti -1c
.RI "#define \fBMEM_Agg\fP   0x2000"
.br
.ti -1c
.RI "#define \fBMEM_Zero\fP   0x4000"
.br
.ti -1c
.RI "#define \fBMemSetTypeFlag\fP(p, f)   ((p)->flags = ((p)->flags&~(MEM_TypeMask|MEM_Zero))|f)"
.br
.ti -1c
.RI "#define \fBVDBE_MAGIC_INIT\fP   0x26bceaa5"
.br
.ti -1c
.RI "#define \fBVDBE_MAGIC_RUN\fP   0xbdf20da3"
.br
.ti -1c
.RI "#define \fBVDBE_MAGIC_HALT\fP   0x519c2973"
.br
.ti -1c
.RI "#define \fBVDBE_MAGIC_DEAD\fP   0xb606c3c8"
.br
.ti -1c
.RI "#define \fBwsdStatInit\fP"
.br
.ti -1c
.RI "#define \fBwsdStat\fP   \fBsqlite3Stat\fP"
.br
.ti -1c
.RI "#define \fB_SQLITE_OS_C_\fP   1"
.br
.ti -1c
.RI "#define \fBDO_OS_MALLOC_TEST\fP(x)"
.br
.ti -1c
.RI "#define \fBvfsList\fP   GLOBAL(\fBsqlite3_vfs\fP *, \fBvfsList\fP)"
.br
.ti -1c
.RI "#define \fBwsdHooksInit\fP"
.br
.ti -1c
.RI "#define \fBwsdHooks\fP   \fBsqlite3Hooks\fP"
.br
.ti -1c
.RI "#define \fBSQLITE_MUTEX_NREF\fP   0"
.br
.ti -1c
.RI "#define \fBSQLITE3_MUTEX_INITIALIZER\fP   { PTHREAD_MUTEX_INITIALIZER }"
.br
.ti -1c
.RI "#define \fBmem0\fP   GLOBAL(struct \fBMem0Global\fP, \fBmem0\fP)"
.br
.ti -1c
.RI "#define \fBetRADIX\fP   1"
.br
.ti -1c
.RI "#define \fBetFLOAT\fP   2"
.br
.ti -1c
.RI "#define \fBetEXP\fP   3"
.br
.ti -1c
.RI "#define \fBetGENERIC\fP   4"
.br
.ti -1c
.RI "#define \fBetSIZE\fP   5"
.br
.ti -1c
.RI "#define \fBetSTRING\fP   6"
.br
.ti -1c
.RI "#define \fBetDYNSTRING\fP   7"
.br
.ti -1c
.RI "#define \fBetPERCENT\fP   8"
.br
.ti -1c
.RI "#define \fBetCHARX\fP   9"
.br
.ti -1c
.RI "#define \fBetSQLESCAPE\fP   10"
.br
.ti -1c
.RI "#define \fBetSQLESCAPE2\fP   11"
.br
.ti -1c
.RI "#define \fBetTOKEN\fP   12"
.br
.ti -1c
.RI "#define \fBetSRCLIST\fP   13"
.br
.ti -1c
.RI "#define \fBetPOINTER\fP   14"
.br
.ti -1c
.RI "#define \fBetSQLESCAPE3\fP   15"
.br
.ti -1c
.RI "#define \fBetORDINAL\fP   16"
.br
.ti -1c
.RI "#define \fBetINVALID\fP   0"
.br
.ti -1c
.RI "#define \fBFLAG_SIGNED\fP   1"
.br
.ti -1c
.RI "#define \fBFLAG_INTERN\fP   2"
.br
.ti -1c
.RI "#define \fBFLAG_STRING\fP   4"
.br
.ti -1c
.RI "#define \fBSQLITE_PRINT_BUF_SIZE\fP   350"
.br
.ti -1c
.RI "#define \fBetBUFSIZE\fP   SQLITE_PRINT_BUF_SIZE"
.br
.ti -1c
.RI "#define \fBwsdPrng\fP   \fBsqlite3Prng\fP"
.br
.ti -1c
.RI "#define \fBWRITE_UTF8\fP(zOut, c)"
.br
.ti -1c
.RI "#define \fBWRITE_UTF16LE\fP(zOut, c)"
.br
.ti -1c
.RI "#define \fBWRITE_UTF16BE\fP(zOut, c)"
.br
.ti -1c
.RI "#define \fBREAD_UTF16LE\fP(zIn, TERM, c)"
.br
.ti -1c
.RI "#define \fBREAD_UTF16BE\fP(zIn, TERM, c)"
.br
.ti -1c
.RI "#define \fBREAD_UTF8\fP(zIn, zTerm, c)"
.br
.ti -1c
.RI "#define \fBUpperToLower\fP   \fBsqlite3UpperToLower\fP"
.br
.ti -1c
.RI "#define \fBSLOT_2_0\fP   0x001fc07f"
.br
.ti -1c
.RI "#define \fBSLOT_4_2_0\fP   0xf01fc07f"
.br
.ti -1c
.RI "#define \fBSQLITE_ENABLE_LOCKING_STYLE\fP   0"
.br
.ti -1c
.RI "#define \fBOS_VXWORKS\fP   0"
.br
.ti -1c
.RI "#define \fB_LARGE_FILE\fP   1"
.br
.ti -1c
.RI "#define \fB_LARGEFILE_SOURCE\fP   1"
.br
.ti -1c
.RI "#define \fBSQLITE_FSFLAGS_IS_MSDOS\fP   0x1"
.br
.ti -1c
.RI "#define \fBSQLITE_UNIX_THREADS\fP   1"
.br
.ti -1c
.RI "#define \fBSQLITE_DEFAULT_FILE_PERMISSIONS\fP   0644"
.br
.ti -1c
.RI "#define \fBSQLITE_DEFAULT_PROXYDIR_PERMISSIONS\fP   0755"
.br
.ti -1c
.RI "#define \fBMAX_PATHNAME\fP   512"
.br
.ti -1c
.RI "#define \fBIS_LOCK_ERROR\fP(x)   ((x != SQLITE_OK) && (x != SQLITE_BUSY))"
.br
.ti -1c
.RI "#define \fBSQLITE_WHOLE_FILE_LOCKING\fP   0x0001"
.br
.ti -1c
.RI "#define \fBOSTRACE\fP(X)"
.br
.ti -1c
.RI "#define \fBTIMER_START\fP"
.br
.ti -1c
.RI "#define \fBTIMER_END\fP"
.br
.ti -1c
.RI "#define \fBTIMER_ELAPSED\fP   ((\fBsqlite_uint64\fP)0)"
.br
.ti -1c
.RI "#define \fBSimulateIOErrorBenign\fP(X)"
.br
.ti -1c
.RI "#define \fBSimulateIOError\fP(A)"
.br
.ti -1c
.RI "#define \fBSimulateDiskfullError\fP(A)"
.br
.ti -1c
.RI "#define \fBOpenCounter\fP(X)"
.br
.ti -1c
.RI "#define \fBO_LARGEFILE\fP   0"
.br
.ti -1c
.RI "#define \fBO_NOFOLLOW\fP   0"
.br
.ti -1c
.RI "#define \fBO_BINARY\fP   0"
.br
.ti -1c
.RI "#define \fBthreadid\fP   pthread_self()"
.br
.ti -1c
.RI "#define \fBDOTLOCK_SUFFIX\fP   '.lock'"
.br
.ti -1c
.RI "#define \fBfdatasync\fP   fsync"
.br
.ti -1c
.RI "#define \fBHAVE_FULLFSYNC\fP   0"
.br
.ti -1c
.RI "#define \fBUNIX_SHM_BASE\fP   ((22+SQLITE_SHM_NLOCK)*4)"
.br
.ti -1c
.RI "#define \fBUNIX_SHM_DMS\fP   (UNIX_SHM_BASE+SQLITE_SHM_NLOCK)"
.br
.ti -1c
.RI "#define \fBIOMETHODS\fP(FINDER, METHOD, VERSION, CLOSE, LOCK, UNLOCK, CKLOCK)"
.br
.ti -1c
.RI "#define \fBUNIXVFS\fP(VFSNAME, FINDER)"
.br
.ti -1c
.RI "#define \fBBITVEC_SZ\fP   512"
.br
.ti -1c
.RI "#define \fBBITVEC_USIZE\fP   (((BITVEC_SZ-(3*sizeof(\fBu32\fP)))/sizeof(\fBBitvec\fP*))*sizeof(\fBBitvec\fP*))"
.br
.ti -1c
.RI "#define \fBBITVEC_TELEM\fP   \fBu8\fP"
.br
.ti -1c
.RI "#define \fBBITVEC_SZELEM\fP   8"
.br
.ti -1c
.RI "#define \fBBITVEC_NELEM\fP   (BITVEC_USIZE/sizeof(BITVEC_TELEM))"
.br
.ti -1c
.RI "#define \fBBITVEC_NBIT\fP   (BITVEC_NELEM*BITVEC_SZELEM)"
.br
.ti -1c
.RI "#define \fBBITVEC_NINT\fP   (BITVEC_USIZE/sizeof(\fBu32\fP))"
.br
.ti -1c
.RI "#define \fBBITVEC_MXHASH\fP   (BITVEC_NINT/2)"
.br
.ti -1c
.RI "#define \fBBITVEC_HASH\fP(X)   (((X)*1)%BITVEC_NINT)"
.br
.ti -1c
.RI "#define \fBBITVEC_NPTR\fP   (BITVEC_USIZE/sizeof(\fBBitvec\fP *))"
.br
.ti -1c
.RI "#define \fBSETBIT\fP(V, I)   V[I>>3] |= (1<<(I&7))"
.br
.ti -1c
.RI "#define \fBCLEARBIT\fP(V, I)   V[I>>3] &= ~(1<<(I&7))"
.br
.ti -1c
.RI "#define \fBTESTBIT\fP(V, I)   (V[I>>3]&(1<<(I&7)))!=0"
.br
.ti -1c
.RI "#define \fBexpensive_assert\fP(X)"
.br
.ti -1c
.RI "#define \fBN_SORT_BUCKET\fP   32"
.br
.ti -1c
.RI "#define \fBpcache1\fP   (GLOBAL(struct \fBPCacheGlobal\fP, \fBpcache1_g\fP))"
.br
.ti -1c
.RI "#define \fBPGHDR1_TO_PAGE\fP(p)   (void*)(((char*)p) - p->pCache->szPage)"
.br
.ti -1c
.RI "#define \fBPAGE_TO_PGHDR1\fP(c, p)   (\fBPgHdr1\fP*)(((char*)p) + c->szPage)"
.br
.ti -1c
.RI "#define \fBpcache1EnterMutex\fP()   sqlite3_mutex_enter(pcache1.mutex)"
.br
.ti -1c
.RI "#define \fBpcache1LeaveMutex\fP()   sqlite3_mutex_leave(pcache1.mutex)"
.br
.ti -1c
.RI "#define \fBROWSET_ALLOCATION_SIZE\fP   1024"
.br
.ti -1c
.RI "#define \fBROWSET_ENTRY_PER_CHUNK\fP   ((ROWSET_ALLOCATION_SIZE-8)/sizeof(struct \fBRowSetEntry\fP))"
.br
.ti -1c
.RI "#define \fBWAL_SAVEPOINT_NDATA\fP   4"
.br
.ti -1c
.RI "#define \fBPAGERTRACE\fP(X)"
.br
.ti -1c
.RI "#define \fBPAGERID\fP(p)   ((int)(p->fd))"
.br
.ti -1c
.RI "#define \fBFILEHANDLEID\fP(fd)   ((int)fd)"
.br
.ti -1c
.RI "#define \fBPAGER_OPEN\fP   0"
.br
.ti -1c
.RI "#define \fBPAGER_READER\fP   1"
.br
.ti -1c
.RI "#define \fBPAGER_WRITER_LOCKED\fP   2"
.br
.ti -1c
.RI "#define \fBPAGER_WRITER_CACHEMOD\fP   3"
.br
.ti -1c
.RI "#define \fBPAGER_WRITER_DBMOD\fP   4"
.br
.ti -1c
.RI "#define \fBPAGER_WRITER_FINISHED\fP   5"
.br
.ti -1c
.RI "#define \fBPAGER_ERROR\fP   6"
.br
.ti -1c
.RI "#define \fBUNKNOWN_LOCK\fP   (EXCLUSIVE_LOCK+1)"
.br
.ti -1c
.RI "#define \fBCODEC1\fP(P, D, N, X, E)"
.br
.ti -1c
.RI "#define \fBCODEC2\fP(P, D, N, X, E, O)   O=(char*)D"
.br
.ti -1c
.RI "#define \fBMAX_SECTOR_SIZE\fP   0x10000"
.br
.ti -1c
.RI "#define \fBPAGER_INCR\fP(v)"
.br
.ti -1c
.RI "#define \fBJOURNAL_PG_SZ\fP(pPager)   ((pPager->pageSize) + 8)"
.br
.ti -1c
.RI "#define \fBJOURNAL_HDR_SZ\fP(pPager)   (pPager->sectorSize)"
.br
.ti -1c
.RI "#define \fBMEMDB\fP   pPager->memDb"
.br
.ti -1c
.RI "#define \fBPAGER_MAX_PGNO\fP   2147483647"
.br
.ti -1c
.RI "#define \fBisOpen\fP(pFd)   ((pFd)->pMethods)"
.br
.ti -1c
.RI "#define \fBput32bits\fP(A, B)   sqlite3Put4byte((\fBu8\fP*)A,B)"
.br
.ti -1c
.RI "#define \fBpager_datahash\fP(X, Y)   0"
.br
.ti -1c
.RI "#define \fBpager_pagehash\fP(X)   0"
.br
.ti -1c
.RI "#define \fBpager_set_pagehash\fP(X)"
.br
.ti -1c
.RI "#define \fBCHECK_PAGE\fP(x)"
.br
.ti -1c
.RI "#define \fBpagerReportSize\fP(X)"
.br
.ti -1c
.RI "#define \fBdisable_simulated_io_errors\fP()"
.br
.ti -1c
.RI "#define \fBenable_simulated_io_errors\fP()"
.br
.ti -1c
.RI "#define \fBassertTruncateConstraint\fP(pPager)"
.br
.ti -1c
.RI "#define \fBDIRECT_MODE\fP   0"
.br
.ti -1c
.RI "#define \fBWALTRACE\fP(X)"
.br
.ti -1c
.RI "#define \fBWAL_MAX_VERSION\fP   3007000"
.br
.ti -1c
.RI "#define \fBWALINDEX_MAX_VERSION\fP   3007000"
.br
.ti -1c
.RI "#define \fBWAL_WRITE_LOCK\fP   0"
.br
.ti -1c
.RI "#define \fBWAL_ALL_BUT_WRITE\fP   1"
.br
.ti -1c
.RI "#define \fBWAL_CKPT_LOCK\fP   1"
.br
.ti -1c
.RI "#define \fBWAL_RECOVER_LOCK\fP   2"
.br
.ti -1c
.RI "#define \fBWAL_READ_LOCK\fP(I)   (3+(I))"
.br
.ti -1c
.RI "#define \fBWAL_NREADER\fP   (SQLITE_SHM_NLOCK-3)"
.br
.ti -1c
.RI "#define \fBREADMARK_NOT_USED\fP   0xffffffff"
.br
.ti -1c
.RI "#define \fBWALINDEX_LOCK_OFFSET\fP   (sizeof(\fBWalIndexHdr\fP)*2 + sizeof(\fBWalCkptInfo\fP))"
.br
.ti -1c
.RI "#define \fBWALINDEX_LOCK_RESERVED\fP   16"
.br
.ti -1c
.RI "#define \fBWALINDEX_HDR_SIZE\fP   (WALINDEX_LOCK_OFFSET+WALINDEX_LOCK_RESERVED)"
.br
.ti -1c
.RI "#define \fBWAL_FRAME_HDRSIZE\fP   24"
.br
.ti -1c
.RI "#define \fBWAL_HDRSIZE\fP   32"
.br
.ti -1c
.RI "#define \fBWAL_MAGIC\fP   0x377f0682"
.br
.ti -1c
.RI "#define \fBwalFrameOffset\fP(iFrame, szPage)"
.br
.ti -1c
.RI "#define \fBHASHTABLE_NPAGE\fP   4096"
.br
.ti -1c
.RI "#define \fBHASHTABLE_HASH_1\fP   383"
.br
.ti -1c
.RI "#define \fBHASHTABLE_NSLOT\fP   (HASHTABLE_NPAGE*2)"
.br
.ti -1c
.RI "#define \fBHASHTABLE_NPAGE_ONE\fP   (HASHTABLE_NPAGE - (WALINDEX_HDR_SIZE/sizeof(\fBu32\fP)))"
.br
.ti -1c
.RI "#define \fBWALINDEX_PGSZ\fP"
.br
.ti -1c
.RI "#define \fBBYTESWAP32\fP(x)"
.br
.ti -1c
.RI "#define \fBWAL_RETRY\fP   (-1)"
.br
.ti -1c
.RI "#define \fBMX_CELL_SIZE\fP(pBt)   (pBt->pageSize-8)"
.br
.ti -1c
.RI "#define \fBMX_CELL\fP(pBt)   ((pBt->pageSize-8)/6)"
.br
.ti -1c
.RI "#define \fBSQLITE_FILE_HEADER\fP   'SQLite format 3'"
.br
.ti -1c
.RI "#define \fBPTF_INTKEY\fP   0x01"
.br
.ti -1c
.RI "#define \fBPTF_ZERODATA\fP   0x02"
.br
.ti -1c
.RI "#define \fBPTF_LEAFDATA\fP   0x04"
.br
.ti -1c
.RI "#define \fBPTF_LEAF\fP   0x08"
.br
.ti -1c
.RI "#define \fBEXTRA_SIZE\fP   sizeof(\fBMemPage\fP)"
.br
.ti -1c
.RI "#define \fBREAD_LOCK\fP   1"
.br
.ti -1c
.RI "#define \fBWRITE_LOCK\fP   2"
.br
.ti -1c
.RI "#define \fBTRANS_NONE\fP   0"
.br
.ti -1c
.RI "#define \fBTRANS_READ\fP   1"
.br
.ti -1c
.RI "#define \fBTRANS_WRITE\fP   2"
.br
.ti -1c
.RI "#define \fBBTCURSOR_MAX_DEPTH\fP   20"
.br
.ti -1c
.RI "#define \fBCURSOR_INVALID\fP   0"
.br
.ti -1c
.RI "#define \fBCURSOR_VALID\fP   1"
.br
.ti -1c
.RI "#define \fBCURSOR_REQUIRESEEK\fP   2"
.br
.ti -1c
.RI "#define \fBCURSOR_FAULT\fP   3"
.br
.ti -1c
.RI "#define \fBPENDING_BYTE_PAGE\fP(pBt)   PAGER_MJ_PGNO(pBt)"
.br
.ti -1c
.RI "#define \fBPTRMAP_PAGENO\fP(pBt, pgno)   ptrmapPageno(pBt, pgno)"
.br
.ti -1c
.RI "#define \fBPTRMAP_PTROFFSET\fP(pgptrmap, pgno)   (5*(pgno-pgptrmap-1))"
.br
.ti -1c
.RI "#define \fBPTRMAP_ISPAGE\fP(pBt, pgno)   (PTRMAP_PAGENO((pBt),(pgno))==(pgno))"
.br
.ti -1c
.RI "#define \fBPTRMAP_ROOTPAGE\fP   1"
.br
.ti -1c
.RI "#define \fBPTRMAP_FREEPAGE\fP   2"
.br
.ti -1c
.RI "#define \fBPTRMAP_OVERFLOW1\fP   3"
.br
.ti -1c
.RI "#define \fBPTRMAP_OVERFLOW2\fP   4"
.br
.ti -1c
.RI "#define \fBPTRMAP_BTREE\fP   5"
.br
.ti -1c
.RI "#define \fBbtreeIntegrity\fP(p)"
.br
.ti -1c
.RI "#define \fBISAUTOVACUUM\fP   (pBt->autoVacuum)"
.br
.ti -1c
.RI "#define \fBget2byte\fP(x)   ((x)[0]<<8 | (x)[1])"
.br
.ti -1c
.RI "#define \fBput2byte\fP(p, v)   ((p)[0] = (\fBu8\fP)((v)>>8), (p)[1] = (\fBu8\fP)(v))"
.br
.ti -1c
.RI "#define \fBget4byte\fP   sqlite3Get4byte"
.br
.ti -1c
.RI "#define \fBput4byte\fP   sqlite3Put4byte"
.br
.ti -1c
.RI "#define \fBTRACE\fP(X)"
.br
.ti -1c
.RI "#define \fBget2byteNotZero\fP(X)   (((((int)get2byte(X))-1)&0xffff)+1)"
.br
.ti -1c
.RI "#define \fBrestoreCursorPosition\fP(p)"
.br
.ti -1c
.RI "#define \fBfindCell\fP(P, I)   ((P)->aData + ((P)->maskPage & get2byte(&(P)->aData[(P)->cellOffset+2*(I)])))"
.br
.ti -1c
.RI "#define \fBparseCell\fP(pPage, iCell, pInfo)   btreeParseCellPtr((pPage), findCell((pPage), (iCell)), (pInfo))"
.br
.ti -1c
.RI "#define \fBassertCellInfo\fP(x)"
.br
.ti -1c
.RI "#define \fBgetCellInfo\fP(pCur)"
.br
.ti -1c
.RI "#define \fBassertParentIndex\fP(x, y, z)"
.br
.ti -1c
.RI "#define \fBNN\fP   1"
.br
.ti -1c
.RI "#define \fBNB\fP   (NN*2+1)"
.br
.ti -1c
.RI "#define \fBMIN\fP(x, y)   ((x)<(y)?(x):(y))"
.br
.ti -1c
.RI "#define \fBexpandBlob\fP(P)   (((P)->flags&MEM_Zero)?sqlite3VdbeMemExpandBlob(P):0)"
.br
.ti -1c
.RI "#define \fBMEMCELLSIZE\fP   (size_t)(&(((\fBMem\fP *)0)->zMalloc))"
.br
.ti -1c
.RI "#define \fBcheckActiveVdbeCnt\fP(x)"
.br
.ti -1c
.RI "#define \fBMAX_6BYTE\fP   ((((\fBi64\fP)0x00008000)<<32)-1)"
.br
.ti -1c
.RI "#define \fBswapMixedEndianFloat\fP(X)"
.br
.ti -1c
.RI "#define \fBmemAboutToChange\fP(P, M)"
.br
.ti -1c
.RI "#define \fBUPDATE_MAX_BLOBSIZE\fP(P)"
.br
.ti -1c
.RI "#define \fBStringify\fP(P, enc)"
.br
.ti -1c
.RI "#define \fBDeephemeralize\fP(P)"
.br
.ti -1c
.RI "#define \fBExpandBlob\fP(P)   (((P)->flags&MEM_Zero)?sqlite3VdbeMemExpandBlob(P):0)"
.br
.ti -1c
.RI "#define \fBREGISTER_TRACE\fP(R, M)"
.br
.ti -1c
.RI "#define \fBCHECK_FOR_INTERRUPT\fP   if( \fBdb\fP->u1.isInterrupted ) goto abort_due_to_interrupt;"
.br
.ti -1c
.RI "#define \fBMAX_ROWID\fP   (\fBi64\fP)( (((\fBu64\fP)0x7fffffff)<<32) | (u64)0xffffffff )"
.br
.ti -1c
.RI "#define \fBJOURNAL_CHUNKSIZE\fP   ((int)(1024-sizeof(\fBFileChunk\fP*)))"
.br
.ti -1c
.RI "#define \fBSAVE_SZ\fP   (sizeof(\fBParse\fP) - offsetof(\fBParse\fP,nVar))"
.br
.ti -1c
.RI "#define \fBSTRICMP\fP(x, y)"
.br
.ti -1c
.RI "#define \fBifnullFunc\fP   versionFunc"
.br
.ti -1c
.RI "#define \fBGlogUpperToLower\fP(A)   if( A<0x80 ){ A = sqlite3UpperToLower[A]; }"
.br
.ti -1c
.RI "#define \fBCOLUMN_MASK\fP(x)   (((x)>31) ? 0xffffffff : ((u32)1<<(x)))"
.br
.ti -1c
.RI "#define \fBSQLITE_EXTENSION_INIT1\fP   const \fBsqlite3_api_routines\fP *sqlite3_api = 0;"
.br
.ti -1c
.RI "#define \fBSQLITE_EXTENSION_INIT2\fP(v)   sqlite3_api = v;"
.br
.ti -1c
.RI "#define \fBsqlite3_column_database_name\fP   0"
.br
.ti -1c
.RI "#define \fBsqlite3_column_database_name16\fP   0"
.br
.ti -1c
.RI "#define \fBsqlite3_column_table_name\fP   0"
.br
.ti -1c
.RI "#define \fBsqlite3_column_table_name16\fP   0"
.br
.ti -1c
.RI "#define \fBsqlite3_column_origin_name\fP   0"
.br
.ti -1c
.RI "#define \fBsqlite3_column_origin_name16\fP   0"
.br
.ti -1c
.RI "#define \fBsqlite3_table_column_metadata\fP   0"
.br
.ti -1c
.RI "#define \fBwsdAutoextInit\fP"
.br
.ti -1c
.RI "#define \fBwsdAutoext\fP   \fBsqlite3Autoext\fP"
.br
.ti -1c
.RI "#define \fBSQLITE_INTEGRITY_CHECK_ERROR_MAX\fP   100"
.br
.ti -1c
.RI "#define \fBWHERETRACE\fP(X)"
.br
.ti -1c
.RI "#define \fBTERM_DYNAMIC\fP   0x01"
.br
.ti -1c
.RI "#define \fBTERM_VIRTUAL\fP   0x02"
.br
.ti -1c
.RI "#define \fBTERM_CODED\fP   0x04"
.br
.ti -1c
.RI "#define \fBTERM_COPIED\fP   0x08"
.br
.ti -1c
.RI "#define \fBTERM_ORINFO\fP   0x10"
.br
.ti -1c
.RI "#define \fBTERM_ANDINFO\fP   0x20"
.br
.ti -1c
.RI "#define \fBTERM_OR_OK\fP   0x40"
.br
.ti -1c
.RI "#define \fBWO_IN\fP   0x001"
.br
.ti -1c
.RI "#define \fBWO_EQ\fP   0x002"
.br
.ti -1c
.RI "#define \fBWO_LT\fP   (WO_EQ<<(TK_LT-TK_EQ))"
.br
.ti -1c
.RI "#define \fBWO_LE\fP   (WO_EQ<<(TK_LE-TK_EQ))"
.br
.ti -1c
.RI "#define \fBWO_GT\fP   (WO_EQ<<(TK_GT-TK_EQ))"
.br
.ti -1c
.RI "#define \fBWO_GE\fP   (WO_EQ<<(TK_GE-TK_EQ))"
.br
.ti -1c
.RI "#define \fBWO_MATCH\fP   0x040"
.br
.ti -1c
.RI "#define \fBWO_ISNULL\fP   0x080"
.br
.ti -1c
.RI "#define \fBWO_OR\fP   0x100"
.br
.ti -1c
.RI "#define \fBWO_AND\fP   0x200"
.br
.ti -1c
.RI "#define \fBWO_ALL\fP   0xfff"
.br
.ti -1c
.RI "#define \fBWO_SINGLE\fP   0x0ff"
.br
.ti -1c
.RI "#define \fBWHERE_ROWID_EQ\fP   0x00001000"
.br
.ti -1c
.RI "#define \fBWHERE_ROWID_RANGE\fP   0x00002000"
.br
.ti -1c
.RI "#define \fBWHERE_COLUMN_EQ\fP   0x00010000"
.br
.ti -1c
.RI "#define \fBWHERE_COLUMN_RANGE\fP   0x00020000"
.br
.ti -1c
.RI "#define \fBWHERE_COLUMN_IN\fP   0x00040000"
.br
.ti -1c
.RI "#define \fBWHERE_COLUMN_NULL\fP   0x00080000"
.br
.ti -1c
.RI "#define \fBWHERE_INDEXED\fP   0x000f0000"
.br
.ti -1c
.RI "#define \fBWHERE_NOT_FULLSCAN\fP   0x000f3000"
.br
.ti -1c
.RI "#define \fBWHERE_IN_ABLE\fP   0x000f1000"
.br
.ti -1c
.RI "#define \fBWHERE_TOP_LIMIT\fP   0x00100000"
.br
.ti -1c
.RI "#define \fBWHERE_BTM_LIMIT\fP   0x00200000"
.br
.ti -1c
.RI "#define \fBWHERE_IDX_ONLY\fP   0x00800000"
.br
.ti -1c
.RI "#define \fBWHERE_ORDERBY\fP   0x01000000"
.br
.ti -1c
.RI "#define \fBWHERE_REVERSE\fP   0x02000000"
.br
.ti -1c
.RI "#define \fBWHERE_UNIQUE\fP   0x04000000"
.br
.ti -1c
.RI "#define \fBWHERE_VIRTUALTABLE\fP   0x08000000"
.br
.ti -1c
.RI "#define \fBWHERE_MULTI_OR\fP   0x10000000"
.br
.ti -1c
.RI "#define \fBWHERE_TEMP_INDEX\fP   0x20000000"
.br
.ti -1c
.RI "#define \fBinitMaskSet\fP(P)   memset(P, 0, sizeof(*P))"
.br
.ti -1c
.RI "#define \fBSWAP\fP(TYPE, A, B)   {TYPE t=A; A=B; B=t;}"
.br
.ti -1c
.RI "#define \fBTRACE_IDX_INPUTS\fP(A)"
.br
.ti -1c
.RI "#define \fBTRACE_IDX_OUTPUTS\fP(A)"
.br
.ti -1c
.RI "#define \fBYYNOERRORRECOVERY\fP   1"
.br
.ti -1c
.RI "#define \fByytestcase\fP(X)   testcase(X)"
.br
.ti -1c
.RI "#define \fBINTERFACE\fP   1"
.br
.ti -1c
.RI "#define \fBYYCODETYPE\fP   unsigned char"
.br
.ti -1c
.RI "#define \fBYYNOCODE\fP   253"
.br
.ti -1c
.RI "#define \fBYYACTIONTYPE\fP   unsigned short int"
.br
.ti -1c
.RI "#define \fBYYWILDCARD\fP   67"
.br
.ti -1c
.RI "#define \fBsqlite3ParserTOKENTYPE\fP   \fBToken\fP"
.br
.ti -1c
.RI "#define \fBYYSTACKDEPTH\fP   100"
.br
.ti -1c
.RI "#define \fBsqlite3ParserARG_SDECL\fP   \fBParse\fP *pParse;"
.br
.ti -1c
.RI "#define \fBsqlite3ParserARG_PDECL\fP   ,\fBParse\fP *pParse"
.br
.ti -1c
.RI "#define \fBsqlite3ParserARG_FETCH\fP   \fBParse\fP *pParse = yypParser->pParse"
.br
.ti -1c
.RI "#define \fBsqlite3ParserARG_STORE\fP   yypParser->pParse = pParse"
.br
.ti -1c
.RI "#define \fBYYNSTATE\fP   630"
.br
.ti -1c
.RI "#define \fBYYNRULE\fP   329"
.br
.ti -1c
.RI "#define \fBYYFALLBACK\fP   1"
.br
.ti -1c
.RI "#define \fBYY_NO_ACTION\fP   (YYNSTATE+YYNRULE+2)"
.br
.ti -1c
.RI "#define \fBYY_ACCEPT_ACTION\fP   (YYNSTATE+YYNRULE+1)"
.br
.ti -1c
.RI "#define \fBYY_ERROR_ACTION\fP   (YYNSTATE+YYNRULE)"
.br
.ti -1c
.RI "#define \fBYY_ACTTAB_COUNT\fP   (1557)"
.br
.ti -1c
.RI "#define \fBYY_SHIFT_USE_DFLT\fP   (-74)"
.br
.ti -1c
.RI "#define \fBYY_SHIFT_COUNT\fP   (418)"
.br
.ti -1c
.RI "#define \fBYY_SHIFT_MIN\fP   (-73)"
.br
.ti -1c
.RI "#define \fBYY_SHIFT_MAX\fP   (1468)"
.br
.ti -1c
.RI "#define \fBYY_REDUCE_USE_DFLT\fP   (-142)"
.br
.ti -1c
.RI "#define \fBYY_REDUCE_COUNT\fP   (312)"
.br
.ti -1c
.RI "#define \fBYY_REDUCE_MIN\fP   (-141)"
.br
.ti -1c
.RI "#define \fBYY_REDUCE_MAX\fP   (1369)"
.br
.ti -1c
.RI "#define \fBTOKEN\fP   (yyminor.yy0)"
.br
.ti -1c
.RI "#define \fBcharMap\fP(X)   \fBsqlite3UpperToLower\fP[(unsigned char)X]"
.br
.ti -1c
.RI "#define \fBSQLITE_N_KEYWORD\fP   121"
.br
.ti -1c
.RI "#define \fBIdChar\fP(C)   ((\fBsqlite3CtypeMap\fP[(unsigned char)C]&0x46)!=0)"
.br
.ti -1c
.RI "#define \fBtkSEMI\fP   0"
.br
.ti -1c
.RI "#define \fBtkWS\fP   1"
.br
.ti -1c
.RI "#define \fBtkOTHER\fP   2"
.br
.ti -1c
.RI "#define \fBtkEXPLAIN\fP   3"
.br
.ti -1c
.RI "#define \fBtkCREATE\fP   4"
.br
.ti -1c
.RI "#define \fBtkTEMP\fP   5"
.br
.ti -1c
.RI "#define \fBtkTRIGGER\fP   6"
.br
.ti -1c
.RI "#define \fBtkEND\fP   7"
.br
.in -1c
.SS "Typedefs"

.in +1c
.ti -1c
.RI "typedef \fBsqlite3\fP \fBsqlite3\fP"
.br
.ti -1c
.RI "typedef long long int \fBsqlite_int64\fP"
.br
.ti -1c
.RI "typedef unsigned long long int \fBsqlite_uint64\fP"
.br
.ti -1c
.RI "typedef \fBsqlite_int64\fP \fBsqlite3_int64\fP"
.br
.ti -1c
.RI "typedef \fBsqlite_uint64\fP \fBsqlite3_uint64\fP"
.br
.ti -1c
.RI "typedef int(*) \fBsqlite3_callback\fP (void *, int, char **, char **)"
.br
.ti -1c
.RI "typedef \fBsqlite3_file\fP \fBsqlite3_file\fP"
.br
.ti -1c
.RI "typedef \fBsqlite3_io_methods\fP \fBsqlite3_io_methods\fP"
.br
.ti -1c
.RI "typedef \fBsqlite3_mutex\fP \fBsqlite3_mutex\fP"
.br
.ti -1c
.RI "typedef \fBsqlite3_vfs\fP \fBsqlite3_vfs\fP"
.br
.ti -1c
.RI "typedef \fBsqlite3_mem_methods\fP \fBsqlite3_mem_methods\fP"
.br
.ti -1c
.RI "typedef \fBsqlite3_stmt\fP \fBsqlite3_stmt\fP"
.br
.ti -1c
.RI "typedef \fBMem\fP \fBsqlite3_value\fP"
.br
.ti -1c
.RI "typedef \fBsqlite3_context\fP \fBsqlite3_context\fP"
.br
.ti -1c
.RI "typedef void(*) \fBsqlite3_destructor_type\fP (void *)"
.br
.ti -1c
.RI "typedef \fBsqlite3_vtab\fP \fBsqlite3_vtab\fP"
.br
.ti -1c
.RI "typedef \fBsqlite3_index_info\fP \fBsqlite3_index_info\fP"
.br
.ti -1c
.RI "typedef \fBsqlite3_vtab_cursor\fP \fBsqlite3_vtab_cursor\fP"
.br
.ti -1c
.RI "typedef \fBsqlite3_module\fP \fBsqlite3_module\fP"
.br
.ti -1c
.RI "typedef \fBsqlite3_blob\fP \fBsqlite3_blob\fP"
.br
.ti -1c
.RI "typedef \fBsqlite3_mutex_methods\fP \fBsqlite3_mutex_methods\fP"
.br
.ti -1c
.RI "typedef \fBsqlite3_pcache\fP \fBsqlite3_pcache\fP"
.br
.ti -1c
.RI "typedef \fBsqlite3_pcache_methods\fP \fBsqlite3_pcache_methods\fP"
.br
.ti -1c
.RI "typedef \fBsqlite3_backup\fP \fBsqlite3_backup\fP"
.br
.ti -1c
.RI "typedef \fBsqlite3_rtree_geometry\fP \fBsqlite3_rtree_geometry\fP"
.br
.ti -1c
.RI "typedef \fBHash\fP \fBHash\fP"
.br
.ti -1c
.RI "typedef \fBHashElem\fP \fBHashElem\fP"
.br
.ti -1c
.RI "typedef \fBsqlite_int64\fP \fBi64\fP"
.br
.ti -1c
.RI "typedef \fBsqlite_uint64\fP \fBu64\fP"
.br
.ti -1c
.RI "typedef UINT32_TYPE \fBu32\fP"
.br
.ti -1c
.RI "typedef UINT16_TYPE \fBu16\fP"
.br
.ti -1c
.RI "typedef INT16_TYPE \fBi16\fP"
.br
.ti -1c
.RI "typedef UINT8_TYPE \fBu8\fP"
.br
.ti -1c
.RI "typedef INT8_TYPE \fBi8\fP"
.br
.ti -1c
.RI "typedef \fBBusyHandler\fP \fBBusyHandler\fP"
.br
.ti -1c
.RI "typedef \fBAggInfo\fP \fBAggInfo\fP"
.br
.ti -1c
.RI "typedef \fBAuthContext\fP \fBAuthContext\fP"
.br
.ti -1c
.RI "typedef \fBAutoincInfo\fP \fBAutoincInfo\fP"
.br
.ti -1c
.RI "typedef \fBBitvec\fP \fBBitvec\fP"
.br
.ti -1c
.RI "typedef \fBCollSeq\fP \fBCollSeq\fP"
.br
.ti -1c
.RI "typedef \fBColumn\fP \fBColumn\fP"
.br
.ti -1c
.RI "typedef \fBDb\fP \fBDb\fP"
.br
.ti -1c
.RI "typedef \fBSchema\fP \fBSchema\fP"
.br
.ti -1c
.RI "typedef \fBExpr\fP \fBExpr\fP"
.br
.ti -1c
.RI "typedef \fBExprList\fP \fBExprList\fP"
.br
.ti -1c
.RI "typedef \fBExprSpan\fP \fBExprSpan\fP"
.br
.ti -1c
.RI "typedef \fBFKey\fP \fBFKey\fP"
.br
.ti -1c
.RI "typedef \fBFuncDestructor\fP \fBFuncDestructor\fP"
.br
.ti -1c
.RI "typedef \fBFuncDef\fP \fBFuncDef\fP"
.br
.ti -1c
.RI "typedef \fBFuncDefHash\fP \fBFuncDefHash\fP"
.br
.ti -1c
.RI "typedef \fBIdList\fP \fBIdList\fP"
.br
.ti -1c
.RI "typedef \fBIndex\fP \fBIndex\fP"
.br
.ti -1c
.RI "typedef \fBIndexSample\fP \fBIndexSample\fP"
.br
.ti -1c
.RI "typedef \fBKeyClass\fP \fBKeyClass\fP"
.br
.ti -1c
.RI "typedef \fBKeyInfo\fP \fBKeyInfo\fP"
.br
.ti -1c
.RI "typedef \fBLookaside\fP \fBLookaside\fP"
.br
.ti -1c
.RI "typedef \fBLookasideSlot\fP \fBLookasideSlot\fP"
.br
.ti -1c
.RI "typedef \fBModule\fP \fBModule\fP"
.br
.ti -1c
.RI "typedef \fBNameContext\fP \fBNameContext\fP"
.br
.ti -1c
.RI "typedef \fBParse\fP \fBParse\fP"
.br
.ti -1c
.RI "typedef \fBRowSet\fP \fBRowSet\fP"
.br
.ti -1c
.RI "typedef \fBSavepoint\fP \fBSavepoint\fP"
.br
.ti -1c
.RI "typedef \fBSelect\fP \fBSelect\fP"
.br
.ti -1c
.RI "typedef \fBSrcList\fP \fBSrcList\fP"
.br
.ti -1c
.RI "typedef \fBStrAccum\fP \fBStrAccum\fP"
.br
.ti -1c
.RI "typedef \fBTable\fP \fBTable\fP"
.br
.ti -1c
.RI "typedef \fBTableLock\fP \fBTableLock\fP"
.br
.ti -1c
.RI "typedef \fBToken\fP \fBToken\fP"
.br
.ti -1c
.RI "typedef \fBTrigger\fP \fBTrigger\fP"
.br
.ti -1c
.RI "typedef \fBTriggerPrg\fP \fBTriggerPrg\fP"
.br
.ti -1c
.RI "typedef \fBTriggerStep\fP \fBTriggerStep\fP"
.br
.ti -1c
.RI "typedef \fBUnpackedRecord\fP \fBUnpackedRecord\fP"
.br
.ti -1c
.RI "typedef \fBVTable\fP \fBVTable\fP"
.br
.ti -1c
.RI "typedef \fBWalker\fP \fBWalker\fP"
.br
.ti -1c
.RI "typedef \fBWherePlan\fP \fBWherePlan\fP"
.br
.ti -1c
.RI "typedef \fBWhereInfo\fP \fBWhereInfo\fP"
.br
.ti -1c
.RI "typedef \fBWhereLevel\fP \fBWhereLevel\fP"
.br
.ti -1c
.RI "typedef \fBBtree\fP \fBBtree\fP"
.br
.ti -1c
.RI "typedef \fBBtCursor\fP \fBBtCursor\fP"
.br
.ti -1c
.RI "typedef \fBBtShared\fP \fBBtShared\fP"
.br
.ti -1c
.RI "typedef \fBBtreeMutexArray\fP \fBBtreeMutexArray\fP"
.br
.ti -1c
.RI "typedef \fBVdbe\fP \fBVdbe\fP"
.br
.ti -1c
.RI "typedef \fBVdbeFunc\fP \fBVdbeFunc\fP"
.br
.ti -1c
.RI "typedef \fBMem\fP \fBMem\fP"
.br
.ti -1c
.RI "typedef \fBSubProgram\fP \fBSubProgram\fP"
.br
.ti -1c
.RI "typedef \fBVdbeOp\fP \fBVdbeOp\fP"
.br
.ti -1c
.RI "typedef \fBVdbeOpList\fP \fBVdbeOpList\fP"
.br
.ti -1c
.RI "typedef \fBu32\fP \fBPgno\fP"
.br
.ti -1c
.RI "typedef \fBPager\fP \fBPager\fP"
.br
.ti -1c
.RI "typedef \fBPgHdr\fP \fBDbPage\fP"
.br
.ti -1c
.RI "typedef \fBPgHdr\fP \fBPgHdr\fP"
.br
.ti -1c
.RI "typedef \fBPCache\fP \fBPCache\fP"
.br
.ti -1c
.RI "typedef \fBi16\fP \fBynVar\fP"
.br
.ti -1c
.RI "typedef \fBu64\fP \fBBitmask\fP"
.br
.ti -1c
.RI "typedef \fBSelectDest\fP \fBSelectDest\fP"
.br
.ti -1c
.RI "typedef \fBDbFixer\fP \fBDbFixer\fP"
.br
.ti -1c
.RI "typedef \fBVdbeOp\fP \fBOp\fP"
.br
.ti -1c
.RI "typedef unsigned char \fBBool\fP"
.br
.ti -1c
.RI "typedef \fBVdbeCursor\fP \fBVdbeCursor\fP"
.br
.ti -1c
.RI "typedef \fBVdbeFrame\fP \fBVdbeFrame\fP"
.br
.ti -1c
.RI "typedef \fBSet\fP \fBSet\fP"
.br
.ti -1c
.RI "typedef \fBsqlite3StatType\fP \fBsqlite3StatType\fP"
.br
.ti -1c
.RI "typedef \fBDateTime\fP \fBDateTime\fP"
.br
.ti -1c
.RI "typedef \fBBenignMallocHooks\fP \fBBenignMallocHooks\fP"
.br
.ti -1c
.RI "typedef unsigned char \fBetByte\fP"
.br
.ti -1c
.RI "typedef \fBunixShm\fP \fBunixShm\fP"
.br
.ti -1c
.RI "typedef \fBunixShmNode\fP \fBunixShmNode\fP"
.br
.ti -1c
.RI "typedef \fBunixInodeInfo\fP \fBunixInodeInfo\fP"
.br
.ti -1c
.RI "typedef \fBUnixUnusedFd\fP \fBUnixUnusedFd\fP"
.br
.ti -1c
.RI "typedef \fBunixFile\fP \fBunixFile\fP"
.br
.ti -1c
.RI "typedef \fBPCache1\fP \fBPCache1\fP"
.br
.ti -1c
.RI "typedef \fBPgHdr1\fP \fBPgHdr1\fP"
.br
.ti -1c
.RI "typedef \fBPgFreeslot\fP \fBPgFreeslot\fP"
.br
.ti -1c
.RI "typedef \fBWal\fP \fBWal\fP"
.br
.ti -1c
.RI "typedef \fBPagerSavepoint\fP \fBPagerSavepoint\fP"
.br
.ti -1c
.RI "typedef \fBWalIndexHdr\fP \fBWalIndexHdr\fP"
.br
.ti -1c
.RI "typedef \fBWalIterator\fP \fBWalIterator\fP"
.br
.ti -1c
.RI "typedef \fBWalCkptInfo\fP \fBWalCkptInfo\fP"
.br
.ti -1c
.RI "typedef \fBu16\fP \fBht_slot\fP"
.br
.ti -1c
.RI "typedef \fBMemPage\fP \fBMemPage\fP"
.br
.ti -1c
.RI "typedef \fBBtLock\fP \fBBtLock\fP"
.br
.ti -1c
.RI "typedef \fBCellInfo\fP \fBCellInfo\fP"
.br
.ti -1c
.RI "typedef \fBIntegrityCk\fP \fBIntegrityCk\fP"
.br
.ti -1c
.RI "typedef \fBIncrblob\fP \fBIncrblob\fP"
.br
.ti -1c
.RI "typedef \fBMemJournal\fP \fBMemJournal\fP"
.br
.ti -1c
.RI "typedef \fBFilePoint\fP \fBFilePoint\fP"
.br
.ti -1c
.RI "typedef \fBFileChunk\fP \fBFileChunk\fP"
.br
.ti -1c
.RI "typedef \fBanalysisInfo\fP \fBanalysisInfo\fP"
.br
.ti -1c
.RI "typedef \fBSumCtx\fP \fBSumCtx\fP"
.br
.ti -1c
.RI "typedef \fBCountCtx\fP \fBCountCtx\fP"
.br
.ti -1c
.RI "typedef \fBsqlite3_api_routines\fP \fBsqlite3_api_routines\fP"
.br
.ti -1c
.RI "typedef \fBsqlite3AutoExtList\fP \fBsqlite3AutoExtList\fP"
.br
.ti -1c
.RI "typedef \fBWhereClause\fP \fBWhereClause\fP"
.br
.ti -1c
.RI "typedef \fBWhereMaskSet\fP \fBWhereMaskSet\fP"
.br
.ti -1c
.RI "typedef \fBWhereOrInfo\fP \fBWhereOrInfo\fP"
.br
.ti -1c
.RI "typedef \fBWhereAndInfo\fP \fBWhereAndInfo\fP"
.br
.ti -1c
.RI "typedef \fBWhereCost\fP \fBWhereCost\fP"
.br
.ti -1c
.RI "typedef \fBWhereTerm\fP \fBWhereTerm\fP"
.br
.ti -1c
.RI "typedef \fByyStackEntry\fP \fByyStackEntry\fP"
.br
.ti -1c
.RI "typedef \fByyParser\fP \fByyParser\fP"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "SQLITE_API const char * \fBsqlite3_libversion\fP (void)"
.br
.ti -1c
.RI "SQLITE_API const char * \fBsqlite3_sourceid\fP (void)"
.br
.ti -1c
.RI "SQLITE_API int \fBsqlite3_libversion_number\fP (void)"
.br
.ti -1c
.RI "SQLITE_API int \fBsqlite3_compileoption_used\fP (const char *zOptName)"
.br
.ti -1c
.RI "SQLITE_API const char * \fBsqlite3_compileoption_get\fP (int N)"
.br
.ti -1c
.RI "SQLITE_API int \fBsqlite3_threadsafe\fP (void)"
.br
.ti -1c
.RI "SQLITE_API int \fBsqlite3_close\fP (\fBsqlite3\fP *)"
.br
.ti -1c
.RI "SQLITE_API int \fBsqlite3_exec\fP (\fBsqlite3\fP *, const char *sql, int(*callback)(void *, int, char **, char **), void *, char **errmsg)"
.br
.ti -1c
.RI "SQLITE_API int \fBsqlite3_initialize\fP (void)"
.br
.ti -1c
.RI "SQLITE_API int \fBsqlite3_shutdown\fP (void)"
.br
.ti -1c
.RI "SQLITE_API int \fBsqlite3_os_init\fP (void)"
.br
.ti -1c
.RI "SQLITE_API int \fBsqlite3_os_end\fP (void)"
.br
.ti -1c
.RI "SQLITE_API int \fBsqlite3_config\fP (int,...)"
.br
.ti -1c
.RI "SQLITE_API int \fBsqlite3_db_config\fP (\fBsqlite3\fP *, int op,...)"
.br
.ti -1c
.RI "SQLITE_API int \fBsqlite3_extended_result_codes\fP (\fBsqlite3\fP *, int onoff)"
.br
.ti -1c
.RI "SQLITE_API \fBsqlite3_int64\fP \fBsqlite3_last_insert_rowid\fP (\fBsqlite3\fP *)"
.br
.ti -1c
.RI "SQLITE_API int \fBsqlite3_changes\fP (\fBsqlite3\fP *)"
.br
.ti -1c
.RI "SQLITE_API int \fBsqlite3_total_changes\fP (\fBsqlite3\fP *)"
.br
.ti -1c
.RI "SQLITE_API void \fBsqlite3_interrupt\fP (\fBsqlite3\fP *)"
.br
.ti -1c
.RI "SQLITE_API int \fBsqlite3_complete\fP (const char *sql)"
.br
.ti -1c
.RI "SQLITE_API int \fBsqlite3_complete16\fP (const void *sql)"
.br
.ti -1c
.RI "SQLITE_API int \fBsqlite3_busy_handler\fP (\fBsqlite3\fP *, int(*)(void *, int), void *)"
.br
.ti -1c
.RI "SQLITE_API int \fBsqlite3_busy_timeout\fP (\fBsqlite3\fP *, int ms)"
.br
.ti -1c
.RI "SQLITE_API int \fBsqlite3_get_table\fP (\fBsqlite3\fP *\fBdb\fP, const char *zSql, char ***pazResult, int *pnRow, int *pnColumn, char **pzErrmsg)"
.br
.ti -1c
.RI "SQLITE_API void \fBsqlite3_free_table\fP (char **result)"
.br
.ti -1c
.RI "SQLITE_API char * \fBsqlite3_mprintf\fP (const char *,...)"
.br
.ti -1c
.RI "SQLITE_API char * \fBsqlite3_vmprintf\fP (const char *, va_list)"
.br
.ti -1c
.RI "SQLITE_API char * \fBsqlite3_snprintf\fP (int, char *, const char *,...)"
.br
.ti -1c
.RI "SQLITE_API void * \fBsqlite3_malloc\fP (int)"
.br
.ti -1c
.RI "SQLITE_API void * \fBsqlite3_realloc\fP (void *, int)"
.br
.ti -1c
.RI "SQLITE_API void \fBsqlite3_free\fP (void *)"
.br
.ti -1c
.RI "SQLITE_API \fBsqlite3_int64\fP \fBsqlite3_memory_used\fP (void)"
.br
.ti -1c
.RI "SQLITE_API \fBsqlite3_int64\fP \fBsqlite3_memory_highwater\fP (int resetFlag)"
.br
.ti -1c
.RI "SQLITE_API void \fBsqlite3_randomness\fP (int N, void *P)"
.br
.ti -1c
.RI "SQLITE_API int \fBsqlite3_set_authorizer\fP (\fBsqlite3\fP *, int(*xAuth)(void *, int, const char *, const char *, const char *, const char *), void *pUserData)"
.br
.ti -1c
.RI "SQLITE_API void * \fBsqlite3_trace\fP (\fBsqlite3\fP *, void(*xTrace)(void *, const char *), void *)"
.br
.ti -1c
.RI "SQLITE_API SQLITE_EXPERIMENTAL void * \fBsqlite3_profile\fP (\fBsqlite3\fP *, void(*xProfile)(void *, const char *, \fBsqlite3_uint64\fP), void *)"
.br
.ti -1c
.RI "SQLITE_API void \fBsqlite3_progress_handler\fP (\fBsqlite3\fP *, int, int(*)(void *), void *)"
.br
.ti -1c
.RI "SQLITE_API int \fBsqlite3_open\fP (const char *filename, \fBsqlite3\fP **ppDb)"
.br
.ti -1c
.RI "SQLITE_API int \fBsqlite3_open16\fP (const void *filename, \fBsqlite3\fP **ppDb)"
.br
.ti -1c
.RI "SQLITE_API int \fBsqlite3_open_v2\fP (const char *filename, \fBsqlite3\fP **ppDb, int flags, const char *zVfs)"
.br
.ti -1c
.RI "SQLITE_API int \fBsqlite3_errcode\fP (\fBsqlite3\fP *\fBdb\fP)"
.br
.ti -1c
.RI "SQLITE_API int \fBsqlite3_extended_errcode\fP (\fBsqlite3\fP *\fBdb\fP)"
.br
.ti -1c
.RI "SQLITE_API const char * \fBsqlite3_errmsg\fP (\fBsqlite3\fP *)"
.br
.ti -1c
.RI "SQLITE_API const void * \fBsqlite3_errmsg16\fP (\fBsqlite3\fP *)"
.br
.ti -1c
.RI "SQLITE_API int \fBsqlite3_limit\fP (\fBsqlite3\fP *, int id, int newVal)"
.br
.ti -1c
.RI "SQLITE_API int \fBsqlite3_prepare\fP (\fBsqlite3\fP *\fBdb\fP, const char *zSql, int nByte, \fBsqlite3_stmt\fP **ppStmt, const char **pzTail)"
.br
.ti -1c
.RI "SQLITE_API int \fBsqlite3_prepare_v2\fP (\fBsqlite3\fP *\fBdb\fP, const char *zSql, int nByte, \fBsqlite3_stmt\fP **ppStmt, const char **pzTail)"
.br
.ti -1c
.RI "SQLITE_API int \fBsqlite3_prepare16\fP (\fBsqlite3\fP *\fBdb\fP, const void *zSql, int nByte, \fBsqlite3_stmt\fP **ppStmt, const void **pzTail)"
.br
.ti -1c
.RI "SQLITE_API int \fBsqlite3_prepare16_v2\fP (\fBsqlite3\fP *\fBdb\fP, const void *zSql, int nByte, \fBsqlite3_stmt\fP **ppStmt, const void **pzTail)"
.br
.ti -1c
.RI "SQLITE_API const char * \fBsqlite3_sql\fP (\fBsqlite3_stmt\fP *pStmt)"
.br
.ti -1c
.RI "SQLITE_API int \fBsqlite3_bind_blob\fP (\fBsqlite3_stmt\fP *, int, const void *, int n, void(*)(void *))"
.br
.ti -1c
.RI "SQLITE_API int \fBsqlite3_bind_double\fP (\fBsqlite3_stmt\fP *, int, double)"
.br
.ti -1c
.RI "SQLITE_API int \fBsqlite3_bind_int\fP (\fBsqlite3_stmt\fP *, int, int)"
.br
.ti -1c
.RI "SQLITE_API int \fBsqlite3_bind_int64\fP (\fBsqlite3_stmt\fP *, int, \fBsqlite3_int64\fP)"
.br
.ti -1c
.RI "SQLITE_API int \fBsqlite3_bind_null\fP (\fBsqlite3_stmt\fP *, int)"
.br
.ti -1c
.RI "SQLITE_API int \fBsqlite3_bind_text\fP (\fBsqlite3_stmt\fP *, int, const char *, int n, void(*)(void *))"
.br
.ti -1c
.RI "SQLITE_API int \fBsqlite3_bind_text16\fP (\fBsqlite3_stmt\fP *, int, const void *, int, void(*)(void *))"
.br
.ti -1c
.RI "SQLITE_API int \fBsqlite3_bind_value\fP (\fBsqlite3_stmt\fP *, int, const \fBsqlite3_value\fP *)"
.br
.ti -1c
.RI "SQLITE_API int \fBsqlite3_bind_zeroblob\fP (\fBsqlite3_stmt\fP *, int, int n)"
.br
.ti -1c
.RI "SQLITE_API int \fBsqlite3_bind_parameter_count\fP (\fBsqlite3_stmt\fP *)"
.br
.ti -1c
.RI "SQLITE_API const char * \fBsqlite3_bind_parameter_name\fP (\fBsqlite3_stmt\fP *, int)"
.br
.ti -1c
.RI "SQLITE_API int \fBsqlite3_bind_parameter_index\fP (\fBsqlite3_stmt\fP *, const char *zName)"
.br
.ti -1c
.RI "SQLITE_API int \fBsqlite3_clear_bindings\fP (\fBsqlite3_stmt\fP *)"
.br
.ti -1c
.RI "SQLITE_API int \fBsqlite3_column_count\fP (\fBsqlite3_stmt\fP *pStmt)"
.br
.ti -1c
.RI "SQLITE_API const char * \fBsqlite3_column_name\fP (\fBsqlite3_stmt\fP *, int N)"
.br
.ti -1c
.RI "SQLITE_API const void * \fBsqlite3_column_name16\fP (\fBsqlite3_stmt\fP *, int N)"
.br
.ti -1c
.RI "SQLITE_API const char * \fBsqlite3_column_database_name\fP (\fBsqlite3_stmt\fP *, int)"
.br
.ti -1c
.RI "SQLITE_API const void * \fBsqlite3_column_database_name16\fP (\fBsqlite3_stmt\fP *, int)"
.br
.ti -1c
.RI "SQLITE_API const char * \fBsqlite3_column_table_name\fP (\fBsqlite3_stmt\fP *, int)"
.br
.ti -1c
.RI "SQLITE_API const void * \fBsqlite3_column_table_name16\fP (\fBsqlite3_stmt\fP *, int)"
.br
.ti -1c
.RI "SQLITE_API const char * \fBsqlite3_column_origin_name\fP (\fBsqlite3_stmt\fP *, int)"
.br
.ti -1c
.RI "SQLITE_API const void * \fBsqlite3_column_origin_name16\fP (\fBsqlite3_stmt\fP *, int)"
.br
.ti -1c
.RI "SQLITE_API const char * \fBsqlite3_column_decltype\fP (\fBsqlite3_stmt\fP *, int)"
.br
.ti -1c
.RI "SQLITE_API const void * \fBsqlite3_column_decltype16\fP (\fBsqlite3_stmt\fP *, int)"
.br
.ti -1c
.RI "SQLITE_API int \fBsqlite3_step\fP (\fBsqlite3_stmt\fP *)"
.br
.ti -1c
.RI "SQLITE_API int \fBsqlite3_data_count\fP (\fBsqlite3_stmt\fP *pStmt)"
.br
.ti -1c
.RI "SQLITE_API const void * \fBsqlite3_column_blob\fP (\fBsqlite3_stmt\fP *, int iCol)"
.br
.ti -1c
.RI "SQLITE_API int \fBsqlite3_column_bytes\fP (\fBsqlite3_stmt\fP *, int iCol)"
.br
.ti -1c
.RI "SQLITE_API int \fBsqlite3_column_bytes16\fP (\fBsqlite3_stmt\fP *, int iCol)"
.br
.ti -1c
.RI "SQLITE_API double \fBsqlite3_column_double\fP (\fBsqlite3_stmt\fP *, int iCol)"
.br
.ti -1c
.RI "SQLITE_API int \fBsqlite3_column_int\fP (\fBsqlite3_stmt\fP *, int iCol)"
.br
.ti -1c
.RI "SQLITE_API \fBsqlite3_int64\fP \fBsqlite3_column_int64\fP (\fBsqlite3_stmt\fP *, int iCol)"
.br
.ti -1c
.RI "SQLITE_API const unsigned char * \fBsqlite3_column_text\fP (\fBsqlite3_stmt\fP *, int iCol)"
.br
.ti -1c
.RI "SQLITE_API const void * \fBsqlite3_column_text16\fP (\fBsqlite3_stmt\fP *, int iCol)"
.br
.ti -1c
.RI "SQLITE_API int \fBsqlite3_column_type\fP (\fBsqlite3_stmt\fP *, int iCol)"
.br
.ti -1c
.RI "SQLITE_API \fBsqlite3_value\fP * \fBsqlite3_column_value\fP (\fBsqlite3_stmt\fP *, int iCol)"
.br
.ti -1c
.RI "SQLITE_API int \fBsqlite3_finalize\fP (\fBsqlite3_stmt\fP *pStmt)"
.br
.ti -1c
.RI "SQLITE_API int \fBsqlite3_reset\fP (\fBsqlite3_stmt\fP *pStmt)"
.br
.ti -1c
.RI "SQLITE_API int \fBsqlite3_create_function\fP (\fBsqlite3\fP *\fBdb\fP, const char *zFunctionName, int nArg, int eTextRep, void *pApp, void(*xFunc)(\fBsqlite3_context\fP *, int, \fBsqlite3_value\fP **), void(*xStep)(\fBsqlite3_context\fP *, int, \fBsqlite3_value\fP **), void(*xFinal)(\fBsqlite3_context\fP *))"
.br
.ti -1c
.RI "SQLITE_API int \fBsqlite3_create_function16\fP (\fBsqlite3\fP *\fBdb\fP, const void *zFunctionName, int nArg, int eTextRep, void *pApp, void(*xFunc)(\fBsqlite3_context\fP *, int, \fBsqlite3_value\fP **), void(*xStep)(\fBsqlite3_context\fP *, int, \fBsqlite3_value\fP **), void(*xFinal)(\fBsqlite3_context\fP *))"
.br
.ti -1c
.RI "SQLITE_API int \fBsqlite3_create_function_v2\fP (\fBsqlite3\fP *\fBdb\fP, const char *zFunctionName, int nArg, int eTextRep, void *pApp, void(*xFunc)(\fBsqlite3_context\fP *, int, \fBsqlite3_value\fP **), void(*xStep)(\fBsqlite3_context\fP *, int, \fBsqlite3_value\fP **), void(*xFinal)(\fBsqlite3_context\fP *), void(*xDestroy)(void *))"
.br
.ti -1c
.RI "SQLITE_API SQLITE_DEPRECATED int \fBsqlite3_aggregate_count\fP (\fBsqlite3_context\fP *)"
.br
.ti -1c
.RI "SQLITE_API SQLITE_DEPRECATED int \fBsqlite3_expired\fP (\fBsqlite3_stmt\fP *)"
.br
.ti -1c
.RI "SQLITE_API SQLITE_DEPRECATED int \fBsqlite3_transfer_bindings\fP (\fBsqlite3_stmt\fP *, \fBsqlite3_stmt\fP *)"
.br
.ti -1c
.RI "SQLITE_API SQLITE_DEPRECATED int \fBsqlite3_global_recover\fP (void)"
.br
.ti -1c
.RI "SQLITE_API SQLITE_DEPRECATED void \fBsqlite3_thread_cleanup\fP (void)"
.br
.ti -1c
.RI "SQLITE_API SQLITE_DEPRECATED int \fBsqlite3_memory_alarm\fP (void(*)(void *, \fBsqlite3_int64\fP, int), void *, \fBsqlite3_int64\fP)"
.br
.ti -1c
.RI "SQLITE_API const void * \fBsqlite3_value_blob\fP (\fBsqlite3_value\fP *)"
.br
.ti -1c
.RI "SQLITE_API int \fBsqlite3_value_bytes\fP (\fBsqlite3_value\fP *)"
.br
.ti -1c
.RI "SQLITE_API int \fBsqlite3_value_bytes16\fP (\fBsqlite3_value\fP *)"
.br
.ti -1c
.RI "SQLITE_API double \fBsqlite3_value_double\fP (\fBsqlite3_value\fP *)"
.br
.ti -1c
.RI "SQLITE_API int \fBsqlite3_value_int\fP (\fBsqlite3_value\fP *)"
.br
.ti -1c
.RI "SQLITE_API \fBsqlite3_int64\fP \fBsqlite3_value_int64\fP (\fBsqlite3_value\fP *)"
.br
.ti -1c
.RI "SQLITE_API const unsigned char * \fBsqlite3_value_text\fP (\fBsqlite3_value\fP *)"
.br
.ti -1c
.RI "SQLITE_API const void * \fBsqlite3_value_text16\fP (\fBsqlite3_value\fP *)"
.br
.ti -1c
.RI "SQLITE_API const void * \fBsqlite3_value_text16le\fP (\fBsqlite3_value\fP *)"
.br
.ti -1c
.RI "SQLITE_API const void * \fBsqlite3_value_text16be\fP (\fBsqlite3_value\fP *)"
.br
.ti -1c
.RI "SQLITE_API int \fBsqlite3_value_type\fP (\fBsqlite3_value\fP *)"
.br
.ti -1c
.RI "SQLITE_API int \fBsqlite3_value_numeric_type\fP (\fBsqlite3_value\fP *)"
.br
.ti -1c
.RI "SQLITE_API void * \fBsqlite3_aggregate_context\fP (\fBsqlite3_context\fP *, int nBytes)"
.br
.ti -1c
.RI "SQLITE_API void * \fBsqlite3_user_data\fP (\fBsqlite3_context\fP *)"
.br
.ti -1c
.RI "SQLITE_API \fBsqlite3\fP * \fBsqlite3_context_db_handle\fP (\fBsqlite3_context\fP *)"
.br
.ti -1c
.RI "SQLITE_API void * \fBsqlite3_get_auxdata\fP (\fBsqlite3_context\fP *, int N)"
.br
.ti -1c
.RI "SQLITE_API void \fBsqlite3_set_auxdata\fP (\fBsqlite3_context\fP *, int N, void *, void(*)(void *))"
.br
.ti -1c
.RI "SQLITE_API void \fBsqlite3_result_blob\fP (\fBsqlite3_context\fP *, const void *, int, void(*)(void *))"
.br
.ti -1c
.RI "SQLITE_API void \fBsqlite3_result_double\fP (\fBsqlite3_context\fP *, double)"
.br
.ti -1c
.RI "SQLITE_API void \fBsqlite3_result_error\fP (\fBsqlite3_context\fP *, const char *, int)"
.br
.ti -1c
.RI "SQLITE_API void \fBsqlite3_result_error16\fP (\fBsqlite3_context\fP *, const void *, int)"
.br
.ti -1c
.RI "SQLITE_API void \fBsqlite3_result_error_toobig\fP (\fBsqlite3_context\fP *)"
.br
.ti -1c
.RI "SQLITE_API void \fBsqlite3_result_error_nomem\fP (\fBsqlite3_context\fP *)"
.br
.ti -1c
.RI "SQLITE_API void \fBsqlite3_result_error_code\fP (\fBsqlite3_context\fP *, int)"
.br
.ti -1c
.RI "SQLITE_API void \fBsqlite3_result_int\fP (\fBsqlite3_context\fP *, int)"
.br
.ti -1c
.RI "SQLITE_API void \fBsqlite3_result_int64\fP (\fBsqlite3_context\fP *, \fBsqlite3_int64\fP)"
.br
.ti -1c
.RI "SQLITE_API void \fBsqlite3_result_null\fP (\fBsqlite3_context\fP *)"
.br
.ti -1c
.RI "SQLITE_API void \fBsqlite3_result_text\fP (\fBsqlite3_context\fP *, const char *, int, void(*)(void *))"
.br
.ti -1c
.RI "SQLITE_API void \fBsqlite3_result_text16\fP (\fBsqlite3_context\fP *, const void *, int, void(*)(void *))"
.br
.ti -1c
.RI "SQLITE_API void \fBsqlite3_result_text16le\fP (\fBsqlite3_context\fP *, const void *, int, void(*)(void *))"
.br
.ti -1c
.RI "SQLITE_API void \fBsqlite3_result_text16be\fP (\fBsqlite3_context\fP *, const void *, int, void(*)(void *))"
.br
.ti -1c
.RI "SQLITE_API void \fBsqlite3_result_value\fP (\fBsqlite3_context\fP *, \fBsqlite3_value\fP *)"
.br
.ti -1c
.RI "SQLITE_API void \fBsqlite3_result_zeroblob\fP (\fBsqlite3_context\fP *, int n)"
.br
.ti -1c
.RI "SQLITE_API int \fBsqlite3_create_collation\fP (\fBsqlite3\fP *, const char *zName, int eTextRep, void *pArg, int(*xCompare)(void *, int, const void *, int, const void *))"
.br
.ti -1c
.RI "SQLITE_API int \fBsqlite3_create_collation_v2\fP (\fBsqlite3\fP *, const char *zName, int eTextRep, void *pArg, int(*xCompare)(void *, int, const void *, int, const void *), void(*xDestroy)(void *))"
.br
.ti -1c
.RI "SQLITE_API int \fBsqlite3_create_collation16\fP (\fBsqlite3\fP *, const void *zName, int eTextRep, void *pArg, int(*xCompare)(void *, int, const void *, int, const void *))"
.br
.ti -1c
.RI "SQLITE_API int \fBsqlite3_collation_needed\fP (\fBsqlite3\fP *, void *, void(*)(void *, \fBsqlite3\fP *, int eTextRep, const char *))"
.br
.ti -1c
.RI "SQLITE_API int \fBsqlite3_collation_needed16\fP (\fBsqlite3\fP *, void *, void(*)(void *, \fBsqlite3\fP *, int eTextRep, const void *))"
.br
.ti -1c
.RI "SQLITE_API int \fBsqlite3_sleep\fP (int)"
.br
.ti -1c
.RI "SQLITE_API int \fBsqlite3_get_autocommit\fP (\fBsqlite3\fP *)"
.br
.ti -1c
.RI "SQLITE_API \fBsqlite3\fP * \fBsqlite3_db_handle\fP (\fBsqlite3_stmt\fP *)"
.br
.ti -1c
.RI "SQLITE_API \fBsqlite3_stmt\fP * \fBsqlite3_next_stmt\fP (\fBsqlite3\fP *pDb, \fBsqlite3_stmt\fP *pStmt)"
.br
.ti -1c
.RI "SQLITE_API void * \fBsqlite3_commit_hook\fP (\fBsqlite3\fP *, int(*)(void *), void *)"
.br
.ti -1c
.RI "SQLITE_API void * \fBsqlite3_rollback_hook\fP (\fBsqlite3\fP *, void(*)(void *), void *)"
.br
.ti -1c
.RI "SQLITE_API void * \fBsqlite3_update_hook\fP (\fBsqlite3\fP *, void(*)(void *, int, char const *, char const *, \fBsqlite3_int64\fP), void *)"
.br
.ti -1c
.RI "SQLITE_API int \fBsqlite3_enable_shared_cache\fP (int)"
.br
.ti -1c
.RI "SQLITE_API int \fBsqlite3_release_memory\fP (int)"
.br
.ti -1c
.RI "SQLITE_API \fBsqlite3_int64\fP \fBsqlite3_soft_heap_limit64\fP (\fBsqlite3_int64\fP N)"
.br
.ti -1c
.RI "SQLITE_API SQLITE_DEPRECATED void \fBsqlite3_soft_heap_limit\fP (int N)"
.br
.ti -1c
.RI "SQLITE_API int \fBsqlite3_table_column_metadata\fP (\fBsqlite3\fP *\fBdb\fP, const char *zDbName, const char *zTableName, const char *zColumnName, char const **pzDataType, char const **pzCollSeq, int *pNotNull, int *pPrimaryKey, int *pAutoinc)"
.br
.ti -1c
.RI "SQLITE_API int \fBsqlite3_load_extension\fP (\fBsqlite3\fP *\fBdb\fP, const char *zFile, const char *zProc, char **pzErrMsg)"
.br
.ti -1c
.RI "SQLITE_API int \fBsqlite3_enable_load_extension\fP (\fBsqlite3\fP *\fBdb\fP, int onoff)"
.br
.ti -1c
.RI "SQLITE_API int \fBsqlite3_auto_extension\fP (void(*xEntryPoint)(void))"
.br
.ti -1c
.RI "SQLITE_API void \fBsqlite3_reset_auto_extension\fP (void)"
.br
.ti -1c
.RI "SQLITE_API int \fBsqlite3_create_module\fP (\fBsqlite3\fP *\fBdb\fP, const char *zName, const \fBsqlite3_module\fP *p, void *pClientData)"
.br
.ti -1c
.RI "SQLITE_API int \fBsqlite3_create_module_v2\fP (\fBsqlite3\fP *\fBdb\fP, const char *zName, const \fBsqlite3_module\fP *p, void *pClientData, void(*xDestroy)(void *))"
.br
.ti -1c
.RI "SQLITE_API int \fBsqlite3_declare_vtab\fP (\fBsqlite3\fP *, const char *zSQL)"
.br
.ti -1c
.RI "SQLITE_API int \fBsqlite3_overload_function\fP (\fBsqlite3\fP *, const char *zFuncName, int nArg)"
.br
.ti -1c
.RI "SQLITE_API int \fBsqlite3_blob_open\fP (\fBsqlite3\fP *, const char *zDb, const char *zTable, const char *zColumn, \fBsqlite3_int64\fP iRow, int flags, \fBsqlite3_blob\fP **ppBlob)"
.br
.ti -1c
.RI "SQLITE_API int \fBsqlite3_blob_close\fP (\fBsqlite3_blob\fP *)"
.br
.ti -1c
.RI "SQLITE_API int \fBsqlite3_blob_bytes\fP (\fBsqlite3_blob\fP *)"
.br
.ti -1c
.RI "SQLITE_API int \fBsqlite3_blob_read\fP (\fBsqlite3_blob\fP *, void *Z, int N, int iOffset)"
.br
.ti -1c
.RI "SQLITE_API int \fBsqlite3_blob_write\fP (\fBsqlite3_blob\fP *, const void *z, int n, int iOffset)"
.br
.ti -1c
.RI "SQLITE_API \fBsqlite3_vfs\fP * \fBsqlite3_vfs_find\fP (const char *zVfsName)"
.br
.ti -1c
.RI "SQLITE_API int \fBsqlite3_vfs_register\fP (\fBsqlite3_vfs\fP *, int makeDflt)"
.br
.ti -1c
.RI "SQLITE_API int \fBsqlite3_vfs_unregister\fP (\fBsqlite3_vfs\fP *)"
.br
.ti -1c
.RI "SQLITE_API \fBsqlite3_mutex\fP * \fBsqlite3_mutex_alloc\fP (int)"
.br
.ti -1c
.RI "SQLITE_API void \fBsqlite3_mutex_free\fP (\fBsqlite3_mutex\fP *)"
.br
.ti -1c
.RI "SQLITE_API void \fBsqlite3_mutex_enter\fP (\fBsqlite3_mutex\fP *)"
.br
.ti -1c
.RI "SQLITE_API int \fBsqlite3_mutex_try\fP (\fBsqlite3_mutex\fP *)"
.br
.ti -1c
.RI "SQLITE_API void \fBsqlite3_mutex_leave\fP (\fBsqlite3_mutex\fP *)"
.br
.ti -1c
.RI "SQLITE_API \fBsqlite3_mutex\fP * \fBsqlite3_db_mutex\fP (\fBsqlite3\fP *)"
.br
.ti -1c
.RI "SQLITE_API int \fBsqlite3_file_control\fP (\fBsqlite3\fP *, const char *zDbName, int op, void *)"
.br
.ti -1c
.RI "SQLITE_API int \fBsqlite3_test_control\fP (int op,...)"
.br
.ti -1c
.RI "SQLITE_API int \fBsqlite3_status\fP (int op, int *pCurrent, int *pHighwater, int resetFlag)"
.br
.ti -1c
.RI "SQLITE_API int \fBsqlite3_db_status\fP (\fBsqlite3\fP *, int op, int *pCur, int *pHiwtr, int resetFlg)"
.br
.ti -1c
.RI "SQLITE_API int \fBsqlite3_stmt_status\fP (\fBsqlite3_stmt\fP *, int op, int resetFlg)"
.br
.ti -1c
.RI "SQLITE_API \fBsqlite3_backup\fP * \fBsqlite3_backup_init\fP (\fBsqlite3\fP *pDest, const char *zDestName, \fBsqlite3\fP *pSource, const char *zSourceName)"
.br
.ti -1c
.RI "SQLITE_API int \fBsqlite3_backup_step\fP (\fBsqlite3_backup\fP *p, int nPage)"
.br
.ti -1c
.RI "SQLITE_API int \fBsqlite3_backup_finish\fP (\fBsqlite3_backup\fP *p)"
.br
.ti -1c
.RI "SQLITE_API int \fBsqlite3_backup_remaining\fP (\fBsqlite3_backup\fP *p)"
.br
.ti -1c
.RI "SQLITE_API int \fBsqlite3_backup_pagecount\fP (\fBsqlite3_backup\fP *p)"
.br
.ti -1c
.RI "SQLITE_API int \fBsqlite3_unlock_notify\fP (\fBsqlite3\fP *pBlocked, void(*xNotify)(void **apArg, int nArg), void *pNotifyArg)"
.br
.ti -1c
.RI "SQLITE_API int \fBsqlite3_strnicmp\fP (const char *, const char *, int)"
.br
.ti -1c
.RI "SQLITE_API void \fBsqlite3_log\fP (int iErrCode, const char *zFormat,...)"
.br
.ti -1c
.RI "SQLITE_API void * \fBsqlite3_wal_hook\fP (\fBsqlite3\fP *, int(*)(void *, \fBsqlite3\fP *, const char *, int), void *)"
.br
.ti -1c
.RI "SQLITE_API int \fBsqlite3_wal_autocheckpoint\fP (\fBsqlite3\fP *\fBdb\fP, int N)"
.br
.ti -1c
.RI "SQLITE_API int \fBsqlite3_wal_checkpoint\fP (\fBsqlite3\fP *\fBdb\fP, const char *zDb)"
.br
.ti -1c
.RI "SQLITE_API int \fBsqlite3_rtree_geometry_callback\fP (\fBsqlite3\fP *\fBdb\fP, const char *zGeom, int(*xGeom)(\fBsqlite3_rtree_geometry\fP *, int nCoord, double *aCoord, int *pRes), void *pContext)"
.br
.ti -1c
.RI "SQLITE_PRIVATE void \fBsqlite3HashInit\fP (\fBHash\fP *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE void * \fBsqlite3HashInsert\fP (\fBHash\fP *, const char *pKey, int nKey, void *pData)"
.br
.ti -1c
.RI "SQLITE_PRIVATE void * \fBsqlite3HashFind\fP (const \fBHash\fP *, const char *pKey, int nKey)"
.br
.ti -1c
.RI "SQLITE_PRIVATE void \fBsqlite3HashClear\fP (\fBHash\fP *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE int \fBsqlite3BtreeOpen\fP (const char *zFilename, \fBsqlite3\fP *\fBdb\fP, \fBBtree\fP **ppBtree, int flags, int vfsFlags)"
.br
.ti -1c
.RI "SQLITE_PRIVATE int \fBsqlite3BtreeClose\fP (\fBBtree\fP *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE int \fBsqlite3BtreeSetCacheSize\fP (\fBBtree\fP *, int)"
.br
.ti -1c
.RI "SQLITE_PRIVATE int \fBsqlite3BtreeSetSafetyLevel\fP (\fBBtree\fP *, int, int)"
.br
.ti -1c
.RI "SQLITE_PRIVATE int \fBsqlite3BtreeSyncDisabled\fP (\fBBtree\fP *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE int \fBsqlite3BtreeSetPageSize\fP (\fBBtree\fP *p, int nPagesize, int nReserve, int eFix)"
.br
.ti -1c
.RI "SQLITE_PRIVATE int \fBsqlite3BtreeGetPageSize\fP (\fBBtree\fP *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE int \fBsqlite3BtreeMaxPageCount\fP (\fBBtree\fP *, int)"
.br
.ti -1c
.RI "SQLITE_PRIVATE \fBu32\fP \fBsqlite3BtreeLastPage\fP (\fBBtree\fP *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE int \fBsqlite3BtreeSecureDelete\fP (\fBBtree\fP *, int)"
.br
.ti -1c
.RI "SQLITE_PRIVATE int \fBsqlite3BtreeGetReserve\fP (\fBBtree\fP *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE int \fBsqlite3BtreeSetAutoVacuum\fP (\fBBtree\fP *, int)"
.br
.ti -1c
.RI "SQLITE_PRIVATE int \fBsqlite3BtreeGetAutoVacuum\fP (\fBBtree\fP *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE int \fBsqlite3BtreeBeginTrans\fP (\fBBtree\fP *, int)"
.br
.ti -1c
.RI "SQLITE_PRIVATE int \fBsqlite3BtreeCommitPhaseOne\fP (\fBBtree\fP *, const char *zMaster)"
.br
.ti -1c
.RI "SQLITE_PRIVATE int \fBsqlite3BtreeCommitPhaseTwo\fP (\fBBtree\fP *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE int \fBsqlite3BtreeCommit\fP (\fBBtree\fP *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE int \fBsqlite3BtreeRollback\fP (\fBBtree\fP *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE int \fBsqlite3BtreeBeginStmt\fP (\fBBtree\fP *, int)"
.br
.ti -1c
.RI "SQLITE_PRIVATE int \fBsqlite3BtreeCreateTable\fP (\fBBtree\fP *, int *, int flags)"
.br
.ti -1c
.RI "SQLITE_PRIVATE int \fBsqlite3BtreeIsInTrans\fP (\fBBtree\fP *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE int \fBsqlite3BtreeIsInReadTrans\fP (\fBBtree\fP *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE int \fBsqlite3BtreeIsInBackup\fP (\fBBtree\fP *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE void * \fBsqlite3BtreeSchema\fP (\fBBtree\fP *, int, void(*)(void *))"
.br
.ti -1c
.RI "SQLITE_PRIVATE int \fBsqlite3BtreeSchemaLocked\fP (\fBBtree\fP *pBtree)"
.br
.ti -1c
.RI "SQLITE_PRIVATE int \fBsqlite3BtreeLockTable\fP (\fBBtree\fP *pBtree, int iTab, \fBu8\fP isWriteLock)"
.br
.ti -1c
.RI "SQLITE_PRIVATE int \fBsqlite3BtreeSavepoint\fP (\fBBtree\fP *, int, int)"
.br
.ti -1c
.RI "SQLITE_PRIVATE const char * \fBsqlite3BtreeGetFilename\fP (\fBBtree\fP *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE const char * \fBsqlite3BtreeGetJournalname\fP (\fBBtree\fP *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE int \fBsqlite3BtreeCopyFile\fP (\fBBtree\fP *, \fBBtree\fP *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE int \fBsqlite3BtreeIncrVacuum\fP (\fBBtree\fP *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE int \fBsqlite3BtreeDropTable\fP (\fBBtree\fP *, int, int *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE int \fBsqlite3BtreeClearTable\fP (\fBBtree\fP *, int, int *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE void \fBsqlite3BtreeTripAllCursors\fP (\fBBtree\fP *, int)"
.br
.ti -1c
.RI "SQLITE_PRIVATE void \fBsqlite3BtreeGetMeta\fP (\fBBtree\fP *pBtree, int idx, \fBu32\fP *pValue)"
.br
.ti -1c
.RI "SQLITE_PRIVATE int \fBsqlite3BtreeUpdateMeta\fP (\fBBtree\fP *, int idx, \fBu32\fP value)"
.br
.ti -1c
.RI "SQLITE_PRIVATE int \fBsqlite3BtreeCursor\fP (\fBBtree\fP *, int iTable, int wrFlag, struct \fBKeyInfo\fP *, \fBBtCursor\fP *pCursor)"
.br
.ti -1c
.RI "SQLITE_PRIVATE int \fBsqlite3BtreeCursorSize\fP (void)"
.br
.ti -1c
.RI "SQLITE_PRIVATE void \fBsqlite3BtreeCursorZero\fP (\fBBtCursor\fP *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE int \fBsqlite3BtreeCloseCursor\fP (\fBBtCursor\fP *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE int \fBsqlite3BtreeMovetoUnpacked\fP (\fBBtCursor\fP *, \fBUnpackedRecord\fP *pUnKey, \fBi64\fP intKey, int bias, int *pRes)"
.br
.ti -1c
.RI "SQLITE_PRIVATE int \fBsqlite3BtreeCursorHasMoved\fP (\fBBtCursor\fP *, int *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE int \fBsqlite3BtreeDelete\fP (\fBBtCursor\fP *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE int \fBsqlite3BtreeInsert\fP (\fBBtCursor\fP *, const void *pKey, \fBi64\fP nKey, const void *pData, int nData, int nZero, int bias, int seekResult)"
.br
.ti -1c
.RI "SQLITE_PRIVATE int \fBsqlite3BtreeFirst\fP (\fBBtCursor\fP *, int *pRes)"
.br
.ti -1c
.RI "SQLITE_PRIVATE int \fBsqlite3BtreeLast\fP (\fBBtCursor\fP *, int *pRes)"
.br
.ti -1c
.RI "SQLITE_PRIVATE int \fBsqlite3BtreeNext\fP (\fBBtCursor\fP *, int *pRes)"
.br
.ti -1c
.RI "SQLITE_PRIVATE int \fBsqlite3BtreeEof\fP (\fBBtCursor\fP *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE int \fBsqlite3BtreePrevious\fP (\fBBtCursor\fP *, int *pRes)"
.br
.ti -1c
.RI "SQLITE_PRIVATE int \fBsqlite3BtreeKeySize\fP (\fBBtCursor\fP *, \fBi64\fP *pSize)"
.br
.ti -1c
.RI "SQLITE_PRIVATE int \fBsqlite3BtreeKey\fP (\fBBtCursor\fP *, \fBu32\fP offset, \fBu32\fP amt, void *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE const void * \fBsqlite3BtreeKeyFetch\fP (\fBBtCursor\fP *, int *pAmt)"
.br
.ti -1c
.RI "SQLITE_PRIVATE const void * \fBsqlite3BtreeDataFetch\fP (\fBBtCursor\fP *, int *pAmt)"
.br
.ti -1c
.RI "SQLITE_PRIVATE int \fBsqlite3BtreeDataSize\fP (\fBBtCursor\fP *, \fBu32\fP *pSize)"
.br
.ti -1c
.RI "SQLITE_PRIVATE int \fBsqlite3BtreeData\fP (\fBBtCursor\fP *, \fBu32\fP offset, \fBu32\fP amt, void *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE void \fBsqlite3BtreeSetCachedRowid\fP (\fBBtCursor\fP *, \fBsqlite3_int64\fP)"
.br
.ti -1c
.RI "SQLITE_PRIVATE \fBsqlite3_int64\fP \fBsqlite3BtreeGetCachedRowid\fP (\fBBtCursor\fP *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE char * \fBsqlite3BtreeIntegrityCheck\fP (\fBBtree\fP *, int *aRoot, int nRoot, int, int *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE struct \fBPager\fP * \fBsqlite3BtreePager\fP (\fBBtree\fP *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE int \fBsqlite3BtreePutData\fP (\fBBtCursor\fP *, \fBu32\fP offset, \fBu32\fP amt, void *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE void \fBsqlite3BtreeCacheOverflow\fP (\fBBtCursor\fP *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE void \fBsqlite3BtreeClearCursor\fP (\fBBtCursor\fP *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE int \fBsqlite3BtreeSetVersion\fP (\fBBtree\fP *pBt, int iVersion)"
.br
.ti -1c
.RI "SQLITE_PRIVATE int \fBsqlite3BtreeCount\fP (\fBBtCursor\fP *, \fBi64\fP *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE int \fBsqlite3BtreeCheckpoint\fP (\fBBtree\fP *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE void \fBsqlite3BtreeEnter\fP (\fBBtree\fP *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE void \fBsqlite3BtreeEnterAll\fP (\fBsqlite3\fP *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE void \fBsqlite3BtreeLeave\fP (\fBBtree\fP *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE void \fBsqlite3BtreeEnterCursor\fP (\fBBtCursor\fP *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE void \fBsqlite3BtreeLeaveCursor\fP (\fBBtCursor\fP *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE void \fBsqlite3BtreeLeaveAll\fP (\fBsqlite3\fP *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE void \fBsqlite3BtreeMutexArrayEnter\fP (\fBBtreeMutexArray\fP *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE void \fBsqlite3BtreeMutexArrayLeave\fP (\fBBtreeMutexArray\fP *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE void \fBsqlite3BtreeMutexArrayInsert\fP (\fBBtreeMutexArray\fP *, \fBBtree\fP *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE \fBVdbe\fP * \fBsqlite3VdbeCreate\fP (\fBsqlite3\fP *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE int \fBsqlite3VdbeAddOp0\fP (\fBVdbe\fP *, int)"
.br
.ti -1c
.RI "SQLITE_PRIVATE int \fBsqlite3VdbeAddOp1\fP (\fBVdbe\fP *, int, int)"
.br
.ti -1c
.RI "SQLITE_PRIVATE int \fBsqlite3VdbeAddOp2\fP (\fBVdbe\fP *, int, int, int)"
.br
.ti -1c
.RI "SQLITE_PRIVATE int \fBsqlite3VdbeAddOp3\fP (\fBVdbe\fP *, int, int, int, int)"
.br
.ti -1c
.RI "SQLITE_PRIVATE int \fBsqlite3VdbeAddOp4\fP (\fBVdbe\fP *, int, int, int, int, const char *zP4, int)"
.br
.ti -1c
.RI "SQLITE_PRIVATE int \fBsqlite3VdbeAddOp4Int\fP (\fBVdbe\fP *, int, int, int, int, int)"
.br
.ti -1c
.RI "SQLITE_PRIVATE int \fBsqlite3VdbeAddOpList\fP (\fBVdbe\fP *, int nOp, \fBVdbeOpList\fP const *aOp)"
.br
.ti -1c
.RI "SQLITE_PRIVATE void \fBsqlite3VdbeChangeP1\fP (\fBVdbe\fP *, int addr, int P1)"
.br
.ti -1c
.RI "SQLITE_PRIVATE void \fBsqlite3VdbeChangeP2\fP (\fBVdbe\fP *, int addr, int P2)"
.br
.ti -1c
.RI "SQLITE_PRIVATE void \fBsqlite3VdbeChangeP3\fP (\fBVdbe\fP *, int addr, int P3)"
.br
.ti -1c
.RI "SQLITE_PRIVATE void \fBsqlite3VdbeChangeP5\fP (\fBVdbe\fP *, \fBu8\fP P5)"
.br
.ti -1c
.RI "SQLITE_PRIVATE void \fBsqlite3VdbeJumpHere\fP (\fBVdbe\fP *, int addr)"
.br
.ti -1c
.RI "SQLITE_PRIVATE void \fBsqlite3VdbeChangeToNoop\fP (\fBVdbe\fP *, int addr, int N)"
.br
.ti -1c
.RI "SQLITE_PRIVATE void \fBsqlite3VdbeChangeP4\fP (\fBVdbe\fP *, int addr, const char *zP4, int N)"
.br
.ti -1c
.RI "SQLITE_PRIVATE void \fBsqlite3VdbeUsesBtree\fP (\fBVdbe\fP *, int)"
.br
.ti -1c
.RI "SQLITE_PRIVATE \fBVdbeOp\fP * \fBsqlite3VdbeGetOp\fP (\fBVdbe\fP *, int)"
.br
.ti -1c
.RI "SQLITE_PRIVATE int \fBsqlite3VdbeMakeLabel\fP (\fBVdbe\fP *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE void \fBsqlite3VdbeRunOnlyOnce\fP (\fBVdbe\fP *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE void \fBsqlite3VdbeDelete\fP (\fBVdbe\fP *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE void \fBsqlite3VdbeDeleteObject\fP (\fBsqlite3\fP *, \fBVdbe\fP *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE void \fBsqlite3VdbeMakeReady\fP (\fBVdbe\fP *, int, int, int, int, int, int)"
.br
.ti -1c
.RI "SQLITE_PRIVATE int \fBsqlite3VdbeFinalize\fP (\fBVdbe\fP *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE void \fBsqlite3VdbeResolveLabel\fP (\fBVdbe\fP *, int)"
.br
.ti -1c
.RI "SQLITE_PRIVATE int \fBsqlite3VdbeCurrentAddr\fP (\fBVdbe\fP *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE void \fBsqlite3VdbeResetStepResult\fP (\fBVdbe\fP *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE int \fBsqlite3VdbeReset\fP (\fBVdbe\fP *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE void \fBsqlite3VdbeSetNumCols\fP (\fBVdbe\fP *, int)"
.br
.ti -1c
.RI "SQLITE_PRIVATE int \fBsqlite3VdbeSetColName\fP (\fBVdbe\fP *, int, int, const char *, void(*)(void *))"
.br
.ti -1c
.RI "SQLITE_PRIVATE void \fBsqlite3VdbeCountChanges\fP (\fBVdbe\fP *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE \fBsqlite3\fP * \fBsqlite3VdbeDb\fP (\fBVdbe\fP *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE void \fBsqlite3VdbeSetSql\fP (\fBVdbe\fP *, const char *z, int n, int)"
.br
.ti -1c
.RI "SQLITE_PRIVATE void \fBsqlite3VdbeSwap\fP (\fBVdbe\fP *, \fBVdbe\fP *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE \fBVdbeOp\fP * \fBsqlite3VdbeTakeOpArray\fP (\fBVdbe\fP *, int *, int *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE \fBsqlite3_value\fP * \fBsqlite3VdbeGetValue\fP (\fBVdbe\fP *, int, \fBu8\fP)"
.br
.ti -1c
.RI "SQLITE_PRIVATE void \fBsqlite3VdbeSetVarmask\fP (\fBVdbe\fP *, int)"
.br
.ti -1c
.RI "SQLITE_PRIVATE char * \fBsqlite3VdbeExpandSql\fP (\fBVdbe\fP *, const char *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE \fBUnpackedRecord\fP * \fBsqlite3VdbeRecordUnpack\fP (\fBKeyInfo\fP *, int, const void *, char *, int)"
.br
.ti -1c
.RI "SQLITE_PRIVATE void \fBsqlite3VdbeDeleteUnpackedRecord\fP (\fBUnpackedRecord\fP *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE int \fBsqlite3VdbeRecordCompare\fP (int, const void *, \fBUnpackedRecord\fP *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE void \fBsqlite3VdbeLinkSubProgram\fP (\fBVdbe\fP *, \fBSubProgram\fP *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE int \fBsqlite3PagerOpen\fP (\fBsqlite3_vfs\fP *, \fBPager\fP **ppPager, const char *, int, int, int, void(*)(\fBDbPage\fP *))"
.br
.ti -1c
.RI "SQLITE_PRIVATE int \fBsqlite3PagerClose\fP (\fBPager\fP *pPager)"
.br
.ti -1c
.RI "SQLITE_PRIVATE int \fBsqlite3PagerReadFileheader\fP (\fBPager\fP *, int, unsigned char *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE void \fBsqlite3PagerSetBusyhandler\fP (\fBPager\fP *, int(*)(void *), void *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE int \fBsqlite3PagerSetPagesize\fP (\fBPager\fP *, \fBu32\fP *, int)"
.br
.ti -1c
.RI "SQLITE_PRIVATE int \fBsqlite3PagerMaxPageCount\fP (\fBPager\fP *, int)"
.br
.ti -1c
.RI "SQLITE_PRIVATE void \fBsqlite3PagerSetCachesize\fP (\fBPager\fP *, int)"
.br
.ti -1c
.RI "SQLITE_PRIVATE void \fBsqlite3PagerSetSafetyLevel\fP (\fBPager\fP *, int, int)"
.br
.ti -1c
.RI "SQLITE_PRIVATE int \fBsqlite3PagerLockingMode\fP (\fBPager\fP *, int)"
.br
.ti -1c
.RI "SQLITE_PRIVATE int \fBsqlite3PagerSetJournalMode\fP (\fBPager\fP *, int)"
.br
.ti -1c
.RI "SQLITE_PRIVATE int \fBsqlite3PagerGetJournalMode\fP (\fBPager\fP *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE int \fBsqlite3PagerOkToChangeJournalMode\fP (\fBPager\fP *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE \fBi64\fP \fBsqlite3PagerJournalSizeLimit\fP (\fBPager\fP *, \fBi64\fP)"
.br
.ti -1c
.RI "SQLITE_PRIVATE \fBsqlite3_backup\fP ** \fBsqlite3PagerBackupPtr\fP (\fBPager\fP *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE int \fBsqlite3PagerAcquire\fP (\fBPager\fP *pPager, \fBPgno\fP pgno, \fBDbPage\fP **ppPage, int clrFlag)"
.br
.ti -1c
.RI "SQLITE_PRIVATE \fBDbPage\fP * \fBsqlite3PagerLookup\fP (\fBPager\fP *pPager, \fBPgno\fP pgno)"
.br
.ti -1c
.RI "SQLITE_PRIVATE void \fBsqlite3PagerRef\fP (\fBDbPage\fP *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE void \fBsqlite3PagerUnref\fP (\fBDbPage\fP *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE int \fBsqlite3PagerWrite\fP (\fBDbPage\fP *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE void \fBsqlite3PagerDontWrite\fP (\fBDbPage\fP *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE int \fBsqlite3PagerMovepage\fP (\fBPager\fP *, \fBDbPage\fP *, \fBPgno\fP, int)"
.br
.ti -1c
.RI "SQLITE_PRIVATE int \fBsqlite3PagerPageRefcount\fP (\fBDbPage\fP *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE void * \fBsqlite3PagerGetData\fP (\fBDbPage\fP *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE void * \fBsqlite3PagerGetExtra\fP (\fBDbPage\fP *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE void \fBsqlite3PagerPagecount\fP (\fBPager\fP *, int *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE int \fBsqlite3PagerBegin\fP (\fBPager\fP *, int exFlag, int)"
.br
.ti -1c
.RI "SQLITE_PRIVATE int \fBsqlite3PagerCommitPhaseOne\fP (\fBPager\fP *, const char *zMaster, int)"
.br
.ti -1c
.RI "SQLITE_PRIVATE int \fBsqlite3PagerExclusiveLock\fP (\fBPager\fP *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE int \fBsqlite3PagerSync\fP (\fBPager\fP *pPager)"
.br
.ti -1c
.RI "SQLITE_PRIVATE int \fBsqlite3PagerCommitPhaseTwo\fP (\fBPager\fP *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE int \fBsqlite3PagerRollback\fP (\fBPager\fP *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE int \fBsqlite3PagerOpenSavepoint\fP (\fBPager\fP *pPager, int n)"
.br
.ti -1c
.RI "SQLITE_PRIVATE int \fBsqlite3PagerSavepoint\fP (\fBPager\fP *pPager, int op, int iSavepoint)"
.br
.ti -1c
.RI "SQLITE_PRIVATE int \fBsqlite3PagerSharedLock\fP (\fBPager\fP *pPager)"
.br
.ti -1c
.RI "SQLITE_PRIVATE int \fBsqlite3PagerCheckpoint\fP (\fBPager\fP *pPager)"
.br
.ti -1c
.RI "SQLITE_PRIVATE int \fBsqlite3PagerWalSupported\fP (\fBPager\fP *pPager)"
.br
.ti -1c
.RI "SQLITE_PRIVATE int \fBsqlite3PagerWalCallback\fP (\fBPager\fP *pPager)"
.br
.ti -1c
.RI "SQLITE_PRIVATE int \fBsqlite3PagerOpenWal\fP (\fBPager\fP *pPager, int *pisOpen)"
.br
.ti -1c
.RI "SQLITE_PRIVATE int \fBsqlite3PagerCloseWal\fP (\fBPager\fP *pPager)"
.br
.ti -1c
.RI "SQLITE_PRIVATE \fBu8\fP \fBsqlite3PagerIsreadonly\fP (\fBPager\fP *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE int \fBsqlite3PagerRefcount\fP (\fBPager\fP *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE int \fBsqlite3PagerMemUsed\fP (\fBPager\fP *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE const char * \fBsqlite3PagerFilename\fP (\fBPager\fP *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE const \fBsqlite3_vfs\fP * \fBsqlite3PagerVfs\fP (\fBPager\fP *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE \fBsqlite3_file\fP * \fBsqlite3PagerFile\fP (\fBPager\fP *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE const char * \fBsqlite3PagerJournalname\fP (\fBPager\fP *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE int \fBsqlite3PagerNosync\fP (\fBPager\fP *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE void * \fBsqlite3PagerTempSpace\fP (\fBPager\fP *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE int \fBsqlite3PagerIsMemdb\fP (\fBPager\fP *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE void \fBsqlite3PagerTruncateImage\fP (\fBPager\fP *, \fBPgno\fP)"
.br
.ti -1c
.RI "SQLITE_PRIVATE int \fBsqlite3PcacheInitialize\fP (void)"
.br
.ti -1c
.RI "SQLITE_PRIVATE void \fBsqlite3PcacheShutdown\fP (void)"
.br
.ti -1c
.RI "SQLITE_PRIVATE void \fBsqlite3PCacheBufferSetup\fP (void *, int sz, int n)"
.br
.ti -1c
.RI "SQLITE_PRIVATE void \fBsqlite3PcacheOpen\fP (int szPage, int szExtra, int bPurgeable, int(*xStress)(void *, \fBPgHdr\fP *), void *pStress, \fBPCache\fP *pToInit)"
.br
.ti -1c
.RI "SQLITE_PRIVATE void \fBsqlite3PcacheSetPageSize\fP (\fBPCache\fP *, int)"
.br
.ti -1c
.RI "SQLITE_PRIVATE int \fBsqlite3PcacheSize\fP (void)"
.br
.ti -1c
.RI "SQLITE_PRIVATE int \fBsqlite3PcacheFetch\fP (\fBPCache\fP *, \fBPgno\fP, int createFlag, \fBPgHdr\fP **)"
.br
.ti -1c
.RI "SQLITE_PRIVATE void \fBsqlite3PcacheRelease\fP (\fBPgHdr\fP *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE void \fBsqlite3PcacheDrop\fP (\fBPgHdr\fP *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE void \fBsqlite3PcacheMakeDirty\fP (\fBPgHdr\fP *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE void \fBsqlite3PcacheMakeClean\fP (\fBPgHdr\fP *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE void \fBsqlite3PcacheCleanAll\fP (\fBPCache\fP *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE void \fBsqlite3PcacheMove\fP (\fBPgHdr\fP *, \fBPgno\fP)"
.br
.ti -1c
.RI "SQLITE_PRIVATE void \fBsqlite3PcacheTruncate\fP (\fBPCache\fP *, \fBPgno\fP x)"
.br
.ti -1c
.RI "SQLITE_PRIVATE \fBPgHdr\fP * \fBsqlite3PcacheDirtyList\fP (\fBPCache\fP *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE void \fBsqlite3PcacheClose\fP (\fBPCache\fP *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE void \fBsqlite3PcacheClearSyncFlags\fP (\fBPCache\fP *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE void \fBsqlite3PcacheClear\fP (\fBPCache\fP *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE int \fBsqlite3PcacheRefCount\fP (\fBPCache\fP *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE void \fBsqlite3PcacheRef\fP (\fBPgHdr\fP *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE int \fBsqlite3PcachePageRefcount\fP (\fBPgHdr\fP *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE int \fBsqlite3PcachePagecount\fP (\fBPCache\fP *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE void \fBsqlite3PcacheSetCachesize\fP (\fBPCache\fP *, int)"
.br
.ti -1c
.RI "SQLITE_PRIVATE void \fBsqlite3PCacheSetDefault\fP (void)"
.br
.ti -1c
.RI "SQLITE_PRIVATE int \fBsqlite3OsInit\fP (void)"
.br
.ti -1c
.RI "SQLITE_PRIVATE int \fBsqlite3OsClose\fP (\fBsqlite3_file\fP *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE int \fBsqlite3OsRead\fP (\fBsqlite3_file\fP *, void *, int amt, \fBi64\fP offset)"
.br
.ti -1c
.RI "SQLITE_PRIVATE int \fBsqlite3OsWrite\fP (\fBsqlite3_file\fP *, const void *, int amt, \fBi64\fP offset)"
.br
.ti -1c
.RI "SQLITE_PRIVATE int \fBsqlite3OsTruncate\fP (\fBsqlite3_file\fP *, \fBi64\fP size)"
.br
.ti -1c
.RI "SQLITE_PRIVATE int \fBsqlite3OsSync\fP (\fBsqlite3_file\fP *, int)"
.br
.ti -1c
.RI "SQLITE_PRIVATE int \fBsqlite3OsFileSize\fP (\fBsqlite3_file\fP *, \fBi64\fP *pSize)"
.br
.ti -1c
.RI "SQLITE_PRIVATE int \fBsqlite3OsLock\fP (\fBsqlite3_file\fP *, int)"
.br
.ti -1c
.RI "SQLITE_PRIVATE int \fBsqlite3OsUnlock\fP (\fBsqlite3_file\fP *, int)"
.br
.ti -1c
.RI "SQLITE_PRIVATE int \fBsqlite3OsCheckReservedLock\fP (\fBsqlite3_file\fP *id, int *pResOut)"
.br
.ti -1c
.RI "SQLITE_PRIVATE int \fBsqlite3OsFileControl\fP (\fBsqlite3_file\fP *, int, void *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE int \fBsqlite3OsSectorSize\fP (\fBsqlite3_file\fP *id)"
.br
.ti -1c
.RI "SQLITE_PRIVATE int \fBsqlite3OsDeviceCharacteristics\fP (\fBsqlite3_file\fP *id)"
.br
.ti -1c
.RI "SQLITE_PRIVATE int \fBsqlite3OsShmMap\fP (\fBsqlite3_file\fP *, int, int, int, void volatile **)"
.br
.ti -1c
.RI "SQLITE_PRIVATE int \fBsqlite3OsShmLock\fP (\fBsqlite3_file\fP *id, int, int, int)"
.br
.ti -1c
.RI "SQLITE_PRIVATE void \fBsqlite3OsShmBarrier\fP (\fBsqlite3_file\fP *id)"
.br
.ti -1c
.RI "SQLITE_PRIVATE int \fBsqlite3OsShmUnmap\fP (\fBsqlite3_file\fP *id, int)"
.br
.ti -1c
.RI "SQLITE_PRIVATE int \fBsqlite3OsOpen\fP (\fBsqlite3_vfs\fP *, const char *, \fBsqlite3_file\fP *, int, int *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE int \fBsqlite3OsDelete\fP (\fBsqlite3_vfs\fP *, const char *, int)"
.br
.ti -1c
.RI "SQLITE_PRIVATE int \fBsqlite3OsAccess\fP (\fBsqlite3_vfs\fP *, const char *, int, int *pResOut)"
.br
.ti -1c
.RI "SQLITE_PRIVATE int \fBsqlite3OsFullPathname\fP (\fBsqlite3_vfs\fP *, const char *, int, char *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE void * \fBsqlite3OsDlOpen\fP (\fBsqlite3_vfs\fP *, const char *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE void \fBsqlite3OsDlError\fP (\fBsqlite3_vfs\fP *, int, char *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE void \fBsqlite3OsDlClose\fP (\fBsqlite3_vfs\fP *, void *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE int \fBsqlite3OsRandomness\fP (\fBsqlite3_vfs\fP *, int, char *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE int \fBsqlite3OsSleep\fP (\fBsqlite3_vfs\fP *, int)"
.br
.ti -1c
.RI "SQLITE_PRIVATE int \fBsqlite3OsCurrentTimeInt64\fP (\fBsqlite3_vfs\fP *, \fBsqlite3_int64\fP *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE int \fBsqlite3OsOpenMalloc\fP (\fBsqlite3_vfs\fP *, const char *, \fBsqlite3_file\fP **, int, int *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE int \fBsqlite3OsCloseFree\fP (\fBsqlite3_file\fP *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE int \fBsqlite3WalkExpr\fP (\fBWalker\fP *, \fBExpr\fP *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE int \fBsqlite3WalkExprList\fP (\fBWalker\fP *, \fBExprList\fP *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE int \fBsqlite3WalkSelect\fP (\fBWalker\fP *, \fBSelect\fP *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE int \fBsqlite3WalkSelectExpr\fP (\fBWalker\fP *, \fBSelect\fP *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE int \fBsqlite3WalkSelectFrom\fP (\fBWalker\fP *, \fBSelect\fP *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE int \fBsqlite3CorruptError\fP (int)"
.br
.ti -1c
.RI "SQLITE_PRIVATE int \fBsqlite3MisuseError\fP (int)"
.br
.ti -1c
.RI "SQLITE_PRIVATE int \fBsqlite3CantopenError\fP (int)"
.br
.ti -1c
.RI "SQLITE_PRIVATE int \fBsqlite3StrICmp\fP (const char *, const char *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE int \fBsqlite3Strlen30\fP (const char *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE int \fBsqlite3MallocInit\fP (void)"
.br
.ti -1c
.RI "SQLITE_PRIVATE void \fBsqlite3MallocEnd\fP (void)"
.br
.ti -1c
.RI "SQLITE_PRIVATE void * \fBsqlite3Malloc\fP (int)"
.br
.ti -1c
.RI "SQLITE_PRIVATE void * \fBsqlite3MallocZero\fP (int)"
.br
.ti -1c
.RI "SQLITE_PRIVATE void * \fBsqlite3DbMallocZero\fP (\fBsqlite3\fP *, int)"
.br
.ti -1c
.RI "SQLITE_PRIVATE void * \fBsqlite3DbMallocRaw\fP (\fBsqlite3\fP *, int)"
.br
.ti -1c
.RI "SQLITE_PRIVATE char * \fBsqlite3DbStrDup\fP (\fBsqlite3\fP *, const char *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE char * \fBsqlite3DbStrNDup\fP (\fBsqlite3\fP *, const char *, int)"
.br
.ti -1c
.RI "SQLITE_PRIVATE void * \fBsqlite3Realloc\fP (void *, int)"
.br
.ti -1c
.RI "SQLITE_PRIVATE void * \fBsqlite3DbReallocOrFree\fP (\fBsqlite3\fP *, void *, int)"
.br
.ti -1c
.RI "SQLITE_PRIVATE void * \fBsqlite3DbRealloc\fP (\fBsqlite3\fP *, void *, int)"
.br
.ti -1c
.RI "SQLITE_PRIVATE void \fBsqlite3DbFree\fP (\fBsqlite3\fP *, void *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE int \fBsqlite3MallocSize\fP (void *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE int \fBsqlite3DbMallocSize\fP (\fBsqlite3\fP *, void *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE void * \fBsqlite3ScratchMalloc\fP (int)"
.br
.ti -1c
.RI "SQLITE_PRIVATE void \fBsqlite3ScratchFree\fP (void *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE void * \fBsqlite3PageMalloc\fP (int)"
.br
.ti -1c
.RI "SQLITE_PRIVATE void \fBsqlite3PageFree\fP (void *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE void \fBsqlite3MemSetDefault\fP (void)"
.br
.ti -1c
.RI "SQLITE_PRIVATE void \fBsqlite3BenignMallocHooks\fP (void(*)(void), void(*)(void))"
.br
.ti -1c
.RI "SQLITE_PRIVATE int \fBsqlite3HeapNearlyFull\fP (void)"
.br
.ti -1c
.RI "SQLITE_PRIVATE \fBsqlite3_mutex_methods\fP const * \fBsqlite3DefaultMutex\fP (void)"
.br
.ti -1c
.RI "SQLITE_PRIVATE \fBsqlite3_mutex_methods\fP const * \fBsqlite3NoopMutex\fP (void)"
.br
.ti -1c
.RI "SQLITE_PRIVATE \fBsqlite3_mutex\fP * \fBsqlite3MutexAlloc\fP (int)"
.br
.ti -1c
.RI "SQLITE_PRIVATE int \fBsqlite3MutexInit\fP (void)"
.br
.ti -1c
.RI "SQLITE_PRIVATE int \fBsqlite3MutexEnd\fP (void)"
.br
.ti -1c
.RI "SQLITE_PRIVATE int \fBsqlite3StatusValue\fP (int)"
.br
.ti -1c
.RI "SQLITE_PRIVATE void \fBsqlite3StatusAdd\fP (int, int)"
.br
.ti -1c
.RI "SQLITE_PRIVATE void \fBsqlite3StatusSet\fP (int, int)"
.br
.ti -1c
.RI "SQLITE_PRIVATE int \fBsqlite3IsNaN\fP (double)"
.br
.ti -1c
.RI "SQLITE_PRIVATE void \fBsqlite3VXPrintf\fP (\fBStrAccum\fP *, int, const char *, va_list)"
.br
.ti -1c
.RI "SQLITE_PRIVATE void \fBsqlite3XPrintf\fP (\fBStrAccum\fP *, const char *,...)"
.br
.ti -1c
.RI "SQLITE_PRIVATE char * \fBsqlite3MPrintf\fP (\fBsqlite3\fP *, const char *,...)"
.br
.ti -1c
.RI "SQLITE_PRIVATE char * \fBsqlite3VMPrintf\fP (\fBsqlite3\fP *, const char *, va_list)"
.br
.ti -1c
.RI "SQLITE_PRIVATE char * \fBsqlite3MAppendf\fP (\fBsqlite3\fP *, char *, const char *,...)"
.br
.ti -1c
.RI "SQLITE_PRIVATE void \fBsqlite3SetString\fP (char **, \fBsqlite3\fP *, const char *,...)"
.br
.ti -1c
.RI "SQLITE_PRIVATE void \fBsqlite3ErrorMsg\fP (\fBParse\fP *, const char *,...)"
.br
.ti -1c
.RI "SQLITE_PRIVATE int \fBsqlite3Dequote\fP (char *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE int \fBsqlite3KeywordCode\fP (const unsigned char *, int)"
.br
.ti -1c
.RI "SQLITE_PRIVATE int \fBsqlite3RunParser\fP (\fBParse\fP *, const char *, char **)"
.br
.ti -1c
.RI "SQLITE_PRIVATE void \fBsqlite3FinishCoding\fP (\fBParse\fP *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE int \fBsqlite3GetTempReg\fP (\fBParse\fP *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE void \fBsqlite3ReleaseTempReg\fP (\fBParse\fP *, int)"
.br
.ti -1c
.RI "SQLITE_PRIVATE int \fBsqlite3GetTempRange\fP (\fBParse\fP *, int)"
.br
.ti -1c
.RI "SQLITE_PRIVATE void \fBsqlite3ReleaseTempRange\fP (\fBParse\fP *, int, int)"
.br
.ti -1c
.RI "SQLITE_PRIVATE \fBExpr\fP * \fBsqlite3ExprAlloc\fP (\fBsqlite3\fP *, int, const \fBToken\fP *, int)"
.br
.ti -1c
.RI "SQLITE_PRIVATE \fBExpr\fP * \fBsqlite3Expr\fP (\fBsqlite3\fP *, int, const char *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE void \fBsqlite3ExprAttachSubtrees\fP (\fBsqlite3\fP *, \fBExpr\fP *, \fBExpr\fP *, \fBExpr\fP *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE \fBExpr\fP * \fBsqlite3PExpr\fP (\fBParse\fP *, int, \fBExpr\fP *, \fBExpr\fP *, const \fBToken\fP *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE \fBExpr\fP * \fBsqlite3ExprAnd\fP (\fBsqlite3\fP *, \fBExpr\fP *, \fBExpr\fP *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE \fBExpr\fP * \fBsqlite3ExprFunction\fP (\fBParse\fP *, \fBExprList\fP *, \fBToken\fP *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE void \fBsqlite3ExprAssignVarNumber\fP (\fBParse\fP *, \fBExpr\fP *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE void \fBsqlite3ExprDelete\fP (\fBsqlite3\fP *, \fBExpr\fP *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE \fBExprList\fP * \fBsqlite3ExprListAppend\fP (\fBParse\fP *, \fBExprList\fP *, \fBExpr\fP *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE void \fBsqlite3ExprListSetName\fP (\fBParse\fP *, \fBExprList\fP *, \fBToken\fP *, int)"
.br
.ti -1c
.RI "SQLITE_PRIVATE void \fBsqlite3ExprListSetSpan\fP (\fBParse\fP *, \fBExprList\fP *, \fBExprSpan\fP *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE void \fBsqlite3ExprListDelete\fP (\fBsqlite3\fP *, \fBExprList\fP *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE int \fBsqlite3Init\fP (\fBsqlite3\fP *, char **)"
.br
.ti -1c
.RI "SQLITE_PRIVATE int \fBsqlite3InitCallback\fP (void *, int, char **, char **)"
.br
.ti -1c
.RI "SQLITE_PRIVATE void \fBsqlite3Pragma\fP (\fBParse\fP *, \fBToken\fP *, \fBToken\fP *, \fBToken\fP *, int)"
.br
.ti -1c
.RI "SQLITE_PRIVATE void \fBsqlite3ResetInternalSchema\fP (\fBsqlite3\fP *, int)"
.br
.ti -1c
.RI "SQLITE_PRIVATE void \fBsqlite3BeginParse\fP (\fBParse\fP *, int)"
.br
.ti -1c
.RI "SQLITE_PRIVATE void \fBsqlite3CommitInternalChanges\fP (\fBsqlite3\fP *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE \fBTable\fP * \fBsqlite3ResultSetOfSelect\fP (\fBParse\fP *, \fBSelect\fP *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE void \fBsqlite3OpenMasterTable\fP (\fBParse\fP *, int)"
.br
.ti -1c
.RI "SQLITE_PRIVATE void \fBsqlite3StartTable\fP (\fBParse\fP *, \fBToken\fP *, \fBToken\fP *, int, int, int, int)"
.br
.ti -1c
.RI "SQLITE_PRIVATE void \fBsqlite3AddColumn\fP (\fBParse\fP *, \fBToken\fP *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE void \fBsqlite3AddNotNull\fP (\fBParse\fP *, int)"
.br
.ti -1c
.RI "SQLITE_PRIVATE void \fBsqlite3AddPrimaryKey\fP (\fBParse\fP *, \fBExprList\fP *, int, int, int)"
.br
.ti -1c
.RI "SQLITE_PRIVATE void \fBsqlite3AddCheckConstraint\fP (\fBParse\fP *, \fBExpr\fP *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE void \fBsqlite3AddColumnType\fP (\fBParse\fP *, \fBToken\fP *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE void \fBsqlite3AddDefaultValue\fP (\fBParse\fP *, \fBExprSpan\fP *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE void \fBsqlite3AddCollateType\fP (\fBParse\fP *, \fBToken\fP *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE void \fBsqlite3EndTable\fP (\fBParse\fP *, \fBToken\fP *, \fBToken\fP *, \fBSelect\fP *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE \fBBitvec\fP * \fBsqlite3BitvecCreate\fP (\fBu32\fP)"
.br
.ti -1c
.RI "SQLITE_PRIVATE int \fBsqlite3BitvecTest\fP (\fBBitvec\fP *, \fBu32\fP)"
.br
.ti -1c
.RI "SQLITE_PRIVATE int \fBsqlite3BitvecSet\fP (\fBBitvec\fP *, \fBu32\fP)"
.br
.ti -1c
.RI "SQLITE_PRIVATE void \fBsqlite3BitvecClear\fP (\fBBitvec\fP *, \fBu32\fP, void *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE void \fBsqlite3BitvecDestroy\fP (\fBBitvec\fP *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE \fBu32\fP \fBsqlite3BitvecSize\fP (\fBBitvec\fP *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE int \fBsqlite3BitvecBuiltinTest\fP (int, int *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE \fBRowSet\fP * \fBsqlite3RowSetInit\fP (\fBsqlite3\fP *, void *, unsigned int)"
.br
.ti -1c
.RI "SQLITE_PRIVATE void \fBsqlite3RowSetClear\fP (\fBRowSet\fP *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE void \fBsqlite3RowSetInsert\fP (\fBRowSet\fP *, \fBi64\fP)"
.br
.ti -1c
.RI "SQLITE_PRIVATE int \fBsqlite3RowSetTest\fP (\fBRowSet\fP *, \fBu8\fP iBatch, \fBi64\fP)"
.br
.ti -1c
.RI "SQLITE_PRIVATE int \fBsqlite3RowSetNext\fP (\fBRowSet\fP *, \fBi64\fP *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE void \fBsqlite3CreateView\fP (\fBParse\fP *, \fBToken\fP *, \fBToken\fP *, \fBToken\fP *, \fBSelect\fP *, int, int)"
.br
.ti -1c
.RI "SQLITE_PRIVATE int \fBsqlite3ViewGetColumnNames\fP (\fBParse\fP *, \fBTable\fP *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE void \fBsqlite3DropTable\fP (\fBParse\fP *, \fBSrcList\fP *, int, int)"
.br
.ti -1c
.RI "SQLITE_PRIVATE void \fBsqlite3DeleteTable\fP (\fBsqlite3\fP *, \fBTable\fP *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE void \fBsqlite3AutoincrementBegin\fP (\fBParse\fP *pParse)"
.br
.ti -1c
.RI "SQLITE_PRIVATE void \fBsqlite3AutoincrementEnd\fP (\fBParse\fP *pParse)"
.br
.ti -1c
.RI "SQLITE_PRIVATE void \fBsqlite3Insert\fP (\fBParse\fP *, \fBSrcList\fP *, \fBExprList\fP *, \fBSelect\fP *, \fBIdList\fP *, int)"
.br
.ti -1c
.RI "SQLITE_PRIVATE void * \fBsqlite3ArrayAllocate\fP (\fBsqlite3\fP *, void *, int, int, int *, int *, int *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE \fBIdList\fP * \fBsqlite3IdListAppend\fP (\fBsqlite3\fP *, \fBIdList\fP *, \fBToken\fP *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE int \fBsqlite3IdListIndex\fP (\fBIdList\fP *, const char *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE \fBSrcList\fP * \fBsqlite3SrcListEnlarge\fP (\fBsqlite3\fP *, \fBSrcList\fP *, int, int)"
.br
.ti -1c
.RI "SQLITE_PRIVATE \fBSrcList\fP * \fBsqlite3SrcListAppend\fP (\fBsqlite3\fP *, \fBSrcList\fP *, \fBToken\fP *, \fBToken\fP *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE \fBSrcList\fP * \fBsqlite3SrcListAppendFromTerm\fP (\fBParse\fP *, \fBSrcList\fP *, \fBToken\fP *, \fBToken\fP *, \fBToken\fP *, \fBSelect\fP *, \fBExpr\fP *, \fBIdList\fP *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE void \fBsqlite3SrcListIndexedBy\fP (\fBParse\fP *, \fBSrcList\fP *, \fBToken\fP *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE int \fBsqlite3IndexedByLookup\fP (\fBParse\fP *, struct SrcList_item *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE void \fBsqlite3SrcListShiftJoinType\fP (\fBSrcList\fP *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE void \fBsqlite3SrcListAssignCursors\fP (\fBParse\fP *, \fBSrcList\fP *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE void \fBsqlite3IdListDelete\fP (\fBsqlite3\fP *, \fBIdList\fP *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE void \fBsqlite3SrcListDelete\fP (\fBsqlite3\fP *, \fBSrcList\fP *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE \fBIndex\fP * \fBsqlite3CreateIndex\fP (\fBParse\fP *, \fBToken\fP *, \fBToken\fP *, \fBSrcList\fP *, \fBExprList\fP *, int, \fBToken\fP *, \fBToken\fP *, int, int)"
.br
.ti -1c
.RI "SQLITE_PRIVATE void \fBsqlite3DropIndex\fP (\fBParse\fP *, \fBSrcList\fP *, int)"
.br
.ti -1c
.RI "SQLITE_PRIVATE int \fBsqlite3Select\fP (\fBParse\fP *, \fBSelect\fP *, \fBSelectDest\fP *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE \fBSelect\fP * \fBsqlite3SelectNew\fP (\fBParse\fP *, \fBExprList\fP *, \fBSrcList\fP *, \fBExpr\fP *, \fBExprList\fP *, \fBExpr\fP *, \fBExprList\fP *, int, \fBExpr\fP *, \fBExpr\fP *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE void \fBsqlite3SelectDelete\fP (\fBsqlite3\fP *, \fBSelect\fP *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE \fBTable\fP * \fBsqlite3SrcListLookup\fP (\fBParse\fP *, \fBSrcList\fP *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE int \fBsqlite3IsReadOnly\fP (\fBParse\fP *, \fBTable\fP *, int)"
.br
.ti -1c
.RI "SQLITE_PRIVATE void \fBsqlite3OpenTable\fP (\fBParse\fP *, int iCur, int iDb, \fBTable\fP *, int)"
.br
.ti -1c
.RI "SQLITE_PRIVATE void \fBsqlite3DeleteFrom\fP (\fBParse\fP *, \fBSrcList\fP *, \fBExpr\fP *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE void \fBsqlite3Update\fP (\fBParse\fP *, \fBSrcList\fP *, \fBExprList\fP *, \fBExpr\fP *, int)"
.br
.ti -1c
.RI "SQLITE_PRIVATE \fBWhereInfo\fP * \fBsqlite3WhereBegin\fP (\fBParse\fP *, \fBSrcList\fP *, \fBExpr\fP *, \fBExprList\fP **, \fBu16\fP)"
.br
.ti -1c
.RI "SQLITE_PRIVATE void \fBsqlite3WhereEnd\fP (\fBWhereInfo\fP *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE int \fBsqlite3ExprCodeGetColumn\fP (\fBParse\fP *, \fBTable\fP *, int, int, int)"
.br
.ti -1c
.RI "SQLITE_PRIVATE void \fBsqlite3ExprCodeGetColumnOfTable\fP (\fBVdbe\fP *, \fBTable\fP *, int, int, int)"
.br
.ti -1c
.RI "SQLITE_PRIVATE void \fBsqlite3ExprCodeMove\fP (\fBParse\fP *, int, int, int)"
.br
.ti -1c
.RI "SQLITE_PRIVATE void \fBsqlite3ExprCodeCopy\fP (\fBParse\fP *, int, int, int)"
.br
.ti -1c
.RI "SQLITE_PRIVATE void \fBsqlite3ExprCacheStore\fP (\fBParse\fP *, int, int, int)"
.br
.ti -1c
.RI "SQLITE_PRIVATE void \fBsqlite3ExprCachePush\fP (\fBParse\fP *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE void \fBsqlite3ExprCachePop\fP (\fBParse\fP *, int)"
.br
.ti -1c
.RI "SQLITE_PRIVATE void \fBsqlite3ExprCacheRemove\fP (\fBParse\fP *, int, int)"
.br
.ti -1c
.RI "SQLITE_PRIVATE void \fBsqlite3ExprCacheClear\fP (\fBParse\fP *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE void \fBsqlite3ExprCacheAffinityChange\fP (\fBParse\fP *, int, int)"
.br
.ti -1c
.RI "SQLITE_PRIVATE int \fBsqlite3ExprCode\fP (\fBParse\fP *, \fBExpr\fP *, int)"
.br
.ti -1c
.RI "SQLITE_PRIVATE int \fBsqlite3ExprCodeTemp\fP (\fBParse\fP *, \fBExpr\fP *, int *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE int \fBsqlite3ExprCodeTarget\fP (\fBParse\fP *, \fBExpr\fP *, int)"
.br
.ti -1c
.RI "SQLITE_PRIVATE int \fBsqlite3ExprCodeAndCache\fP (\fBParse\fP *, \fBExpr\fP *, int)"
.br
.ti -1c
.RI "SQLITE_PRIVATE void \fBsqlite3ExprCodeConstants\fP (\fBParse\fP *, \fBExpr\fP *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE int \fBsqlite3ExprCodeExprList\fP (\fBParse\fP *, \fBExprList\fP *, int, int)"
.br
.ti -1c
.RI "SQLITE_PRIVATE void \fBsqlite3ExprIfTrue\fP (\fBParse\fP *, \fBExpr\fP *, int, int)"
.br
.ti -1c
.RI "SQLITE_PRIVATE void \fBsqlite3ExprIfFalse\fP (\fBParse\fP *, \fBExpr\fP *, int, int)"
.br
.ti -1c
.RI "SQLITE_PRIVATE \fBTable\fP * \fBsqlite3FindTable\fP (\fBsqlite3\fP *, const char *, const char *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE \fBTable\fP * \fBsqlite3LocateTable\fP (\fBParse\fP *, int isView, const char *, const char *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE \fBIndex\fP * \fBsqlite3FindIndex\fP (\fBsqlite3\fP *, const char *, const char *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE void \fBsqlite3UnlinkAndDeleteTable\fP (\fBsqlite3\fP *, int, const char *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE void \fBsqlite3UnlinkAndDeleteIndex\fP (\fBsqlite3\fP *, int, const char *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE void \fBsqlite3Vacuum\fP (\fBParse\fP *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE int \fBsqlite3RunVacuum\fP (char **, \fBsqlite3\fP *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE char * \fBsqlite3NameFromToken\fP (\fBsqlite3\fP *, \fBToken\fP *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE int \fBsqlite3ExprCompare\fP (\fBExpr\fP *, \fBExpr\fP *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE int \fBsqlite3ExprListCompare\fP (\fBExprList\fP *, \fBExprList\fP *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE void \fBsqlite3ExprAnalyzeAggregates\fP (\fBNameContext\fP *, \fBExpr\fP *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE void \fBsqlite3ExprAnalyzeAggList\fP (\fBNameContext\fP *, \fBExprList\fP *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE \fBVdbe\fP * \fBsqlite3GetVdbe\fP (\fBParse\fP *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE void \fBsqlite3PrngSaveState\fP (void)"
.br
.ti -1c
.RI "SQLITE_PRIVATE void \fBsqlite3PrngRestoreState\fP (void)"
.br
.ti -1c
.RI "SQLITE_PRIVATE void \fBsqlite3PrngResetState\fP (void)"
.br
.ti -1c
.RI "SQLITE_PRIVATE void \fBsqlite3RollbackAll\fP (\fBsqlite3\fP *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE void \fBsqlite3CodeVerifySchema\fP (\fBParse\fP *, int)"
.br
.ti -1c
.RI "SQLITE_PRIVATE void \fBsqlite3BeginTransaction\fP (\fBParse\fP *, int)"
.br
.ti -1c
.RI "SQLITE_PRIVATE void \fBsqlite3CommitTransaction\fP (\fBParse\fP *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE void \fBsqlite3RollbackTransaction\fP (\fBParse\fP *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE void \fBsqlite3Savepoint\fP (\fBParse\fP *, int, \fBToken\fP *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE void \fBsqlite3CloseSavepoints\fP (\fBsqlite3\fP *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE int \fBsqlite3ExprIsConstant\fP (\fBExpr\fP *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE int \fBsqlite3ExprIsConstantNotJoin\fP (\fBExpr\fP *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE int \fBsqlite3ExprIsConstantOrFunction\fP (\fBExpr\fP *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE int \fBsqlite3ExprIsInteger\fP (\fBExpr\fP *, int *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE int \fBsqlite3ExprCanBeNull\fP (const \fBExpr\fP *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE void \fBsqlite3ExprCodeIsNullJump\fP (\fBVdbe\fP *, const \fBExpr\fP *, int, int)"
.br
.ti -1c
.RI "SQLITE_PRIVATE int \fBsqlite3ExprNeedsNoAffinityChange\fP (const \fBExpr\fP *, char)"
.br
.ti -1c
.RI "SQLITE_PRIVATE int \fBsqlite3IsRowid\fP (const char *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE void \fBsqlite3GenerateRowDelete\fP (\fBParse\fP *, \fBTable\fP *, int, int, int, \fBTrigger\fP *, int)"
.br
.ti -1c
.RI "SQLITE_PRIVATE void \fBsqlite3GenerateRowIndexDelete\fP (\fBParse\fP *, \fBTable\fP *, int, int *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE int \fBsqlite3GenerateIndexKey\fP (\fBParse\fP *, \fBIndex\fP *, int, int, int)"
.br
.ti -1c
.RI "SQLITE_PRIVATE void \fBsqlite3GenerateConstraintChecks\fP (\fBParse\fP *, \fBTable\fP *, int, int, int *, int, int, int, int, int *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE void \fBsqlite3CompleteInsertion\fP (\fBParse\fP *, \fBTable\fP *, int, int, int *, int, int, int)"
.br
.ti -1c
.RI "SQLITE_PRIVATE int \fBsqlite3OpenTableAndIndices\fP (\fBParse\fP *, \fBTable\fP *, int, int)"
.br
.ti -1c
.RI "SQLITE_PRIVATE void \fBsqlite3BeginWriteOperation\fP (\fBParse\fP *, int, int)"
.br
.ti -1c
.RI "SQLITE_PRIVATE void \fBsqlite3MultiWrite\fP (\fBParse\fP *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE void \fBsqlite3MayAbort\fP (\fBParse\fP *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE void \fBsqlite3HaltConstraint\fP (\fBParse\fP *, int, char *, int)"
.br
.ti -1c
.RI "SQLITE_PRIVATE \fBExpr\fP * \fBsqlite3ExprDup\fP (\fBsqlite3\fP *, \fBExpr\fP *, int)"
.br
.ti -1c
.RI "SQLITE_PRIVATE \fBExprList\fP * \fBsqlite3ExprListDup\fP (\fBsqlite3\fP *, \fBExprList\fP *, int)"
.br
.ti -1c
.RI "SQLITE_PRIVATE \fBSrcList\fP * \fBsqlite3SrcListDup\fP (\fBsqlite3\fP *, \fBSrcList\fP *, int)"
.br
.ti -1c
.RI "SQLITE_PRIVATE \fBIdList\fP * \fBsqlite3IdListDup\fP (\fBsqlite3\fP *, \fBIdList\fP *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE \fBSelect\fP * \fBsqlite3SelectDup\fP (\fBsqlite3\fP *, \fBSelect\fP *, int)"
.br
.ti -1c
.RI "SQLITE_PRIVATE void \fBsqlite3FuncDefInsert\fP (\fBFuncDefHash\fP *, \fBFuncDef\fP *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE \fBFuncDef\fP * \fBsqlite3FindFunction\fP (\fBsqlite3\fP *, const char *, int, int, \fBu8\fP, int)"
.br
.ti -1c
.RI "SQLITE_PRIVATE void \fBsqlite3RegisterBuiltinFunctions\fP (\fBsqlite3\fP *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE void \fBsqlite3RegisterDateTimeFunctions\fP (void)"
.br
.ti -1c
.RI "SQLITE_PRIVATE void \fBsqlite3RegisterGlobalFunctions\fP (void)"
.br
.ti -1c
.RI "SQLITE_PRIVATE int \fBsqlite3SafetyCheckOk\fP (\fBsqlite3\fP *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE int \fBsqlite3SafetyCheckSickOrOk\fP (\fBsqlite3\fP *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE void \fBsqlite3ChangeCookie\fP (\fBParse\fP *, int)"
.br
.ti -1c
.RI "SQLITE_PRIVATE void \fBsqlite3MaterializeView\fP (\fBParse\fP *, \fBTable\fP *, \fBExpr\fP *, int)"
.br
.ti -1c
.RI "SQLITE_PRIVATE void \fBsqlite3BeginTrigger\fP (\fBParse\fP *, \fBToken\fP *, \fBToken\fP *, int, int, \fBIdList\fP *, \fBSrcList\fP *, \fBExpr\fP *, int, int)"
.br
.ti -1c
.RI "SQLITE_PRIVATE void \fBsqlite3FinishTrigger\fP (\fBParse\fP *, \fBTriggerStep\fP *, \fBToken\fP *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE void \fBsqlite3DropTrigger\fP (\fBParse\fP *, \fBSrcList\fP *, int)"
.br
.ti -1c
.RI "SQLITE_PRIVATE void \fBsqlite3DropTriggerPtr\fP (\fBParse\fP *, \fBTrigger\fP *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE \fBTrigger\fP * \fBsqlite3TriggersExist\fP (\fBParse\fP *, \fBTable\fP *, int, \fBExprList\fP *, int *pMask)"
.br
.ti -1c
.RI "SQLITE_PRIVATE \fBTrigger\fP * \fBsqlite3TriggerList\fP (\fBParse\fP *, \fBTable\fP *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE void \fBsqlite3CodeRowTrigger\fP (\fBParse\fP *, \fBTrigger\fP *, int, \fBExprList\fP *, int, \fBTable\fP *, int, int, int)"
.br
.ti -1c
.RI "SQLITE_PRIVATE void \fBsqlite3CodeRowTriggerDirect\fP (\fBParse\fP *, \fBTrigger\fP *, \fBTable\fP *, int, int, int)"
.br
.ti -1c
.RI "void \fBsqliteViewTriggers\fP (\fBParse\fP *, \fBTable\fP *, \fBExpr\fP *, int, \fBExprList\fP *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE void \fBsqlite3DeleteTriggerStep\fP (\fBsqlite3\fP *, \fBTriggerStep\fP *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE \fBTriggerStep\fP * \fBsqlite3TriggerSelectStep\fP (\fBsqlite3\fP *, \fBSelect\fP *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE \fBTriggerStep\fP * \fBsqlite3TriggerInsertStep\fP (\fBsqlite3\fP *, \fBToken\fP *, \fBIdList\fP *, \fBExprList\fP *, \fBSelect\fP *, \fBu8\fP)"
.br
.ti -1c
.RI "SQLITE_PRIVATE \fBTriggerStep\fP * \fBsqlite3TriggerUpdateStep\fP (\fBsqlite3\fP *, \fBToken\fP *, \fBExprList\fP *, \fBExpr\fP *, \fBu8\fP)"
.br
.ti -1c
.RI "SQLITE_PRIVATE \fBTriggerStep\fP * \fBsqlite3TriggerDeleteStep\fP (\fBsqlite3\fP *, \fBToken\fP *, \fBExpr\fP *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE void \fBsqlite3DeleteTrigger\fP (\fBsqlite3\fP *, \fBTrigger\fP *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE void \fBsqlite3UnlinkAndDeleteTrigger\fP (\fBsqlite3\fP *, int, const char *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE \fBu32\fP \fBsqlite3TriggerColmask\fP (\fBParse\fP *, \fBTrigger\fP *, \fBExprList\fP *, int, int, \fBTable\fP *, int)"
.br
.ti -1c
.RI "SQLITE_PRIVATE int \fBsqlite3JoinType\fP (\fBParse\fP *, \fBToken\fP *, \fBToken\fP *, \fBToken\fP *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE void \fBsqlite3CreateForeignKey\fP (\fBParse\fP *, \fBExprList\fP *, \fBToken\fP *, \fBExprList\fP *, int)"
.br
.ti -1c
.RI "SQLITE_PRIVATE void \fBsqlite3DeferForeignKey\fP (\fBParse\fP *, int)"
.br
.ti -1c
.RI "SQLITE_PRIVATE void \fBsqlite3AuthRead\fP (\fBParse\fP *, \fBExpr\fP *, \fBSchema\fP *, \fBSrcList\fP *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE int \fBsqlite3AuthCheck\fP (\fBParse\fP *, int, const char *, const char *, const char *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE void \fBsqlite3AuthContextPush\fP (\fBParse\fP *, \fBAuthContext\fP *, const char *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE void \fBsqlite3AuthContextPop\fP (\fBAuthContext\fP *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE int \fBsqlite3AuthReadCol\fP (\fBParse\fP *, const char *, const char *, int)"
.br
.ti -1c
.RI "SQLITE_PRIVATE void \fBsqlite3Attach\fP (\fBParse\fP *, \fBExpr\fP *, \fBExpr\fP *, \fBExpr\fP *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE void \fBsqlite3Detach\fP (\fBParse\fP *, \fBExpr\fP *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE int \fBsqlite3FixInit\fP (\fBDbFixer\fP *, \fBParse\fP *, int, const char *, const \fBToken\fP *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE int \fBsqlite3FixSrcList\fP (\fBDbFixer\fP *, \fBSrcList\fP *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE int \fBsqlite3FixSelect\fP (\fBDbFixer\fP *, \fBSelect\fP *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE int \fBsqlite3FixExpr\fP (\fBDbFixer\fP *, \fBExpr\fP *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE int \fBsqlite3FixExprList\fP (\fBDbFixer\fP *, \fBExprList\fP *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE int \fBsqlite3FixTriggerStep\fP (\fBDbFixer\fP *, \fBTriggerStep\fP *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE int \fBsqlite3AtoF\fP (const char *z, double *, int, \fBu8\fP)"
.br
.ti -1c
.RI "SQLITE_PRIVATE int \fBsqlite3GetInt32\fP (const char *, int *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE int \fBsqlite3Utf16ByteLen\fP (const void *pData, int nChar)"
.br
.ti -1c
.RI "SQLITE_PRIVATE int \fBsqlite3Utf8CharLen\fP (const char *pData, int nByte)"
.br
.ti -1c
.RI "SQLITE_PRIVATE int \fBsqlite3Utf8Read\fP (const \fBu8\fP *, const \fBu8\fP **)"
.br
.ti -1c
.RI "SQLITE_PRIVATE int \fBsqlite3PutVarint\fP (unsigned char *, \fBu64\fP)"
.br
.ti -1c
.RI "SQLITE_PRIVATE int \fBsqlite3PutVarint32\fP (unsigned char *, \fBu32\fP)"
.br
.ti -1c
.RI "SQLITE_PRIVATE \fBu8\fP \fBsqlite3GetVarint\fP (const unsigned char *, \fBu64\fP *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE \fBu8\fP \fBsqlite3GetVarint32\fP (const unsigned char *, \fBu32\fP *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE int \fBsqlite3VarintLen\fP (\fBu64\fP v)"
.br
.ti -1c
.RI "SQLITE_PRIVATE const char * \fBsqlite3IndexAffinityStr\fP (\fBVdbe\fP *, \fBIndex\fP *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE void \fBsqlite3TableAffinityStr\fP (\fBVdbe\fP *, \fBTable\fP *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE char \fBsqlite3CompareAffinity\fP (\fBExpr\fP *pExpr, char aff2)"
.br
.ti -1c
.RI "SQLITE_PRIVATE int \fBsqlite3IndexAffinityOk\fP (\fBExpr\fP *pExpr, char idx_affinity)"
.br
.ti -1c
.RI "SQLITE_PRIVATE char \fBsqlite3ExprAffinity\fP (\fBExpr\fP *pExpr)"
.br
.ti -1c
.RI "SQLITE_PRIVATE int \fBsqlite3Atoi64\fP (const char *, \fBi64\fP *, int, \fBu8\fP)"
.br
.ti -1c
.RI "SQLITE_PRIVATE void \fBsqlite3Error\fP (\fBsqlite3\fP *, int, const char *,...)"
.br
.ti -1c
.RI "SQLITE_PRIVATE void * \fBsqlite3HexToBlob\fP (\fBsqlite3\fP *, const char *z, int n)"
.br
.ti -1c
.RI "SQLITE_PRIVATE int \fBsqlite3TwoPartName\fP (\fBParse\fP *, \fBToken\fP *, \fBToken\fP *, \fBToken\fP **)"
.br
.ti -1c
.RI "SQLITE_PRIVATE const char * \fBsqlite3ErrStr\fP (int)"
.br
.ti -1c
.RI "SQLITE_PRIVATE int \fBsqlite3ReadSchema\fP (\fBParse\fP *pParse)"
.br
.ti -1c
.RI "SQLITE_PRIVATE \fBCollSeq\fP * \fBsqlite3FindCollSeq\fP (\fBsqlite3\fP *, \fBu8\fP enc, const char *, int)"
.br
.ti -1c
.RI "SQLITE_PRIVATE \fBCollSeq\fP * \fBsqlite3LocateCollSeq\fP (\fBParse\fP *pParse, const char *zName)"
.br
.ti -1c
.RI "SQLITE_PRIVATE \fBCollSeq\fP * \fBsqlite3ExprCollSeq\fP (\fBParse\fP *pParse, \fBExpr\fP *pExpr)"
.br
.ti -1c
.RI "SQLITE_PRIVATE \fBExpr\fP * \fBsqlite3ExprSetColl\fP (\fBExpr\fP *, \fBCollSeq\fP *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE \fBExpr\fP * \fBsqlite3ExprSetCollByToken\fP (\fBParse\fP *pParse, \fBExpr\fP *, \fBToken\fP *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE int \fBsqlite3CheckCollSeq\fP (\fBParse\fP *, \fBCollSeq\fP *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE int \fBsqlite3CheckObjectName\fP (\fBParse\fP *, const char *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE void \fBsqlite3VdbeSetChanges\fP (\fBsqlite3\fP *, int)"
.br
.ti -1c
.RI "SQLITE_PRIVATE const void * \fBsqlite3ValueText\fP (\fBsqlite3_value\fP *, \fBu8\fP)"
.br
.ti -1c
.RI "SQLITE_PRIVATE int \fBsqlite3ValueBytes\fP (\fBsqlite3_value\fP *, \fBu8\fP)"
.br
.ti -1c
.RI "SQLITE_PRIVATE void \fBsqlite3ValueSetStr\fP (\fBsqlite3_value\fP *, int, const void *, \fBu8\fP, void(*)(void *))"
.br
.ti -1c
.RI "SQLITE_PRIVATE void \fBsqlite3ValueFree\fP (\fBsqlite3_value\fP *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE \fBsqlite3_value\fP * \fBsqlite3ValueNew\fP (\fBsqlite3\fP *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE char * \fBsqlite3Utf16to8\fP (\fBsqlite3\fP *, const void *, int, \fBu8\fP)"
.br
.ti -1c
.RI "SQLITE_PRIVATE int \fBsqlite3ValueFromExpr\fP (\fBsqlite3\fP *, \fBExpr\fP *, \fBu8\fP, \fBu8\fP, \fBsqlite3_value\fP **)"
.br
.ti -1c
.RI "SQLITE_PRIVATE void \fBsqlite3ValueApplyAffinity\fP (\fBsqlite3_value\fP *, \fBu8\fP, \fBu8\fP)"
.br
.ti -1c
.RI "SQLITE_PRIVATE void \fBsqlite3RootPageMoved\fP (\fBDb\fP *, int, int)"
.br
.ti -1c
.RI "SQLITE_PRIVATE void \fBsqlite3Reindex\fP (\fBParse\fP *, \fBToken\fP *, \fBToken\fP *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE void \fBsqlite3AlterFunctions\fP (void)"
.br
.ti -1c
.RI "SQLITE_PRIVATE void \fBsqlite3AlterRenameTable\fP (\fBParse\fP *, \fBSrcList\fP *, \fBToken\fP *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE int \fBsqlite3GetToken\fP (const unsigned char *, int *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE void \fBsqlite3NestedParse\fP (\fBParse\fP *, const char *,...)"
.br
.ti -1c
.RI "SQLITE_PRIVATE void \fBsqlite3ExpirePreparedStatements\fP (\fBsqlite3\fP *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE int \fBsqlite3CodeSubselect\fP (\fBParse\fP *, \fBExpr\fP *, int, int)"
.br
.ti -1c
.RI "SQLITE_PRIVATE void \fBsqlite3SelectPrep\fP (\fBParse\fP *, \fBSelect\fP *, \fBNameContext\fP *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE int \fBsqlite3ResolveExprNames\fP (\fBNameContext\fP *, \fBExpr\fP *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE void \fBsqlite3ResolveSelectNames\fP (\fBParse\fP *, \fBSelect\fP *, \fBNameContext\fP *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE int \fBsqlite3ResolveOrderGroupBy\fP (\fBParse\fP *, \fBSelect\fP *, \fBExprList\fP *, const char *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE void \fBsqlite3ColumnDefault\fP (\fBVdbe\fP *, \fBTable\fP *, int, int)"
.br
.ti -1c
.RI "SQLITE_PRIVATE void \fBsqlite3AlterFinishAddColumn\fP (\fBParse\fP *, \fBToken\fP *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE void \fBsqlite3AlterBeginAddColumn\fP (\fBParse\fP *, \fBSrcList\fP *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE \fBCollSeq\fP * \fBsqlite3GetCollSeq\fP (\fBsqlite3\fP *, \fBu8\fP, \fBCollSeq\fP *, const char *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE char \fBsqlite3AffinityType\fP (const char *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE void \fBsqlite3Analyze\fP (\fBParse\fP *, \fBToken\fP *, \fBToken\fP *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE int \fBsqlite3InvokeBusyHandler\fP (\fBBusyHandler\fP *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE int \fBsqlite3FindDb\fP (\fBsqlite3\fP *, \fBToken\fP *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE int \fBsqlite3FindDbName\fP (\fBsqlite3\fP *, const char *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE int \fBsqlite3AnalysisLoad\fP (\fBsqlite3\fP *, int iDB)"
.br
.ti -1c
.RI "SQLITE_PRIVATE void \fBsqlite3DeleteIndexSamples\fP (\fBsqlite3\fP *, \fBIndex\fP *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE void \fBsqlite3DefaultRowEst\fP (\fBIndex\fP *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE void \fBsqlite3RegisterLikeFunctions\fP (\fBsqlite3\fP *, int)"
.br
.ti -1c
.RI "SQLITE_PRIVATE int \fBsqlite3IsLikeFunction\fP (\fBsqlite3\fP *, \fBExpr\fP *, int *, char *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE void \fBsqlite3MinimumFileFormat\fP (\fBParse\fP *, int, int)"
.br
.ti -1c
.RI "SQLITE_PRIVATE void \fBsqlite3SchemaFree\fP (void *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE \fBSchema\fP * \fBsqlite3SchemaGet\fP (\fBsqlite3\fP *, \fBBtree\fP *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE int \fBsqlite3SchemaToIndex\fP (\fBsqlite3\fP *\fBdb\fP, \fBSchema\fP *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE \fBKeyInfo\fP * \fBsqlite3IndexKeyinfo\fP (\fBParse\fP *, \fBIndex\fP *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE int \fBsqlite3CreateFunc\fP (\fBsqlite3\fP *, const char *, int, int, void *, void(*)(\fBsqlite3_context\fP *, int, \fBsqlite3_value\fP **), void(*)(\fBsqlite3_context\fP *, int, \fBsqlite3_value\fP **), void(*)(\fBsqlite3_context\fP *), \fBFuncDestructor\fP *pDestructor)"
.br
.ti -1c
.RI "SQLITE_PRIVATE int \fBsqlite3ApiExit\fP (\fBsqlite3\fP *\fBdb\fP, int)"
.br
.ti -1c
.RI "SQLITE_PRIVATE int \fBsqlite3OpenTempDatabase\fP (\fBParse\fP *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE void \fBsqlite3StrAccumInit\fP (\fBStrAccum\fP *, char *, int, int)"
.br
.ti -1c
.RI "SQLITE_PRIVATE void \fBsqlite3StrAccumAppend\fP (\fBStrAccum\fP *, const char *, int)"
.br
.ti -1c
.RI "SQLITE_PRIVATE char * \fBsqlite3StrAccumFinish\fP (\fBStrAccum\fP *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE void \fBsqlite3StrAccumReset\fP (\fBStrAccum\fP *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE void \fBsqlite3SelectDestInit\fP (\fBSelectDest\fP *, int, int)"
.br
.ti -1c
.RI "SQLITE_PRIVATE \fBExpr\fP * \fBsqlite3CreateColumnExpr\fP (\fBsqlite3\fP *, \fBSrcList\fP *, int, int)"
.br
.ti -1c
.RI "SQLITE_PRIVATE void \fBsqlite3BackupRestart\fP (\fBsqlite3_backup\fP *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE void \fBsqlite3BackupUpdate\fP (\fBsqlite3_backup\fP *, \fBPgno\fP, const \fBu8\fP *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE void * \fBsqlite3ParserAlloc\fP (void *(*)(size_t))"
.br
.ti -1c
.RI "SQLITE_PRIVATE void \fBsqlite3ParserFree\fP (void *, void(*)(void *))"
.br
.ti -1c
.RI "SQLITE_PRIVATE void \fBsqlite3Parser\fP (void *, int, \fBToken\fP, \fBParse\fP *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE void \fBsqlite3AutoLoadExtensions\fP (\fBsqlite3\fP *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE void \fBsqlite3CloseExtensions\fP (\fBsqlite3\fP *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE void \fBsqlite3TableLock\fP (\fBParse\fP *, int, int, \fBu8\fP, const char *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE void \fBsqlite3VtabClear\fP (\fBsqlite3\fP *\fBdb\fP, \fBTable\fP *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE int \fBsqlite3VtabSync\fP (\fBsqlite3\fP *\fBdb\fP, char **)"
.br
.ti -1c
.RI "SQLITE_PRIVATE int \fBsqlite3VtabRollback\fP (\fBsqlite3\fP *\fBdb\fP)"
.br
.ti -1c
.RI "SQLITE_PRIVATE int \fBsqlite3VtabCommit\fP (\fBsqlite3\fP *\fBdb\fP)"
.br
.ti -1c
.RI "SQLITE_PRIVATE void \fBsqlite3VtabLock\fP (\fBVTable\fP *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE void \fBsqlite3VtabUnlock\fP (\fBVTable\fP *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE void \fBsqlite3VtabUnlockList\fP (\fBsqlite3\fP *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE void \fBsqlite3VtabMakeWritable\fP (\fBParse\fP *, \fBTable\fP *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE void \fBsqlite3VtabBeginParse\fP (\fBParse\fP *, \fBToken\fP *, \fBToken\fP *, \fBToken\fP *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE void \fBsqlite3VtabFinishParse\fP (\fBParse\fP *, \fBToken\fP *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE void \fBsqlite3VtabArgInit\fP (\fBParse\fP *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE void \fBsqlite3VtabArgExtend\fP (\fBParse\fP *, \fBToken\fP *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE int \fBsqlite3VtabCallCreate\fP (\fBsqlite3\fP *, int, const char *, char **)"
.br
.ti -1c
.RI "SQLITE_PRIVATE int \fBsqlite3VtabCallConnect\fP (\fBParse\fP *, \fBTable\fP *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE int \fBsqlite3VtabCallDestroy\fP (\fBsqlite3\fP *, int, const char *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE int \fBsqlite3VtabBegin\fP (\fBsqlite3\fP *, \fBVTable\fP *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE \fBFuncDef\fP * \fBsqlite3VtabOverloadFunction\fP (\fBsqlite3\fP *, \fBFuncDef\fP *, int nArg, \fBExpr\fP *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE void \fBsqlite3InvalidFunction\fP (\fBsqlite3_context\fP *, int, \fBsqlite3_value\fP **)"
.br
.ti -1c
.RI "SQLITE_PRIVATE int \fBsqlite3VdbeParameterIndex\fP (\fBVdbe\fP *, const char *, int)"
.br
.ti -1c
.RI "SQLITE_PRIVATE int \fBsqlite3TransferBindings\fP (\fBsqlite3_stmt\fP *, \fBsqlite3_stmt\fP *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE int \fBsqlite3Reprepare\fP (\fBVdbe\fP *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE void \fBsqlite3ExprListCheckLength\fP (\fBParse\fP *, \fBExprList\fP *, const char *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE \fBCollSeq\fP * \fBsqlite3BinaryCompareCollSeq\fP (\fBParse\fP *, \fBExpr\fP *, \fBExpr\fP *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE int \fBsqlite3TempInMemory\fP (const \fBsqlite3\fP *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE \fBVTable\fP * \fBsqlite3GetVTable\fP (\fBsqlite3\fP *, \fBTable\fP *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE const char * \fBsqlite3JournalModename\fP (int)"
.br
.ti -1c
.RI "SQLITE_PRIVATE int \fBsqlite3Checkpoint\fP (\fBsqlite3\fP *, int)"
.br
.ti -1c
.RI "SQLITE_PRIVATE int \fBsqlite3WalDefaultHook\fP (void *, \fBsqlite3\fP *, const char *, int)"
.br
.ti -1c
.RI "SQLITE_PRIVATE void \fBsqlite3FkCheck\fP (\fBParse\fP *, \fBTable\fP *, int, int)"
.br
.ti -1c
.RI "SQLITE_PRIVATE void \fBsqlite3FkDropTable\fP (\fBParse\fP *, \fBSrcList\fP *, \fBTable\fP *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE void \fBsqlite3FkActions\fP (\fBParse\fP *, \fBTable\fP *, \fBExprList\fP *, int)"
.br
.ti -1c
.RI "SQLITE_PRIVATE int \fBsqlite3FkRequired\fP (\fBParse\fP *, \fBTable\fP *, int *, int)"
.br
.ti -1c
.RI "SQLITE_PRIVATE \fBu32\fP \fBsqlite3FkOldmask\fP (\fBParse\fP *, \fBTable\fP *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE \fBFKey\fP * \fBsqlite3FkReferences\fP (\fBTable\fP *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE void \fBsqlite3FkDelete\fP (\fBsqlite3\fP *, \fBTable\fP *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE void \fBsqlite3BeginBenignMalloc\fP (void)"
.br
.ti -1c
.RI "SQLITE_PRIVATE void \fBsqlite3EndBenignMalloc\fP (void)"
.br
.ti -1c
.RI "SQLITE_PRIVATE int \fBsqlite3FindInIndex\fP (\fBParse\fP *, \fBExpr\fP *, int *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE void \fBsqlite3MemJournalOpen\fP (\fBsqlite3_file\fP *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE int \fBsqlite3MemJournalSize\fP (void)"
.br
.ti -1c
.RI "SQLITE_PRIVATE int \fBsqlite3IsMemJournal\fP (\fBsqlite3_file\fP *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE void \fBsqlite3ExprSetHeight\fP (\fBParse\fP *pParse, \fBExpr\fP *p)"
.br
.ti -1c
.RI "SQLITE_PRIVATE int \fBsqlite3SelectExprHeight\fP (\fBSelect\fP *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE int \fBsqlite3ExprCheckHeight\fP (\fBParse\fP *, int)"
.br
.ti -1c
.RI "SQLITE_PRIVATE \fBu32\fP \fBsqlite3Get4byte\fP (const \fBu8\fP *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE void \fBsqlite3Put4byte\fP (\fBu8\fP *, \fBu32\fP)"
.br
.ti -1c
.RI "SQLITE_PRIVATE void \fBsqlite3VdbeFreeCursor\fP (\fBVdbe\fP *, \fBVdbeCursor\fP *)"
.br
.ti -1c
.RI "void \fBsqliteVdbePopStack\fP (\fBVdbe\fP *, int)"
.br
.ti -1c
.RI "SQLITE_PRIVATE int \fBsqlite3VdbeCursorMoveto\fP (\fBVdbeCursor\fP *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE \fBu32\fP \fBsqlite3VdbeSerialTypeLen\fP (\fBu32\fP)"
.br
.ti -1c
.RI "SQLITE_PRIVATE \fBu32\fP \fBsqlite3VdbeSerialType\fP (\fBMem\fP *, int)"
.br
.ti -1c
.RI "SQLITE_PRIVATE \fBu32\fP \fBsqlite3VdbeSerialPut\fP (unsigned char *, int, \fBMem\fP *, int)"
.br
.ti -1c
.RI "SQLITE_PRIVATE \fBu32\fP \fBsqlite3VdbeSerialGet\fP (const unsigned char *, \fBu32\fP, \fBMem\fP *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE void \fBsqlite3VdbeDeleteAuxData\fP (\fBVdbeFunc\fP *, int)"
.br
.ti -1c
.RI "int \fBsqlite2BtreeKeyCompare\fP (\fBBtCursor\fP *, const void *, int, int, int *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE int \fBsqlite3VdbeIdxKeyCompare\fP (\fBVdbeCursor\fP *, \fBUnpackedRecord\fP *, int *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE int \fBsqlite3VdbeIdxRowid\fP (\fBsqlite3\fP *, \fBBtCursor\fP *, \fBi64\fP *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE int \fBsqlite3MemCompare\fP (const \fBMem\fP *, const \fBMem\fP *, const \fBCollSeq\fP *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE int \fBsqlite3VdbeExec\fP (\fBVdbe\fP *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE int \fBsqlite3VdbeList\fP (\fBVdbe\fP *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE int \fBsqlite3VdbeHalt\fP (\fBVdbe\fP *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE int \fBsqlite3VdbeChangeEncoding\fP (\fBMem\fP *, int)"
.br
.ti -1c
.RI "SQLITE_PRIVATE int \fBsqlite3VdbeMemTooBig\fP (\fBMem\fP *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE int \fBsqlite3VdbeMemCopy\fP (\fBMem\fP *, const \fBMem\fP *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE void \fBsqlite3VdbeMemShallowCopy\fP (\fBMem\fP *, const \fBMem\fP *, int)"
.br
.ti -1c
.RI "SQLITE_PRIVATE void \fBsqlite3VdbeMemMove\fP (\fBMem\fP *, \fBMem\fP *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE int \fBsqlite3VdbeMemNulTerminate\fP (\fBMem\fP *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE int \fBsqlite3VdbeMemSetStr\fP (\fBMem\fP *, const char *, int, \fBu8\fP, void(*)(void *))"
.br
.ti -1c
.RI "SQLITE_PRIVATE void \fBsqlite3VdbeMemSetInt64\fP (\fBMem\fP *, \fBi64\fP)"
.br
.ti -1c
.RI "SQLITE_PRIVATE void \fBsqlite3VdbeMemSetDouble\fP (\fBMem\fP *, double)"
.br
.ti -1c
.RI "SQLITE_PRIVATE void \fBsqlite3VdbeMemSetNull\fP (\fBMem\fP *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE void \fBsqlite3VdbeMemSetZeroBlob\fP (\fBMem\fP *, int)"
.br
.ti -1c
.RI "SQLITE_PRIVATE void \fBsqlite3VdbeMemSetRowSet\fP (\fBMem\fP *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE int \fBsqlite3VdbeMemMakeWriteable\fP (\fBMem\fP *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE int \fBsqlite3VdbeMemStringify\fP (\fBMem\fP *, int)"
.br
.ti -1c
.RI "SQLITE_PRIVATE \fBi64\fP \fBsqlite3VdbeIntValue\fP (\fBMem\fP *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE int \fBsqlite3VdbeMemIntegerify\fP (\fBMem\fP *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE double \fBsqlite3VdbeRealValue\fP (\fBMem\fP *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE void \fBsqlite3VdbeIntegerAffinity\fP (\fBMem\fP *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE int \fBsqlite3VdbeMemRealify\fP (\fBMem\fP *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE int \fBsqlite3VdbeMemNumerify\fP (\fBMem\fP *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE int \fBsqlite3VdbeMemFromBtree\fP (\fBBtCursor\fP *, int, int, int, \fBMem\fP *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE void \fBsqlite3VdbeMemRelease\fP (\fBMem\fP *p)"
.br
.ti -1c
.RI "SQLITE_PRIVATE void \fBsqlite3VdbeMemReleaseExternal\fP (\fBMem\fP *p)"
.br
.ti -1c
.RI "SQLITE_PRIVATE int \fBsqlite3VdbeMemFinalize\fP (\fBMem\fP *, \fBFuncDef\fP *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE const char * \fBsqlite3OpcodeName\fP (int)"
.br
.ti -1c
.RI "SQLITE_PRIVATE int \fBsqlite3VdbeMemGrow\fP (\fBMem\fP *pMem, int n, int preserve)"
.br
.ti -1c
.RI "SQLITE_PRIVATE int \fBsqlite3VdbeCloseStatement\fP (\fBVdbe\fP *, int)"
.br
.ti -1c
.RI "SQLITE_PRIVATE void \fBsqlite3VdbeFrameDelete\fP (\fBVdbeFrame\fP *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE int \fBsqlite3VdbeFrameRestore\fP (\fBVdbeFrame\fP *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE void \fBsqlite3VdbeMemStoreType\fP (\fBMem\fP *pMem)"
.br
.ti -1c
.RI "SQLITE_PRIVATE int \fBsqlite3VdbeCheckFk\fP (\fBVdbe\fP *, int)"
.br
.ti -1c
.RI "SQLITE_PRIVATE void \fBsqlite3VdbeMutexArrayEnter\fP (\fBVdbe\fP *p)"
.br
.ti -1c
.RI "SQLITE_PRIVATE int \fBsqlite3VdbeMemTranslate\fP (\fBMem\fP *, \fBu8\fP)"
.br
.ti -1c
.RI "SQLITE_PRIVATE int \fBsqlite3VdbeMemHandleBom\fP (\fBMem\fP *pMem)"
.br
.ti -1c
.RI "SQLITE_PRIVATE int \fBsqlite3VdbeMemExpandBlob\fP (\fBMem\fP *)"
.br
.ti -1c
.RI "static int \fBgetDigits\fP (const char *zDate,...)"
.br
.ti -1c
.RI "static int \fBparseTimezone\fP (const char *zDate, \fBDateTime\fP *p)"
.br
.ti -1c
.RI "static int \fBparseHhMmSs\fP (const char *zDate, \fBDateTime\fP *p)"
.br
.ti -1c
.RI "static void \fBcomputeJD\fP (\fBDateTime\fP *p)"
.br
.ti -1c
.RI "static int \fBparseYyyyMmDd\fP (const char *zDate, \fBDateTime\fP *p)"
.br
.ti -1c
.RI "static void \fBsetDateTimeToCurrent\fP (\fBsqlite3_context\fP *context, \fBDateTime\fP *p)"
.br
.ti -1c
.RI "static int \fBparseDateOrTime\fP (\fBsqlite3_context\fP *context, const char *zDate, \fBDateTime\fP *p)"
.br
.ti -1c
.RI "static void \fBcomputeYMD\fP (\fBDateTime\fP *p)"
.br
.ti -1c
.RI "static void \fBcomputeHMS\fP (\fBDateTime\fP *p)"
.br
.ti -1c
.RI "static void \fBcomputeYMD_HMS\fP (\fBDateTime\fP *p)"
.br
.ti -1c
.RI "static void \fBclearYMD_HMS_TZ\fP (\fBDateTime\fP *p)"
.br
.ti -1c
.RI "static \fBsqlite3_int64\fP \fBlocaltimeOffset\fP (\fBDateTime\fP *p)"
.br
.ti -1c
.RI "static int \fBparseModifier\fP (const char *zMod, \fBDateTime\fP *p)"
.br
.ti -1c
.RI "static int \fBisDate\fP (\fBsqlite3_context\fP *context, int argc, \fBsqlite3_value\fP **argv, \fBDateTime\fP *p)"
.br
.ti -1c
.RI "static void \fBjuliandayFunc\fP (\fBsqlite3_context\fP *context, int argc, \fBsqlite3_value\fP **argv)"
.br
.ti -1c
.RI "static void \fBdatetimeFunc\fP (\fBsqlite3_context\fP *context, int argc, \fBsqlite3_value\fP **argv)"
.br
.ti -1c
.RI "static void \fBtimeFunc\fP (\fBsqlite3_context\fP *context, int argc, \fBsqlite3_value\fP **argv)"
.br
.ti -1c
.RI "static void \fBdateFunc\fP (\fBsqlite3_context\fP *context, int argc, \fBsqlite3_value\fP **argv)"
.br
.ti -1c
.RI "static void \fBstrftimeFunc\fP (\fBsqlite3_context\fP *context, int argc, \fBsqlite3_value\fP **argv)"
.br
.ti -1c
.RI "static void \fBctimeFunc\fP (\fBsqlite3_context\fP *context, int NotUsed, \fBsqlite3_value\fP **NotUsed2)"
.br
.ti -1c
.RI "static void \fBcdateFunc\fP (\fBsqlite3_context\fP *context, int NotUsed, \fBsqlite3_value\fP **NotUsed2)"
.br
.ti -1c
.RI "static void \fBctimestampFunc\fP (\fBsqlite3_context\fP *context, int NotUsed, \fBsqlite3_value\fP **NotUsed2)"
.br
.ti -1c
.RI "SQLITE_PRIVATE void(*)(void) \fBsqlite3OsDlSym\fP (\fBsqlite3_vfs\fP *pVfs, void *pHdle, const char *zSym)"
.br
.ti -1c
.RI "static void \fBvfsUnlink\fP (\fBsqlite3_vfs\fP *pVfs)"
.br
.ti -1c
.RI "static void * \fBsqlite3MemMalloc\fP (int nByte)"
.br
.ti -1c
.RI "static void \fBsqlite3MemFree\fP (void *pPrior)"
.br
.ti -1c
.RI "static int \fBsqlite3MemSize\fP (void *pPrior)"
.br
.ti -1c
.RI "static void * \fBsqlite3MemRealloc\fP (void *pPrior, int nByte)"
.br
.ti -1c
.RI "static int \fBsqlite3MemRoundup\fP (int n)"
.br
.ti -1c
.RI "static int \fBsqlite3MemInit\fP (void *NotUsed)"
.br
.ti -1c
.RI "static void \fBsqlite3MemShutdown\fP (void *NotUsed)"
.br
.ti -1c
.RI "static int \fBnoopMutexInit\fP (void)"
.br
.ti -1c
.RI "static int \fBnoopMutexEnd\fP (void)"
.br
.ti -1c
.RI "static \fBsqlite3_mutex\fP * \fBnoopMutexAlloc\fP (int id)"
.br
.ti -1c
.RI "static void \fBnoopMutexFree\fP (\fBsqlite3_mutex\fP *p)"
.br
.ti -1c
.RI "static void \fBnoopMutexEnter\fP (\fBsqlite3_mutex\fP *p)"
.br
.ti -1c
.RI "static int \fBnoopMutexTry\fP (\fBsqlite3_mutex\fP *p)"
.br
.ti -1c
.RI "static void \fBnoopMutexLeave\fP (\fBsqlite3_mutex\fP *p)"
.br
.ti -1c
.RI "static int \fBpthreadMutexInit\fP (void)"
.br
.ti -1c
.RI "static int \fBpthreadMutexEnd\fP (void)"
.br
.ti -1c
.RI "static \fBsqlite3_mutex\fP * \fBpthreadMutexAlloc\fP (int iType)"
.br
.ti -1c
.RI "static void \fBpthreadMutexFree\fP (\fBsqlite3_mutex\fP *p)"
.br
.ti -1c
.RI "static void \fBpthreadMutexEnter\fP (\fBsqlite3_mutex\fP *p)"
.br
.ti -1c
.RI "static int \fBpthreadMutexTry\fP (\fBsqlite3_mutex\fP *p)"
.br
.ti -1c
.RI "static void \fBpthreadMutexLeave\fP (\fBsqlite3_mutex\fP *p)"
.br
.ti -1c
.RI "static void \fBsoftHeapLimitEnforcer\fP (void *NotUsed, \fBsqlite3_int64\fP NotUsed2, int allocSize)"
.br
.ti -1c
.RI "static int \fBsqlite3MemoryAlarm\fP (void(*xCallback)(void *pArg, \fBsqlite3_int64\fP used, int N), void *pArg, \fBsqlite3_int64\fP iThreshold)"
.br
.ti -1c
.RI "SQLITE_API int \fBsqlite3_memory_alarm\fP (void(*xCallback)(void *pArg, \fBsqlite3_int64\fP used, int N), void *pArg, \fBsqlite3_int64\fP iThreshold)"
.br
.ti -1c
.RI "static void \fBsqlite3MallocAlarm\fP (int nByte)"
.br
.ti -1c
.RI "static int \fBmallocWithAlarm\fP (int n, void **pp)"
.br
.ti -1c
.RI "static int \fBisLookaside\fP (\fBsqlite3\fP *\fBdb\fP, void *p)"
.br
.ti -1c
.RI "static char \fBet_getdigit\fP (LONGDOUBLE_TYPE *val, int *cnt)"
.br
.ti -1c
.RI "static void \fBappendSpace\fP (\fBStrAccum\fP *pAccum, int N)"
.br
.ti -1c
.RI "static void \fBrenderLogMsg\fP (int iErrCode, const char *zFormat, va_list ap)"
.br
.ti -1c
.RI "static \fBu8\fP \fBrandomByte\fP (void)"
.br
.ti -1c
.RI "SQLITE_PRIVATE int \fBsqlite3Utf8Read\fP (const unsigned char *zIn, const unsigned char **pzNext)"
.br
.ti -1c
.RI "static int \fBcompare2pow63\fP (const char *zNum, int incr)"
.br
.ti -1c
.RI "SQLITE_PRIVATE void \fBsqlite3Put4byte\fP (unsigned char *p, \fBu32\fP v)"
.br
.ti -1c
.RI "static \fBu8\fP \fBhexToInt\fP (int h)"
.br
.ti -1c
.RI "static void \fBlogBadConnection\fP (const char *zType)"
.br
.ti -1c
.RI "static unsigned int \fBstrHash\fP (const char *z, int nKey)"
.br
.ti -1c
.RI "static void \fBinsertElement\fP (\fBHash\fP *pH, struct _ht *pEntry, \fBHashElem\fP *pNew)"
.br
.ti -1c
.RI "static int \fBrehash\fP (\fBHash\fP *pH, unsigned int new_size)"
.br
.ti -1c
.RI "static \fBHashElem\fP * \fBfindElementGivenHash\fP (const \fBHash\fP *pH, const char *pKey, int nKey, unsigned int h)"
.br
.ti -1c
.RI "static void \fBremoveElementGivenHash\fP (\fBHash\fP *pH, \fBHashElem\fP *elem, unsigned int h)"
.br
.ti -1c
.RI "static void \fBunixEnterMutex\fP (void)"
.br
.ti -1c
.RI "static void \fBunixLeaveMutex\fP (void)"
.br
.ti -1c
.RI "static int \fBsqliteErrorFromPosixError\fP (int posixError, int sqliteIOErr)"
.br
.ti -1c
.RI "static int \fBclosePendingFds\fP (\fBunixFile\fP *pFile)"
.br
.ti -1c
.RI "static void \fBreleaseInodeInfo\fP (\fBunixFile\fP *pFile)"
.br
.ti -1c
.RI "static int \fBfindInodeInfo\fP (\fBunixFile\fP *pFile, \fBunixInodeInfo\fP **ppInode)"
.br
.ti -1c
.RI "static int \fBunixCheckReservedLock\fP (\fBsqlite3_file\fP *id, int *pResOut)"
.br
.ti -1c
.RI "static int \fBunixLock\fP (\fBsqlite3_file\fP *id, int eFileLock)"
.br
.ti -1c
.RI "static void \fBsetPendingFd\fP (\fBunixFile\fP *pFile)"
.br
.ti -1c
.RI "static int \fB_posixUnlock\fP (\fBsqlite3_file\fP *id, int eFileLock, int handleNFSUnlock)"
.br
.ti -1c
.RI "static int \fBunixUnlock\fP (\fBsqlite3_file\fP *id, int eFileLock)"
.br
.ti -1c
.RI "static int \fBcloseUnixFile\fP (\fBsqlite3_file\fP *id)"
.br
.ti -1c
.RI "static int \fBunixClose\fP (\fBsqlite3_file\fP *id)"
.br
.ti -1c
.RI "static int \fBnolockCheckReservedLock\fP (\fBsqlite3_file\fP *NotUsed, int *pResOut)"
.br
.ti -1c
.RI "static int \fBnolockLock\fP (\fBsqlite3_file\fP *NotUsed, int NotUsed2)"
.br
.ti -1c
.RI "static int \fBnolockUnlock\fP (\fBsqlite3_file\fP *NotUsed, int NotUsed2)"
.br
.ti -1c
.RI "static int \fBnolockClose\fP (\fBsqlite3_file\fP *id)"
.br
.ti -1c
.RI "static int \fBdotlockCheckReservedLock\fP (\fBsqlite3_file\fP *id, int *pResOut)"
.br
.ti -1c
.RI "static int \fBdotlockLock\fP (\fBsqlite3_file\fP *id, int eFileLock)"
.br
.ti -1c
.RI "static int \fBdotlockUnlock\fP (\fBsqlite3_file\fP *id, int eFileLock)"
.br
.ti -1c
.RI "static int \fBdotlockClose\fP (\fBsqlite3_file\fP *id)"
.br
.ti -1c
.RI "static int \fBseekAndRead\fP (\fBunixFile\fP *id, \fBsqlite3_int64\fP offset, void *pBuf, int cnt)"
.br
.ti -1c
.RI "static int \fBunixRead\fP (\fBsqlite3_file\fP *id, void *pBuf, int amt, \fBsqlite3_int64\fP offset)"
.br
.ti -1c
.RI "static int \fBseekAndWrite\fP (\fBunixFile\fP *id, \fBi64\fP offset, const void *pBuf, int cnt)"
.br
.ti -1c
.RI "static int \fBunixWrite\fP (\fBsqlite3_file\fP *id, const void *pBuf, int amt, \fBsqlite3_int64\fP offset)"
.br
.ti -1c
.RI "static int \fBfull_fsync\fP (int fd, int fullSync, int dataOnly)"
.br
.ti -1c
.RI "static int \fBunixSync\fP (\fBsqlite3_file\fP *id, int flags)"
.br
.ti -1c
.RI "static int \fBunixTruncate\fP (\fBsqlite3_file\fP *id, \fBi64\fP nByte)"
.br
.ti -1c
.RI "static int \fBunixFileSize\fP (\fBsqlite3_file\fP *id, \fBi64\fP *pSize)"
.br
.ti -1c
.RI "static int \fBfcntlSizeHint\fP (\fBunixFile\fP *pFile, \fBi64\fP nByte)"
.br
.ti -1c
.RI "static int \fBunixFileControl\fP (\fBsqlite3_file\fP *id, int op, void *pArg)"
.br
.ti -1c
.RI "static int \fBunixSectorSize\fP (\fBsqlite3_file\fP *NotUsed)"
.br
.ti -1c
.RI "static int \fBunixDeviceCharacteristics\fP (\fBsqlite3_file\fP *NotUsed)"
.br
.ti -1c
.RI "static int \fBunixShmSystemLock\fP (\fBunixShmNode\fP *pShmNode, int lockType, int ofst, int n)"
.br
.ti -1c
.RI "static void \fBunixShmPurge\fP (\fBunixFile\fP *pFd)"
.br
.ti -1c
.RI "static int \fBunixOpenSharedMemory\fP (\fBunixFile\fP *pDbFd)"
.br
.ti -1c
.RI "static int \fBunixShmMap\fP (\fBsqlite3_file\fP *fd, int iRegion, int szRegion, int bExtend, void volatile **pp)"
.br
.ti -1c
.RI "static int \fBunixShmLock\fP (\fBsqlite3_file\fP *fd, int ofst, int n, int flags)"
.br
.ti -1c
.RI "static void \fBunixShmBarrier\fP (\fBsqlite3_file\fP *fd)"
.br
.ti -1c
.RI "static int \fBunixShmUnmap\fP (\fBsqlite3_file\fP *fd, int deleteFlag)"
.br
.ti -1c
.RI "\fBIOMETHODS\fP (posixIoFinder, posixIoMethods, 2, unixClose, unixLock, unixUnlock, unixCheckReservedLock)"
.br
.ti -1c
.RI "static int \fBopenDirectory\fP (const char *zFilename, int *pFd)"
.br
.ti -1c
.RI "static const char * \fBunixTempFileDir\fP (void)"
.br
.ti -1c
.RI "static int \fBunixGetTempname\fP (int nBuf, char *zBuf)"
.br
.ti -1c
.RI "static \fBUnixUnusedFd\fP * \fBfindReusableFd\fP (const char *zPath, int flags)"
.br
.ti -1c
.RI "static int \fBfindCreateFileMode\fP (const char *zPath, int flags, mode_t *pMode)"
.br
.ti -1c
.RI "static int \fBunixOpen\fP (\fBsqlite3_vfs\fP *pVfs, const char *zPath, \fBsqlite3_file\fP *pFile, int flags, int *pOutFlags)"
.br
.ti -1c
.RI "static int \fBunixDelete\fP (\fBsqlite3_vfs\fP *NotUsed, const char *zPath, int dirSync)"
.br
.ti -1c
.RI "static int \fBunixAccess\fP (\fBsqlite3_vfs\fP *NotUsed, const char *zPath, int flags, int *pResOut)"
.br
.ti -1c
.RI "static int \fBunixFullPathname\fP (\fBsqlite3_vfs\fP *pVfs, const char *zPath, int nOut, char *zOut)"
.br
.ti -1c
.RI "static void * \fBunixDlOpen\fP (\fBsqlite3_vfs\fP *NotUsed, const char *zFilename)"
.br
.ti -1c
.RI "static void \fBunixDlError\fP (\fBsqlite3_vfs\fP *NotUsed, int nBuf, char *zBufOut)"
.br
.ti -1c
.RI "static void(*)(void) \fBunixDlSym\fP (\fBsqlite3_vfs\fP *NotUsed, void *p, const char *zSym)"
.br
.ti -1c
.RI "static void \fBunixDlClose\fP (\fBsqlite3_vfs\fP *NotUsed, void *pHandle)"
.br
.ti -1c
.RI "static int \fBunixRandomness\fP (\fBsqlite3_vfs\fP *NotUsed, int nBuf, char *zBuf)"
.br
.ti -1c
.RI "static int \fBunixSleep\fP (\fBsqlite3_vfs\fP *NotUsed, int microseconds)"
.br
.ti -1c
.RI "static int \fBunixCurrentTimeInt64\fP (\fBsqlite3_vfs\fP *NotUsed, \fBsqlite3_int64\fP *piNow)"
.br
.ti -1c
.RI "static int \fBunixCurrentTime\fP (\fBsqlite3_vfs\fP *NotUsed, double *prNow)"
.br
.ti -1c
.RI "static int \fBunixGetLastError\fP (\fBsqlite3_vfs\fP *NotUsed, int NotUsed2, char *NotUsed3)"
.br
.ti -1c
.RI "static void \fBpcacheRemoveFromDirtyList\fP (\fBPgHdr\fP *pPage)"
.br
.ti -1c
.RI "static void \fBpcacheAddToDirtyList\fP (\fBPgHdr\fP *pPage)"
.br
.ti -1c
.RI "static void \fBpcacheUnpin\fP (\fBPgHdr\fP *p)"
.br
.ti -1c
.RI "static \fBPgHdr\fP * \fBpcacheMergeDirtyList\fP (\fBPgHdr\fP *pA, \fBPgHdr\fP *pB)"
.br
.ti -1c
.RI "static \fBPgHdr\fP * \fBpcacheSortDirtyList\fP (\fBPgHdr\fP *pIn)"
.br
.ti -1c
.RI "static void * \fBpcache1Alloc\fP (int nByte)"
.br
.ti -1c
.RI "static void \fBpcache1Free\fP (void *p)"
.br
.ti -1c
.RI "static \fBPgHdr1\fP * \fBpcache1AllocPage\fP (\fBPCache1\fP *pCache)"
.br
.ti -1c
.RI "static void \fBpcache1FreePage\fP (\fBPgHdr1\fP *p)"
.br
.ti -1c
.RI "static int \fBpcache1UnderMemoryPressure\fP (\fBPCache1\fP *pCache)"
.br
.ti -1c
.RI "static int \fBpcache1ResizeHash\fP (\fBPCache1\fP *p)"
.br
.ti -1c
.RI "static void \fBpcache1PinPage\fP (\fBPgHdr1\fP *pPage)"
.br
.ti -1c
.RI "static void \fBpcache1RemoveFromHash\fP (\fBPgHdr1\fP *pPage)"
.br
.ti -1c
.RI "static void \fBpcache1EnforceMaxPage\fP (void)"
.br
.ti -1c
.RI "static void \fBpcache1TruncateUnsafe\fP (\fBPCache1\fP *pCache, unsigned int iLimit)"
.br
.ti -1c
.RI "static int \fBpcache1Init\fP (void *NotUsed)"
.br
.ti -1c
.RI "static void \fBpcache1Shutdown\fP (void *NotUsed)"
.br
.ti -1c
.RI "static \fBsqlite3_pcache\fP * \fBpcache1Create\fP (int szPage, int bPurgeable)"
.br
.ti -1c
.RI "static void \fBpcache1Cachesize\fP (\fBsqlite3_pcache\fP *p, int nMax)"
.br
.ti -1c
.RI "static int \fBpcache1Pagecount\fP (\fBsqlite3_pcache\fP *p)"
.br
.ti -1c
.RI "static void * \fBpcache1Fetch\fP (\fBsqlite3_pcache\fP *p, unsigned int iKey, int createFlag)"
.br
.ti -1c
.RI "static void \fBpcache1Unpin\fP (\fBsqlite3_pcache\fP *p, void *pPg, int reuseUnlikely)"
.br
.ti -1c
.RI "static void \fBpcache1Rekey\fP (\fBsqlite3_pcache\fP *p, void *pPg, unsigned int iOld, unsigned int iNew)"
.br
.ti -1c
.RI "static void \fBpcache1Truncate\fP (\fBsqlite3_pcache\fP *p, unsigned int iLimit)"
.br
.ti -1c
.RI "static void \fBpcache1Destroy\fP (\fBsqlite3_pcache\fP *p)"
.br
.ti -1c
.RI "static struct \fBRowSetEntry\fP * \fBrowSetMerge\fP (struct \fBRowSetEntry\fP *pA, struct \fBRowSetEntry\fP *pB)"
.br
.ti -1c
.RI "static void \fBrowSetSort\fP (\fBRowSet\fP *p)"
.br
.ti -1c
.RI "static void \fBrowSetTreeToList\fP (struct \fBRowSetEntry\fP *pIn, struct \fBRowSetEntry\fP **ppFirst, struct \fBRowSetEntry\fP **ppLast)"
.br
.ti -1c
.RI "static struct \fBRowSetEntry\fP * \fBrowSetNDeepTree\fP (struct \fBRowSetEntry\fP **ppList, int iDepth)"
.br
.ti -1c
.RI "static struct \fBRowSetEntry\fP * \fBrowSetListToTree\fP (struct \fBRowSetEntry\fP *pList)"
.br
.ti -1c
.RI "static void \fBrowSetToList\fP (\fBRowSet\fP *p)"
.br
.ti -1c
.RI "SQLITE_PRIVATE int \fBsqlite3WalOpen\fP (\fBsqlite3_vfs\fP *, \fBsqlite3_file\fP *, const char *zName, \fBWal\fP **)"
.br
.ti -1c
.RI "SQLITE_PRIVATE int \fBsqlite3WalClose\fP (\fBWal\fP *pWal, int sync_flags, int, \fBu8\fP *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE int \fBsqlite3WalBeginReadTransaction\fP (\fBWal\fP *pWal, int *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE void \fBsqlite3WalEndReadTransaction\fP (\fBWal\fP *pWal)"
.br
.ti -1c
.RI "SQLITE_PRIVATE int \fBsqlite3WalRead\fP (\fBWal\fP *pWal, \fBPgno\fP pgno, int *pInWal, int nOut, \fBu8\fP *pOut)"
.br
.ti -1c
.RI "SQLITE_PRIVATE \fBPgno\fP \fBsqlite3WalDbsize\fP (\fBWal\fP *pWal)"
.br
.ti -1c
.RI "SQLITE_PRIVATE int \fBsqlite3WalBeginWriteTransaction\fP (\fBWal\fP *pWal)"
.br
.ti -1c
.RI "SQLITE_PRIVATE int \fBsqlite3WalEndWriteTransaction\fP (\fBWal\fP *pWal)"
.br
.ti -1c
.RI "SQLITE_PRIVATE int \fBsqlite3WalUndo\fP (\fBWal\fP *pWal, int(*xUndo)(void *, \fBPgno\fP), void *pUndoCtx)"
.br
.ti -1c
.RI "SQLITE_PRIVATE void \fBsqlite3WalSavepoint\fP (\fBWal\fP *pWal, \fBu32\fP *aWalData)"
.br
.ti -1c
.RI "SQLITE_PRIVATE int \fBsqlite3WalSavepointUndo\fP (\fBWal\fP *pWal, \fBu32\fP *aWalData)"
.br
.ti -1c
.RI "SQLITE_PRIVATE int \fBsqlite3WalFrames\fP (\fBWal\fP *pWal, int, \fBPgHdr\fP *, \fBPgno\fP, int, int)"
.br
.ti -1c
.RI "SQLITE_PRIVATE int \fBsqlite3WalCheckpoint\fP (\fBWal\fP *pWal, int sync_flags, int nBuf, \fBu8\fP *zBuf)"
.br
.ti -1c
.RI "SQLITE_PRIVATE int \fBsqlite3WalCallback\fP (\fBWal\fP *pWal)"
.br
.ti -1c
.RI "SQLITE_PRIVATE int \fBsqlite3WalExclusiveMode\fP (\fBWal\fP *pWal, int op)"
.br
.ti -1c
.RI "static int \fBpagerUseWal\fP (\fBPager\fP *pPager)"
.br
.ti -1c
.RI "static int \fBsubjRequiresPage\fP (\fBPgHdr\fP *pPg)"
.br
.ti -1c
.RI "static int \fBpageInJournal\fP (\fBPgHdr\fP *pPg)"
.br
.ti -1c
.RI "static int \fBread32bits\fP (\fBsqlite3_file\fP *fd, \fBi64\fP offset, \fBu32\fP *pRes)"
.br
.ti -1c
.RI "static int \fBwrite32bits\fP (\fBsqlite3_file\fP *fd, \fBi64\fP offset, \fBu32\fP val)"
.br
.ti -1c
.RI "static int \fBpagerUnlockDb\fP (\fBPager\fP *pPager, int eLock)"
.br
.ti -1c
.RI "static int \fBpagerLockDb\fP (\fBPager\fP *pPager, int eLock)"
.br
.ti -1c
.RI "static int \fBreadMasterJournal\fP (\fBsqlite3_file\fP *pJrnl, char *zMaster, \fBu32\fP nMaster)"
.br
.ti -1c
.RI "static \fBi64\fP \fBjournalHdrOffset\fP (\fBPager\fP *pPager)"
.br
.ti -1c
.RI "static int \fBzeroJournalHdr\fP (\fBPager\fP *pPager, int doTruncate)"
.br
.ti -1c
.RI "static int \fBwriteJournalHdr\fP (\fBPager\fP *pPager)"
.br
.ti -1c
.RI "static int \fBreadJournalHdr\fP (\fBPager\fP *pPager, int isHot, \fBi64\fP journalSize, \fBu32\fP *pNRec, \fBu32\fP *pDbSize)"
.br
.ti -1c
.RI "static int \fBwriteMasterJournal\fP (\fBPager\fP *pPager, const char *zMaster)"
.br
.ti -1c
.RI "static \fBPgHdr\fP * \fBpager_lookup\fP (\fBPager\fP *pPager, \fBPgno\fP pgno)"
.br
.ti -1c
.RI "static void \fBpager_reset\fP (\fBPager\fP *pPager)"
.br
.ti -1c
.RI "static void \fBreleaseAllSavepoints\fP (\fBPager\fP *pPager)"
.br
.ti -1c
.RI "static int \fBaddToSavepointBitvecs\fP (\fBPager\fP *pPager, \fBPgno\fP pgno)"
.br
.ti -1c
.RI "static void \fBpager_unlock\fP (\fBPager\fP *pPager)"
.br
.ti -1c
.RI "static int \fBpager_error\fP (\fBPager\fP *pPager, int rc)"
.br
.ti -1c
.RI "static int \fBpager_end_transaction\fP (\fBPager\fP *pPager, int hasMaster)"
.br
.ti -1c
.RI "static void \fBpagerUnlockAndRollback\fP (\fBPager\fP *pPager)"
.br
.ti -1c
.RI "static \fBu32\fP \fBpager_cksum\fP (\fBPager\fP *pPager, const \fBu8\fP *aData)"
.br
.ti -1c
.RI "static int \fBpager_playback_one_page\fP (\fBPager\fP *pPager, \fBi64\fP *pOffset, \fBBitvec\fP *pDone, int isMainJrnl, int isSavepnt)"
.br
.ti -1c
.RI "static int \fBpager_delmaster\fP (\fBPager\fP *pPager, const char *zMaster)"
.br
.ti -1c
.RI "static int \fBpager_truncate\fP (\fBPager\fP *pPager, \fBPgno\fP nPage)"
.br
.ti -1c
.RI "static void \fBsetSectorSize\fP (\fBPager\fP *pPager)"
.br
.ti -1c
.RI "static int \fBpager_playback\fP (\fBPager\fP *pPager, int isHot)"
.br
.ti -1c
.RI "static int \fBreadDbPage\fP (\fBPgHdr\fP *pPg)"
.br
.ti -1c
.RI "static int \fBpagerUndoCallback\fP (void *pCtx, \fBPgno\fP iPg)"
.br
.ti -1c
.RI "static int \fBpagerRollbackWal\fP (\fBPager\fP *pPager)"
.br
.ti -1c
.RI "static int \fBpagerWalFrames\fP (\fBPager\fP *pPager, \fBPgHdr\fP *pList, \fBPgno\fP nTruncate, int isCommit, int sync_flags)"
.br
.ti -1c
.RI "static int \fBpagerBeginReadTransaction\fP (\fBPager\fP *pPager)"
.br
.ti -1c
.RI "static int \fBpagerPagecount\fP (\fBPager\fP *pPager, \fBPgno\fP *pnPage)"
.br
.ti -1c
.RI "static int \fBpagerOpenWalIfPresent\fP (\fBPager\fP *pPager)"
.br
.ti -1c
.RI "static int \fBpagerPlaybackSavepoint\fP (\fBPager\fP *pPager, \fBPagerSavepoint\fP *pSavepoint)"
.br
.ti -1c
.RI "static int \fBpagerOpentemp\fP (\fBPager\fP *pPager, \fBsqlite3_file\fP *pFile, int vfsFlags)"
.br
.ti -1c
.RI "static int \fBpager_wait_on_lock\fP (\fBPager\fP *pPager, int locktype)"
.br
.ti -1c
.RI "static int \fBpagerSyncHotJournal\fP (\fBPager\fP *pPager)"
.br
.ti -1c
.RI "static int \fBsyncJournal\fP (\fBPager\fP *pPager, int newHdr)"
.br
.ti -1c
.RI "static int \fBpager_write_pagelist\fP (\fBPager\fP *pPager, \fBPgHdr\fP *pList)"
.br
.ti -1c
.RI "static int \fBopenSubJournal\fP (\fBPager\fP *pPager)"
.br
.ti -1c
.RI "static int \fBsubjournalPage\fP (\fBPgHdr\fP *pPg)"
.br
.ti -1c
.RI "static int \fBpagerStress\fP (void *p, \fBPgHdr\fP *pPg)"
.br
.ti -1c
.RI "static int \fBhasHotJournal\fP (\fBPager\fP *pPager, int *pExists)"
.br
.ti -1c
.RI "static void \fBpagerUnlockIfUnused\fP (\fBPager\fP *pPager)"
.br
.ti -1c
.RI "static int \fBpager_open_journal\fP (\fBPager\fP *pPager)"
.br
.ti -1c
.RI "static int \fBpager_write\fP (\fBPgHdr\fP *pPg)"
.br
.ti -1c
.RI "static int \fBpager_incr_changecounter\fP (\fBPager\fP *pPager, int isDirectMode)"
.br
.ti -1c
.RI "static int \fBwalIndexPage\fP (\fBWal\fP *pWal, int iPage, volatile \fBu32\fP **ppPage)"
.br
.ti -1c
.RI "static volatile \fBWalCkptInfo\fP * \fBwalCkptInfo\fP (\fBWal\fP *pWal)"
.br
.ti -1c
.RI "static volatile \fBWalIndexHdr\fP * \fBwalIndexHdr\fP (\fBWal\fP *pWal)"
.br
.ti -1c
.RI "static void \fBwalChecksumBytes\fP (int nativeCksum, \fBu8\fP *a, int nByte, const \fBu32\fP *aIn, \fBu32\fP *aOut)"
.br
.ti -1c
.RI "static void \fBwalIndexWriteHdr\fP (\fBWal\fP *pWal)"
.br
.ti -1c
.RI "static void \fBwalEncodeFrame\fP (\fBWal\fP *pWal, \fBu32\fP iPage, \fBu32\fP nTruncate, \fBu8\fP *aData, \fBu8\fP *aFrame)"
.br
.ti -1c
.RI "static int \fBwalDecodeFrame\fP (\fBWal\fP *pWal, \fBu32\fP *piPage, \fBu32\fP *pnTruncate, \fBu8\fP *aData, \fBu8\fP *aFrame)"
.br
.ti -1c
.RI "static int \fBwalLockShared\fP (\fBWal\fP *pWal, int lockIdx)"
.br
.ti -1c
.RI "static void \fBwalUnlockShared\fP (\fBWal\fP *pWal, int lockIdx)"
.br
.ti -1c
.RI "static int \fBwalLockExclusive\fP (\fBWal\fP *pWal, int lockIdx, int n)"
.br
.ti -1c
.RI "static void \fBwalUnlockExclusive\fP (\fBWal\fP *pWal, int lockIdx, int n)"
.br
.ti -1c
.RI "static int \fBwalHash\fP (\fBu32\fP iPage)"
.br
.ti -1c
.RI "static int \fBwalNextHash\fP (int iPriorHash)"
.br
.ti -1c
.RI "static int \fBwalHashGet\fP (\fBWal\fP *pWal, int iHash, volatile \fBht_slot\fP **paHash, volatile \fBu32\fP **paPgno, \fBu32\fP *piZero)"
.br
.ti -1c
.RI "static int \fBwalFramePage\fP (\fBu32\fP iFrame)"
.br
.ti -1c
.RI "static \fBu32\fP \fBwalFramePgno\fP (\fBWal\fP *pWal, \fBu32\fP iFrame)"
.br
.ti -1c
.RI "static void \fBwalCleanupHash\fP (\fBWal\fP *pWal)"
.br
.ti -1c
.RI "static int \fBwalIndexAppend\fP (\fBWal\fP *pWal, \fBu32\fP iFrame, \fBu32\fP iPage)"
.br
.ti -1c
.RI "static int \fBwalIndexRecover\fP (\fBWal\fP *pWal)"
.br
.ti -1c
.RI "static void \fBwalIndexClose\fP (\fBWal\fP *pWal, int isDelete)"
.br
.ti -1c
.RI "static int \fBwalIteratorNext\fP (\fBWalIterator\fP *p, \fBu32\fP *piPage, \fBu32\fP *piFrame)"
.br
.ti -1c
.RI "static void \fBwalMerge\fP (\fBu32\fP *aContent, \fBht_slot\fP *aLeft, int nLeft, \fBht_slot\fP **paRight, int *pnRight, \fBht_slot\fP *aTmp)"
.br
.ti -1c
.RI "static void \fBwalMergesort\fP (\fBu32\fP *aContent, \fBht_slot\fP *aBuffer, \fBht_slot\fP *aList, int *pnList)"
.br
.ti -1c
.RI "static void \fBwalIteratorFree\fP (\fBWalIterator\fP *p)"
.br
.ti -1c
.RI "static int \fBwalIteratorInit\fP (\fBWal\fP *pWal, \fBWalIterator\fP **pp)"
.br
.ti -1c
.RI "static int \fBwalCheckpoint\fP (\fBWal\fP *pWal, int sync_flags, int nBuf, \fBu8\fP *zBuf)"
.br
.ti -1c
.RI "static int \fBwalIndexTryHdr\fP (\fBWal\fP *pWal, int *pChanged)"
.br
.ti -1c
.RI "static int \fBwalIndexReadHdr\fP (\fBWal\fP *pWal, int *pChanged)"
.br
.ti -1c
.RI "static int \fBwalTryBeginRead\fP (\fBWal\fP *pWal, int *pChanged, int useWal, int cnt)"
.br
.ti -1c
.RI "static int \fBwalRestartLog\fP (\fBWal\fP *pWal)"
.br
.ti -1c
.RI "static void \fBlockBtreeMutex\fP (\fBBtree\fP *p)"
.br
.ti -1c
.RI "static void \fBunlockBtreeMutex\fP (\fBBtree\fP *p)"
.br
.ti -1c
.RI "static int \fBquerySharedCacheTableLock\fP (\fBBtree\fP *p, \fBPgno\fP iTab, \fBu8\fP eLock)"
.br
.ti -1c
.RI "static int \fBsetSharedCacheTableLock\fP (\fBBtree\fP *p, \fBPgno\fP iTable, \fBu8\fP eLock)"
.br
.ti -1c
.RI "static void \fBclearAllSharedCacheTableLocks\fP (\fBBtree\fP *p)"
.br
.ti -1c
.RI "static void \fBdowngradeAllSharedCacheTableLocks\fP (\fBBtree\fP *p)"
.br
.ti -1c
.RI "static void \fBreleasePage\fP (\fBMemPage\fP *pPage)"
.br
.ti -1c
.RI "static void \fBinvalidateOverflowCache\fP (\fBBtCursor\fP *pCur)"
.br
.ti -1c
.RI "static void \fBinvalidateAllOverflowCache\fP (\fBBtShared\fP *pBt)"
.br
.ti -1c
.RI "static void \fBinvalidateIncrblobCursors\fP (\fBBtree\fP *pBtree, \fBi64\fP iRow, int isClearTable)"
.br
.ti -1c
.RI "static int \fBbtreeSetHasContent\fP (\fBBtShared\fP *pBt, \fBPgno\fP pgno)"
.br
.ti -1c
.RI "static int \fBbtreeGetHasContent\fP (\fBBtShared\fP *pBt, \fBPgno\fP pgno)"
.br
.ti -1c
.RI "static void \fBbtreeClearHasContent\fP (\fBBtShared\fP *pBt)"
.br
.ti -1c
.RI "static int \fBsaveCursorPosition\fP (\fBBtCursor\fP *pCur)"
.br
.ti -1c
.RI "static int \fBsaveAllCursors\fP (\fBBtShared\fP *pBt, \fBPgno\fP iRoot, \fBBtCursor\fP *pExcept)"
.br
.ti -1c
.RI "static int \fBbtreeMoveto\fP (\fBBtCursor\fP *pCur, const void *pKey, \fBi64\fP nKey, int bias, int *pRes)"
.br
.ti -1c
.RI "static int \fBbtreeRestoreCursorPosition\fP (\fBBtCursor\fP *pCur)"
.br
.ti -1c
.RI "static \fBPgno\fP \fBptrmapPageno\fP (\fBBtShared\fP *pBt, \fBPgno\fP pgno)"
.br
.ti -1c
.RI "static void \fBptrmapPut\fP (\fBBtShared\fP *pBt, \fBPgno\fP key, \fBu8\fP eType, \fBPgno\fP parent, int *pRC)"
.br
.ti -1c
.RI "static int \fBptrmapGet\fP (\fBBtShared\fP *pBt, \fBPgno\fP key, \fBu8\fP *pEType, \fBPgno\fP *pPgno)"
.br
.ti -1c
.RI "static \fBu8\fP * \fBfindOverflowCell\fP (\fBMemPage\fP *pPage, int iCell)"
.br
.ti -1c
.RI "static void \fBbtreeParseCellPtr\fP (\fBMemPage\fP *pPage, \fBu8\fP *pCell, \fBCellInfo\fP *pInfo)"
.br
.ti -1c
.RI "static void \fBbtreeParseCell\fP (\fBMemPage\fP *pPage, int iCell, \fBCellInfo\fP *pInfo)"
.br
.ti -1c
.RI "static \fBu16\fP \fBcellSizePtr\fP (\fBMemPage\fP *pPage, \fBu8\fP *pCell)"
.br
.ti -1c
.RI "static void \fBptrmapPutOvflPtr\fP (\fBMemPage\fP *pPage, \fBu8\fP *pCell, int *pRC)"
.br
.ti -1c
.RI "static int \fBdefragmentPage\fP (\fBMemPage\fP *pPage)"
.br
.ti -1c
.RI "static int \fBallocateSpace\fP (\fBMemPage\fP *pPage, int nByte, int *pIdx)"
.br
.ti -1c
.RI "static int \fBfreeSpace\fP (\fBMemPage\fP *pPage, int start, int size)"
.br
.ti -1c
.RI "static int \fBdecodeFlags\fP (\fBMemPage\fP *pPage, int flagByte)"
.br
.ti -1c
.RI "static int \fBbtreeInitPage\fP (\fBMemPage\fP *pPage)"
.br
.ti -1c
.RI "static void \fBzeroPage\fP (\fBMemPage\fP *pPage, int flags)"
.br
.ti -1c
.RI "static \fBMemPage\fP * \fBbtreePageFromDbPage\fP (\fBDbPage\fP *pDbPage, \fBPgno\fP pgno, \fBBtShared\fP *pBt)"
.br
.ti -1c
.RI "static int \fBbtreeGetPage\fP (\fBBtShared\fP *pBt, \fBPgno\fP pgno, \fBMemPage\fP **ppPage, int noContent)"
.br
.ti -1c
.RI "static \fBMemPage\fP * \fBbtreePageLookup\fP (\fBBtShared\fP *pBt, \fBPgno\fP pgno)"
.br
.ti -1c
.RI "static \fBPgno\fP \fBbtreePagecount\fP (\fBBtShared\fP *pBt)"
.br
.ti -1c
.RI "static int \fBgetAndInitPage\fP (\fBBtShared\fP *pBt, \fBPgno\fP pgno, \fBMemPage\fP **ppPage)"
.br
.ti -1c
.RI "static void \fBpageReinit\fP (\fBDbPage\fP *pData)"
.br
.ti -1c
.RI "static int \fBbtreeInvokeBusyHandler\fP (void *pArg)"
.br
.ti -1c
.RI "static int \fBremoveFromSharingList\fP (\fBBtShared\fP *pBt)"
.br
.ti -1c
.RI "static void \fBallocateTempSpace\fP (\fBBtShared\fP *pBt)"
.br
.ti -1c
.RI "static void \fBfreeTempSpace\fP (\fBBtShared\fP *pBt)"
.br
.ti -1c
.RI "static int \fBlockBtree\fP (\fBBtShared\fP *pBt)"
.br
.ti -1c
.RI "static void \fBunlockBtreeIfUnused\fP (\fBBtShared\fP *pBt)"
.br
.ti -1c
.RI "static int \fBnewDatabase\fP (\fBBtShared\fP *pBt)"
.br
.ti -1c
.RI "static int \fBsetChildPtrmaps\fP (\fBMemPage\fP *pPage)"
.br
.ti -1c
.RI "static int \fBmodifyPagePointer\fP (\fBMemPage\fP *pPage, \fBPgno\fP iFrom, \fBPgno\fP iTo, \fBu8\fP eType)"
.br
.ti -1c
.RI "static int \fBrelocatePage\fP (\fBBtShared\fP *pBt, \fBMemPage\fP *pDbPage, \fBu8\fP eType, \fBPgno\fP iPtrPage, \fBPgno\fP iFreePage, int isCommit)"
.br
.ti -1c
.RI "static int \fBallocateBtreePage\fP (\fBBtShared\fP *, \fBMemPage\fP **, \fBPgno\fP *, \fBPgno\fP, \fBu8\fP)"
.br
.ti -1c
.RI "static int \fBincrVacuumStep\fP (\fBBtShared\fP *pBt, \fBPgno\fP nFin, \fBPgno\fP iLastPg)"
.br
.ti -1c
.RI "static int \fBautoVacuumCommit\fP (\fBBtShared\fP *pBt)"
.br
.ti -1c
.RI "static void \fBbtreeEndTransaction\fP (\fBBtree\fP *p)"
.br
.ti -1c
.RI "static int \fBbtreeCursor\fP (\fBBtree\fP *p, int iTable, int wrFlag, struct \fBKeyInfo\fP *pKeyInfo, \fBBtCursor\fP *pCur)"
.br
.ti -1c
.RI "static int \fBgetOverflowPage\fP (\fBBtShared\fP *pBt, \fBPgno\fP ovfl, \fBMemPage\fP **ppPage, \fBPgno\fP *pPgnoNext)"
.br
.ti -1c
.RI "static int \fBcopyPayload\fP (void *pPayload, void *pBuf, int nByte, int eOp, \fBDbPage\fP *pDbPage)"
.br
.ti -1c
.RI "static int \fBaccessPayload\fP (\fBBtCursor\fP *pCur, \fBu32\fP offset, \fBu32\fP amt, unsigned char *pBuf, int eOp)"
.br
.ti -1c
.RI "static const unsigned char * \fBfetchPayload\fP (\fBBtCursor\fP *pCur, int *pAmt, int skipKey)"
.br
.ti -1c
.RI "static int \fBmoveToChild\fP (\fBBtCursor\fP *pCur, \fBu32\fP newPgno)"
.br
.ti -1c
.RI "static void \fBmoveToParent\fP (\fBBtCursor\fP *pCur)"
.br
.ti -1c
.RI "static int \fBmoveToRoot\fP (\fBBtCursor\fP *pCur)"
.br
.ti -1c
.RI "static int \fBmoveToLeftmost\fP (\fBBtCursor\fP *pCur)"
.br
.ti -1c
.RI "static int \fBmoveToRightmost\fP (\fBBtCursor\fP *pCur)"
.br
.ti -1c
.RI "static int \fBfreePage2\fP (\fBBtShared\fP *pBt, \fBMemPage\fP *pMemPage, \fBPgno\fP iPage)"
.br
.ti -1c
.RI "static void \fBfreePage\fP (\fBMemPage\fP *pPage, int *pRC)"
.br
.ti -1c
.RI "static int \fBclearCell\fP (\fBMemPage\fP *pPage, unsigned char *pCell)"
.br
.ti -1c
.RI "static int \fBfillInCell\fP (\fBMemPage\fP *pPage, unsigned char *pCell, const void *pKey, \fBi64\fP nKey, const void *pData, int nData, int nZero, int *pnSize)"
.br
.ti -1c
.RI "static void \fBdropCell\fP (\fBMemPage\fP *pPage, int idx, int sz, int *pRC)"
.br
.ti -1c
.RI "static void \fBinsertCell\fP (\fBMemPage\fP *pPage, int i, \fBu8\fP *pCell, int sz, \fBu8\fP *pTemp, \fBPgno\fP iChild, int *pRC)"
.br
.ti -1c
.RI "static void \fBassemblePage\fP (\fBMemPage\fP *pPage, int nCell, \fBu8\fP **apCell, \fBu16\fP *aSize)"
.br
.ti -1c
.RI "static int \fBbalance_quick\fP (\fBMemPage\fP *pParent, \fBMemPage\fP *pPage, \fBu8\fP *pSpace)"
.br
.ti -1c
.RI "static void \fBcopyNodeContent\fP (\fBMemPage\fP *pFrom, \fBMemPage\fP *pTo, int *pRC)"
.br
.ti -1c
.RI "static int \fBbalance_nonroot\fP (\fBMemPage\fP *pParent, int iParentIdx, \fBu8\fP *aOvflSpace, int isRoot)"
.br
.ti -1c
.RI "static int \fBbalance_deeper\fP (\fBMemPage\fP *pRoot, \fBMemPage\fP **ppChild)"
.br
.ti -1c
.RI "static int \fBbalance\fP (\fBBtCursor\fP *pCur)"
.br
.ti -1c
.RI "static int \fBbtreeCreateTable\fP (\fBBtree\fP *p, int *piTable, int createTabFlags)"
.br
.ti -1c
.RI "static int \fBclearDatabasePage\fP (\fBBtShared\fP *pBt, \fBPgno\fP pgno, int freePageFlag, int *pnChange)"
.br
.ti -1c
.RI "static int \fBbtreeDropTable\fP (\fBBtree\fP *p, \fBPgno\fP iTable, int *piMoved)"
.br
.ti -1c
.RI "static void \fBcheckAppendMsg\fP (\fBIntegrityCk\fP *pCheck, char *zMsg1, const char *zFormat,...)"
.br
.ti -1c
.RI "static int \fBcheckRef\fP (\fBIntegrityCk\fP *pCheck, \fBPgno\fP iPage, char *zContext)"
.br
.ti -1c
.RI "static void \fBcheckPtrmap\fP (\fBIntegrityCk\fP *pCheck, \fBPgno\fP iChild, \fBu8\fP eType, \fBPgno\fP iParent, char *zContext)"
.br
.ti -1c
.RI "static void \fBcheckList\fP (\fBIntegrityCk\fP *pCheck, int isFreeList, int iPage, int N, char *zContext)"
.br
.ti -1c
.RI "static int \fBcheckTreePage\fP (\fBIntegrityCk\fP *pCheck, int iPage, char *zParentContext, \fBi64\fP *pnParentMinKey, \fBi64\fP *pnParentMaxKey)"
.br
.ti -1c
.RI "static \fBBtree\fP * \fBfindBtree\fP (\fBsqlite3\fP *pErrorDb, \fBsqlite3\fP *pDb, const char *zDb)"
.br
.ti -1c
.RI "static int \fBisFatalError\fP (int rc)"
.br
.ti -1c
.RI "static int \fBbackupOnePage\fP (\fBsqlite3_backup\fP *p, \fBPgno\fP iSrcPg, const \fBu8\fP *zSrcData)"
.br
.ti -1c
.RI "static int \fBbackupTruncateFile\fP (\fBsqlite3_file\fP *pFile, \fBi64\fP iSize)"
.br
.ti -1c
.RI "static void \fBattachBackupObject\fP (\fBsqlite3_backup\fP *p)"
.br
.ti -1c
.RI "static \fBi64\fP \fBdoubleToInt64\fP (double r)"
.br
.ti -1c
.RI "static int \fBgrowOpArray\fP (\fBVdbe\fP *p)"
.br
.ti -1c
.RI "static void \fBresolveP2Values\fP (\fBVdbe\fP *p, int *pMaxFuncArgs)"
.br
.ti -1c
.RI "static void \fBfreeEphemeralFunction\fP (\fBsqlite3\fP *\fBdb\fP, \fBFuncDef\fP *pDef)"
.br
.ti -1c
.RI "static void \fBvdbeFreeOpArray\fP (\fBsqlite3\fP *, \fBOp\fP *, int)"
.br
.ti -1c
.RI "static void \fBfreeP4\fP (\fBsqlite3\fP *\fBdb\fP, int p4type, void *p4)"
.br
.ti -1c
.RI "static char * \fBdisplayP4\fP (\fBOp\fP *pOp, char *zTemp, int nTemp)"
.br
.ti -1c
.RI "static void \fBreleaseMemArray\fP (\fBMem\fP *p, int N)"
.br
.ti -1c
.RI "static void * \fBallocSpace\fP (void *pBuf, int nByte, \fBu8\fP **ppFrom, \fBu8\fP *pEnd, int *pnByte)"
.br
.ti -1c
.RI "static void \fBcloseAllCursors\fP (\fBVdbe\fP *p)"
.br
.ti -1c
.RI "static void \fBCleanup\fP (\fBVdbe\fP *p)"
.br
.ti -1c
.RI "static int \fBvdbeCommit\fP (\fBsqlite3\fP *\fBdb\fP, \fBVdbe\fP *p)"
.br
.ti -1c
.RI "static void \fBinvalidateCursorsOnModifiedBtrees\fP (\fBsqlite3\fP *\fBdb\fP)"
.br
.ti -1c
.RI "SQLITE_PRIVATE \fBu32\fP \fBsqlite3VdbeSerialPut\fP (\fBu8\fP *buf, int nBuf, \fBMem\fP *pMem, int file_format)"
.br
.ti -1c
.RI "static int \fBvdbeSafety\fP (\fBVdbe\fP *p)"
.br
.ti -1c
.RI "static int \fBvdbeSafetyNotNull\fP (\fBVdbe\fP *p)"
.br
.ti -1c
.RI "static void \fBsetResultStrOrError\fP (\fBsqlite3_context\fP *pCtx, const char *z, int n, \fBu8\fP enc, void(*xDel)(void *))"
.br
.ti -1c
.RI "static int \fBdoWalCallbacks\fP (\fBsqlite3\fP *\fBdb\fP)"
.br
.ti -1c
.RI "static int \fBsqlite3Step\fP (\fBVdbe\fP *p)"
.br
.ti -1c
.RI "static \fBMem\fP * \fBcolumnMem\fP (\fBsqlite3_stmt\fP *pStmt, int i)"
.br
.ti -1c
.RI "static void \fBcolumnMallocFailure\fP (\fBsqlite3_stmt\fP *pStmt)"
.br
.ti -1c
.RI "static const void * \fBcolumnName\fP (\fBsqlite3_stmt\fP *pStmt, int N, const void *(*xFunc)(\fBMem\fP *), int useType)"
.br
.ti -1c
.RI "static int \fBvdbeUnbind\fP (\fBVdbe\fP *p, int i)"
.br
.ti -1c
.RI "static int \fBbindText\fP (\fBsqlite3_stmt\fP *pStmt, int i, const void *zData, int nData, void(*xDel)(void *), \fBu8\fP encoding)"
.br
.ti -1c
.RI "SQLITE_API int \fBsqlite3_bind_int64\fP (\fBsqlite3_stmt\fP *pStmt, int i, \fBsqlite_int64\fP iValue)"
.br
.ti -1c
.RI "static void \fBcreateVarMap\fP (\fBVdbe\fP *p)"
.br
.ti -1c
.RI "static int \fBfindNextHostParameter\fP (const char *zSql, int *pnToken)"
.br
.ti -1c
.RI "static \fBVdbeCursor\fP * \fBallocateCursor\fP (\fBVdbe\fP *p, int iCur, int nField, int iDb, int isBtreeCursor)"
.br
.ti -1c
.RI "static void \fBapplyNumericAffinity\fP (\fBMem\fP *pRec)"
.br
.ti -1c
.RI "static void \fBapplyAffinity\fP (\fBMem\fP *pRec, char affinity, \fBu8\fP enc)"
.br
.ti -1c
.RI "static void \fBimportVtabErrMsg\fP (\fBVdbe\fP *p, \fBsqlite3_vtab\fP *pVtab)"
.br
.ti -1c
.RI "SQLITE_API int \fBsqlite3_blob_open\fP (\fBsqlite3\fP *\fBdb\fP, const char *zDb, const char *zTable, const char *zColumn, \fBsqlite_int64\fP iRow, int flags, \fBsqlite3_blob\fP **ppBlob)"
.br
.ti -1c
.RI "static int \fBblobReadWrite\fP (\fBsqlite3_blob\fP *pBlob, void *z, int n, int iOffset, int(*xCall)(\fBBtCursor\fP *, \fBu32\fP, \fBu32\fP, void *))"
.br
.ti -1c
.RI "static int \fBmemjrnlRead\fP (\fBsqlite3_file\fP *pJfd, void *zBuf, int iAmt, \fBsqlite_int64\fP iOfst)"
.br
.ti -1c
.RI "static int \fBmemjrnlWrite\fP (\fBsqlite3_file\fP *pJfd, const void *zBuf, int iAmt, \fBsqlite_int64\fP iOfst)"
.br
.ti -1c
.RI "static int \fBmemjrnlTruncate\fP (\fBsqlite3_file\fP *pJfd, \fBsqlite_int64\fP size)"
.br
.ti -1c
.RI "static int \fBmemjrnlClose\fP (\fBsqlite3_file\fP *pJfd)"
.br
.ti -1c
.RI "static int \fBmemjrnlSync\fP (\fBsqlite3_file\fP *NotUsed, int NotUsed2)"
.br
.ti -1c
.RI "static int \fBmemjrnlFileSize\fP (\fBsqlite3_file\fP *pJfd, \fBsqlite_int64\fP *pSize)"
.br
.ti -1c
.RI "static void \fBresolveAlias\fP (\fBParse\fP *pParse, \fBExprList\fP *pEList, int iCol, \fBExpr\fP *pExpr, const char *zType)"
.br
.ti -1c
.RI "static int \fBlookupName\fP (\fBParse\fP *pParse, const char *zDb, const char *zTab, const char *zCol, \fBNameContext\fP *pNC, \fBExpr\fP *pExpr)"
.br
.ti -1c
.RI "static int \fBresolveExprStep\fP (\fBWalker\fP *pWalker, \fBExpr\fP *pExpr)"
.br
.ti -1c
.RI "static int \fBresolveAsName\fP (\fBParse\fP *pParse, \fBExprList\fP *pEList, \fBExpr\fP *pE)"
.br
.ti -1c
.RI "static int \fBresolveOrderByTermToExprList\fP (\fBParse\fP *pParse, \fBSelect\fP *pSelect, \fBExpr\fP *pE)"
.br
.ti -1c
.RI "static void \fBresolveOutOfRangeError\fP (\fBParse\fP *pParse, const char *zType, int i, int mx)"
.br
.ti -1c
.RI "static int \fBresolveCompoundOrderBy\fP (\fBParse\fP *pParse, \fBSelect\fP *pSelect)"
.br
.ti -1c
.RI "static int \fBresolveOrderGroupBy\fP (\fBNameContext\fP *pNC, \fBSelect\fP *pSelect, \fBExprList\fP *pOrderBy, const char *zType)"
.br
.ti -1c
.RI "static int \fBresolveSelectStep\fP (\fBWalker\fP *pWalker, \fBSelect\fP *p)"
.br
.ti -1c
.RI "static char \fBcomparisonAffinity\fP (\fBExpr\fP *pExpr)"
.br
.ti -1c
.RI "static \fBu8\fP \fBbinaryCompareP5\fP (\fBExpr\fP *pExpr1, \fBExpr\fP *pExpr2, int jumpIfNull)"
.br
.ti -1c
.RI "static int \fBcodeCompare\fP (\fBParse\fP *pParse, \fBExpr\fP *pLeft, \fBExpr\fP *pRight, int opcode, int in1, int in2, int dest, int jumpIfNull)"
.br
.ti -1c
.RI "static void \fBheightOfExpr\fP (\fBExpr\fP *p, int *pnHeight)"
.br
.ti -1c
.RI "static void \fBheightOfExprList\fP (\fBExprList\fP *p, int *pnHeight)"
.br
.ti -1c
.RI "static void \fBheightOfSelect\fP (\fBSelect\fP *p, int *pnHeight)"
.br
.ti -1c
.RI "static void \fBexprSetHeight\fP (\fBExpr\fP *p)"
.br
.ti -1c
.RI "static int \fBexprStructSize\fP (\fBExpr\fP *p)"
.br
.ti -1c
.RI "static int \fBdupedExprStructSize\fP (\fBExpr\fP *p, int flags)"
.br
.ti -1c
.RI "static int \fBdupedExprNodeSize\fP (\fBExpr\fP *p, int flags)"
.br
.ti -1c
.RI "static int \fBdupedExprSize\fP (\fBExpr\fP *p, int flags)"
.br
.ti -1c
.RI "static \fBExpr\fP * \fBexprDup\fP (\fBsqlite3\fP *\fBdb\fP, \fBExpr\fP *p, int flags, \fBu8\fP **pzBuffer)"
.br
.ti -1c
.RI "static int \fBexprNodeIsConstant\fP (\fBWalker\fP *pWalker, \fBExpr\fP *pExpr)"
.br
.ti -1c
.RI "static int \fBselectNodeIsConstant\fP (\fBWalker\fP *pWalker, \fBSelect\fP *NotUsed)"
.br
.ti -1c
.RI "static int \fBexprIsConst\fP (\fBExpr\fP *p, int initFlag)"
.br
.ti -1c
.RI "static int \fBisCandidateForInOpt\fP (\fBSelect\fP *p)"
.br
.ti -1c
.RI "static void \fBsqlite3ExprCodeIN\fP (\fBParse\fP *pParse, \fBExpr\fP *pExpr, int destIfFalse, int destIfNull)"
.br
.ti -1c
.RI "static char * \fBdup8bytes\fP (\fBVdbe\fP *v, const char *in)"
.br
.ti -1c
.RI "static void \fBcodeReal\fP (\fBVdbe\fP *v, const char *z, int negateFlag, int iMem)"
.br
.ti -1c
.RI "static void \fBcodeInteger\fP (\fBParse\fP *pParse, \fBExpr\fP *pExpr, int negFlag, int iMem)"
.br
.ti -1c
.RI "static void \fBcacheEntryClear\fP (\fBParse\fP *pParse, struct yColCache *p)"
.br
.ti -1c
.RI "static void \fBsqlite3ExprCachePinRegister\fP (\fBParse\fP *pParse, int iReg)"
.br
.ti -1c
.RI "static int \fBisAppropriateForFactoring\fP (\fBExpr\fP *p)"
.br
.ti -1c
.RI "static int \fBevalConstExpr\fP (\fBWalker\fP *pWalker, \fBExpr\fP *pExpr)"
.br
.ti -1c
.RI "static void \fBexprCodeBetween\fP (\fBParse\fP *pParse, \fBExpr\fP *pExpr, int dest, int jumpIfTrue, int jumpIfNull)"
.br
.ti -1c
.RI "static int \fBaddAggInfoColumn\fP (\fBsqlite3\fP *\fBdb\fP, \fBAggInfo\fP *pInfo)"
.br
.ti -1c
.RI "static int \fBaddAggInfoFunc\fP (\fBsqlite3\fP *\fBdb\fP, \fBAggInfo\fP *pInfo)"
.br
.ti -1c
.RI "static int \fBanalyzeAggregate\fP (\fBWalker\fP *pWalker, \fBExpr\fP *pExpr)"
.br
.ti -1c
.RI "static int \fBanalyzeAggregatesInSelect\fP (\fBWalker\fP *pWalker, \fBSelect\fP *pSelect)"
.br
.ti -1c
.RI "static void \fBrenameTableFunc\fP (\fBsqlite3_context\fP *context, int NotUsed, \fBsqlite3_value\fP **argv)"
.br
.ti -1c
.RI "static void \fBrenameParentFunc\fP (\fBsqlite3_context\fP *context, int NotUsed, \fBsqlite3_value\fP **argv)"
.br
.ti -1c
.RI "static void \fBrenameTriggerFunc\fP (\fBsqlite3_context\fP *context, int NotUsed, \fBsqlite3_value\fP **argv)"
.br
.ti -1c
.RI "static char * \fBwhereOrName\fP (\fBsqlite3\fP *\fBdb\fP, char *zWhere, char *zConstant)"
.br
.ti -1c
.RI "static char * \fBwhereForeignKeys\fP (\fBParse\fP *pParse, \fBTable\fP *pTab)"
.br
.ti -1c
.RI "static char * \fBwhereTempTriggers\fP (\fBParse\fP *pParse, \fBTable\fP *pTab)"
.br
.ti -1c
.RI "static void \fBreloadTableSchema\fP (\fBParse\fP *pParse, \fBTable\fP *pTab, const char *zName)"
.br
.ti -1c
.RI "static void \fBopenStatTable\fP (\fBParse\fP *pParse, int iDb, int iStatCur, const char *zWhere)"
.br
.ti -1c
.RI "static void \fBanalyzeOneTable\fP (\fBParse\fP *pParse, \fBTable\fP *pTab, int iStatCur, int iMem)"
.br
.ti -1c
.RI "static void \fBloadAnalysis\fP (\fBParse\fP *pParse, int iDb)"
.br
.ti -1c
.RI "static void \fBanalyzeDatabase\fP (\fBParse\fP *pParse, int iDb)"
.br
.ti -1c
.RI "static void \fBanalyzeTable\fP (\fBParse\fP *pParse, \fBTable\fP *pTab)"
.br
.ti -1c
.RI "static int \fBanalysisLoader\fP (void *pData, int argc, char **argv, char **NotUsed)"
.br
.ti -1c
.RI "static int \fBresolveAttachExpr\fP (\fBNameContext\fP *pName, \fBExpr\fP *pExpr)"
.br
.ti -1c
.RI "static void \fBattachFunc\fP (\fBsqlite3_context\fP *context, int NotUsed, \fBsqlite3_value\fP **argv)"
.br
.ti -1c
.RI "static void \fBdetachFunc\fP (\fBsqlite3_context\fP *context, int NotUsed, \fBsqlite3_value\fP **argv)"
.br
.ti -1c
.RI "static void \fBcodeAttach\fP (\fBParse\fP *pParse, int type, \fBFuncDef\fP const *pFunc, \fBExpr\fP *pAuthArg, \fBExpr\fP *pFilename, \fBExpr\fP *pDbname, \fBExpr\fP *pKey)"
.br
.ti -1c
.RI "static void \fBsqliteAuthBadReturnCode\fP (\fBParse\fP *pParse)"
.br
.ti -1c
.RI "static void \fBcodeTableLocks\fP (\fBParse\fP *pParse)"
.br
.ti -1c
.RI "static void \fBfreeIndex\fP (\fBsqlite3\fP *\fBdb\fP, \fBIndex\fP *p)"
.br
.ti -1c
.RI "static void \fBsqliteDeleteColumnNames\fP (\fBsqlite3\fP *\fBdb\fP, \fBTable\fP *pTable)"
.br
.ti -1c
.RI "static int \fBidentLength\fP (const char *z)"
.br
.ti -1c
.RI "static void \fBidentPut\fP (char *z, int *pIdx, char *zSignedIdent)"
.br
.ti -1c
.RI "static char * \fBcreateTableStmt\fP (\fBsqlite3\fP *\fBdb\fP, \fBTable\fP *p)"
.br
.ti -1c
.RI "static void \fBsqliteViewResetAll\fP (\fBsqlite3\fP *\fBdb\fP, int idx)"
.br
.ti -1c
.RI "static void \fBdestroyRootPage\fP (\fBParse\fP *pParse, int iTable, int iDb)"
.br
.ti -1c
.RI "static void \fBdestroyTable\fP (\fBParse\fP *pParse, \fBTable\fP *pTab)"
.br
.ti -1c
.RI "static void \fBsqlite3RefillIndex\fP (\fBParse\fP *pParse, \fBIndex\fP *pIndex, int memRootPage)"
.br
.ti -1c
.RI "static int \fBcollationMatch\fP (const char *zColl, \fBIndex\fP *pIndex)"
.br
.ti -1c
.RI "static void \fBreindexTable\fP (\fBParse\fP *pParse, \fBTable\fP *pTab, char const *zColl)"
.br
.ti -1c
.RI "static void \fBreindexDatabases\fP (\fBParse\fP *pParse, char const *zColl)"
.br
.ti -1c
.RI "static void \fBcallCollNeeded\fP (\fBsqlite3\fP *\fBdb\fP, int enc, const char *zName)"
.br
.ti -1c
.RI "static int \fBsynthCollSeq\fP (\fBsqlite3\fP *\fBdb\fP, \fBCollSeq\fP *pColl)"
.br
.ti -1c
.RI "static \fBCollSeq\fP * \fBfindCollSeqEntry\fP (\fBsqlite3\fP *\fBdb\fP, const char *zName, int create)"
.br
.ti -1c
.RI "static int \fBmatchQuality\fP (\fBFuncDef\fP *p, int nArg, \fBu8\fP enc)"
.br
.ti -1c
.RI "static \fBFuncDef\fP * \fBfunctionSearch\fP (\fBFuncDefHash\fP *pHash, int h, const char *zFunc, int nFunc)"
.br
.ti -1c
.RI "static \fBCollSeq\fP * \fBsqlite3GetFuncCollSeq\fP (\fBsqlite3_context\fP *context)"
.br
.ti -1c
.RI "static void \fBminmaxFunc\fP (\fBsqlite3_context\fP *context, int argc, \fBsqlite3_value\fP **argv)"
.br
.ti -1c
.RI "static void \fBtypeofFunc\fP (\fBsqlite3_context\fP *context, int NotUsed, \fBsqlite3_value\fP **argv)"
.br
.ti -1c
.RI "static void \fBlengthFunc\fP (\fBsqlite3_context\fP *context, int argc, \fBsqlite3_value\fP **argv)"
.br
.ti -1c
.RI "static void \fBabsFunc\fP (\fBsqlite3_context\fP *context, int argc, \fBsqlite3_value\fP **argv)"
.br
.ti -1c
.RI "static void \fBsubstrFunc\fP (\fBsqlite3_context\fP *context, int argc, \fBsqlite3_value\fP **argv)"
.br
.ti -1c
.RI "static void \fBroundFunc\fP (\fBsqlite3_context\fP *context, int argc, \fBsqlite3_value\fP **argv)"
.br
.ti -1c
.RI "static void * \fBcontextMalloc\fP (\fBsqlite3_context\fP *context, \fBi64\fP nByte)"
.br
.ti -1c
.RI "static void \fBupperFunc\fP (\fBsqlite3_context\fP *context, int argc, \fBsqlite3_value\fP **argv)"
.br
.ti -1c
.RI "static void \fBlowerFunc\fP (\fBsqlite3_context\fP *context, int argc, \fBsqlite3_value\fP **argv)"
.br
.ti -1c
.RI "static void \fBrandomFunc\fP (\fBsqlite3_context\fP *context, int NotUsed, \fBsqlite3_value\fP **NotUsed2)"
.br
.ti -1c
.RI "static void \fBrandomBlob\fP (\fBsqlite3_context\fP *context, int argc, \fBsqlite3_value\fP **argv)"
.br
.ti -1c
.RI "static void \fBlast_insert_rowid\fP (\fBsqlite3_context\fP *context, int NotUsed, \fBsqlite3_value\fP **NotUsed2)"
.br
.ti -1c
.RI "static void \fBchanges\fP (\fBsqlite3_context\fP *context, int NotUsed, \fBsqlite3_value\fP **NotUsed2)"
.br
.ti -1c
.RI "static void \fBtotal_changes\fP (\fBsqlite3_context\fP *context, int NotUsed, \fBsqlite3_value\fP **NotUsed2)"
.br
.ti -1c
.RI "static int \fBpatternCompare\fP (const \fBu8\fP *zPattern, const \fBu8\fP *zString, const struct \fBcompareInfo\fP *pInfo, const int esc)"
.br
.ti -1c
.RI "static void \fBlikeFunc\fP (\fBsqlite3_context\fP *context, int argc, \fBsqlite3_value\fP **argv)"
.br
.ti -1c
.RI "static void \fBnullifFunc\fP (\fBsqlite3_context\fP *context, int NotUsed, \fBsqlite3_value\fP **argv)"
.br
.ti -1c
.RI "static void \fBversionFunc\fP (\fBsqlite3_context\fP *context, int NotUsed, \fBsqlite3_value\fP **NotUsed2)"
.br
.ti -1c
.RI "static void \fBsourceidFunc\fP (\fBsqlite3_context\fP *context, int NotUsed, \fBsqlite3_value\fP **NotUsed2)"
.br
.ti -1c
.RI "static void \fBcompileoptionusedFunc\fP (\fBsqlite3_context\fP *context, int argc, \fBsqlite3_value\fP **argv)"
.br
.ti -1c
.RI "static void \fBcompileoptiongetFunc\fP (\fBsqlite3_context\fP *context, int argc, \fBsqlite3_value\fP **argv)"
.br
.ti -1c
.RI "static void \fBquoteFunc\fP (\fBsqlite3_context\fP *context, int argc, \fBsqlite3_value\fP **argv)"
.br
.ti -1c
.RI "static void \fBhexFunc\fP (\fBsqlite3_context\fP *context, int argc, \fBsqlite3_value\fP **argv)"
.br
.ti -1c
.RI "static void \fBzeroblobFunc\fP (\fBsqlite3_context\fP *context, int argc, \fBsqlite3_value\fP **argv)"
.br
.ti -1c
.RI "static void \fBreplaceFunc\fP (\fBsqlite3_context\fP *context, int argc, \fBsqlite3_value\fP **argv)"
.br
.ti -1c
.RI "static void \fBtrimFunc\fP (\fBsqlite3_context\fP *context, int argc, \fBsqlite3_value\fP **argv)"
.br
.ti -1c
.RI "static void \fBloadExt\fP (\fBsqlite3_context\fP *context, int argc, \fBsqlite3_value\fP **argv)"
.br
.ti -1c
.RI "static void \fBsumStep\fP (\fBsqlite3_context\fP *context, int argc, \fBsqlite3_value\fP **argv)"
.br
.ti -1c
.RI "static void \fBsumFinalize\fP (\fBsqlite3_context\fP *context)"
.br
.ti -1c
.RI "static void \fBavgFinalize\fP (\fBsqlite3_context\fP *context)"
.br
.ti -1c
.RI "static void \fBtotalFinalize\fP (\fBsqlite3_context\fP *context)"
.br
.ti -1c
.RI "static void \fBcountStep\fP (\fBsqlite3_context\fP *context, int argc, \fBsqlite3_value\fP **argv)"
.br
.ti -1c
.RI "static void \fBcountFinalize\fP (\fBsqlite3_context\fP *context)"
.br
.ti -1c
.RI "static void \fBminmaxStep\fP (\fBsqlite3_context\fP *context, int NotUsed, \fBsqlite3_value\fP **argv)"
.br
.ti -1c
.RI "static void \fBminMaxFinalize\fP (\fBsqlite3_context\fP *context)"
.br
.ti -1c
.RI "static void \fBgroupConcatStep\fP (\fBsqlite3_context\fP *context, int argc, \fBsqlite3_value\fP **argv)"
.br
.ti -1c
.RI "static void \fBgroupConcatFinalize\fP (\fBsqlite3_context\fP *context)"
.br
.ti -1c
.RI "static void \fBsetLikeOptFlag\fP (\fBsqlite3\fP *\fBdb\fP, const char *zName, \fBu8\fP flagVal)"
.br
.ti -1c
.RI "static int \fBlocateFkeyIndex\fP (\fBParse\fP *pParse, \fBTable\fP *pParent, \fBFKey\fP *pFKey, \fBIndex\fP **ppIdx, int **paiCol)"
.br
.ti -1c
.RI "static void \fBfkLookupParent\fP (\fBParse\fP *pParse, int iDb, \fBTable\fP *pTab, \fBIndex\fP *pIdx, \fBFKey\fP *pFKey, int *aiCol, int regData, int nIncr, int isIgnore)"
.br
.ti -1c
.RI "static void \fBfkScanChildren\fP (\fBParse\fP *pParse, \fBSrcList\fP *pSrc, \fBTable\fP *pTab, \fBIndex\fP *pIdx, \fBFKey\fP *pFKey, int *aiCol, int regData, int nIncr)"
.br
.ti -1c
.RI "static void \fBfkTriggerDelete\fP (\fBsqlite3\fP *dbMem, \fBTrigger\fP *p)"
.br
.ti -1c
.RI "static \fBTrigger\fP * \fBfkActionTrigger\fP (\fBParse\fP *pParse, \fBTable\fP *pTab, \fBFKey\fP *pFKey, \fBExprList\fP *pChanges)"
.br
.ti -1c
.RI "static int \fBreadsTable\fP (\fBParse\fP *p, int iStartAddr, int iDb, \fBTable\fP *pTab)"
.br
.ti -1c
.RI "static int \fBautoIncBegin\fP (\fBParse\fP *pParse, int iDb, \fBTable\fP *pTab)"
.br
.ti -1c
.RI "static void \fBautoIncStep\fP (\fBParse\fP *pParse, int memId, int regRowid)"
.br
.ti -1c
.RI "static int \fBxferOptimization\fP (\fBParse\fP *pParse, \fBTable\fP *pDest, \fBSelect\fP *pSelect, int onError, int iDbDest)"
.br
.ti -1c
.RI "static int \fBxferCompatibleCollation\fP (const char *z1, const char *z2)"
.br
.ti -1c
.RI "static int \fBxferCompatibleIndex\fP (\fBIndex\fP *pDest, \fBIndex\fP *pSrc)"
.br
.ti -1c
.RI "SQLITE_API int \fBsqlite3_exec\fP (\fBsqlite3\fP *\fBdb\fP, const char *zSql, \fBsqlite3_callback\fP xCallback, void *pArg, char **pzErrMsg)"
.br
.ti -1c
.RI "static int \fBsqlite3LoadExtension\fP (\fBsqlite3\fP *\fBdb\fP, const char *zFile, const char *zProc, char **pzErrMsg)"
.br
.ti -1c
.RI "static \fBu8\fP \fBgetSafetyLevel\fP (const char *z)"
.br
.ti -1c
.RI "static \fBu8\fP \fBgetBoolean\fP (const char *z)"
.br
.ti -1c
.RI "static int \fBgetLockingMode\fP (const char *z)"
.br
.ti -1c
.RI "static int \fBgetAutoVacuum\fP (const char *z)"
.br
.ti -1c
.RI "static int \fBgetTempStore\fP (const char *z)"
.br
.ti -1c
.RI "static int \fBinvalidateTempStorage\fP (\fBParse\fP *pParse)"
.br
.ti -1c
.RI "static int \fBchangeTempStorage\fP (\fBParse\fP *pParse, const char *zStorageType)"
.br
.ti -1c
.RI "static void \fBreturnSingleInt\fP (\fBParse\fP *pParse, const char *zLabel, \fBi64\fP value)"
.br
.ti -1c
.RI "static int \fBflagPragma\fP (\fBParse\fP *pParse, const char *zLeft, const char *zRight)"
.br
.ti -1c
.RI "static const char * \fBactionName\fP (\fBu8\fP action)"
.br
.ti -1c
.RI "static void \fBcorruptSchema\fP (\fBInitData\fP *pData, const char *zObj, const char *zExtra)"
.br
.ti -1c
.RI "static int \fBsqlite3InitOne\fP (\fBsqlite3\fP *\fBdb\fP, int iDb, char **pzErrMsg)"
.br
.ti -1c
.RI "static void \fBschemaIsValid\fP (\fBParse\fP *pParse)"
.br
.ti -1c
.RI "static int \fBsqlite3Prepare\fP (\fBsqlite3\fP *\fBdb\fP, const char *zSql, int nBytes, int saveSqlFlag, \fBVdbe\fP *pReprepare, \fBsqlite3_stmt\fP **ppStmt, const char **pzTail)"
.br
.ti -1c
.RI "static int \fBsqlite3LockAndPrepare\fP (\fBsqlite3\fP *\fBdb\fP, const char *zSql, int nBytes, int saveSqlFlag, \fBVdbe\fP *pOld, \fBsqlite3_stmt\fP **ppStmt, const char **pzTail)"
.br
.ti -1c
.RI "static int \fBsqlite3Prepare16\fP (\fBsqlite3\fP *\fBdb\fP, const void *zSql, int nBytes, int saveSqlFlag, \fBsqlite3_stmt\fP **ppStmt, const void **pzTail)"
.br
.ti -1c
.RI "static void \fBclearSelect\fP (\fBsqlite3\fP *\fBdb\fP, \fBSelect\fP *p)"
.br
.ti -1c
.RI "static int \fBcolumnIndex\fP (\fBTable\fP *pTab, const char *zCol)"
.br
.ti -1c
.RI "static int \fBtableAndColumnIndex\fP (\fBSrcList\fP *pSrc, int N, const char *zCol, int *piTab, int *piCol)"
.br
.ti -1c
.RI "static void \fBaddWhereTerm\fP (\fBParse\fP *pParse, \fBSrcList\fP *pSrc, int iLeft, int iColLeft, int iRight, int iColRight, int isOuterJoin, \fBExpr\fP **ppWhere)"
.br
.ti -1c
.RI "static void \fBsetJoinExpr\fP (\fBExpr\fP *p, int iTable)"
.br
.ti -1c
.RI "static int \fBsqliteProcessJoin\fP (\fBParse\fP *pParse, \fBSelect\fP *p)"
.br
.ti -1c
.RI "static void \fBpushOntoSorter\fP (\fBParse\fP *pParse, \fBExprList\fP *pOrderBy, \fBSelect\fP *pSelect, int regData)"
.br
.ti -1c
.RI "static void \fBcodeOffset\fP (\fBVdbe\fP *v, \fBSelect\fP *p, int iContinue)"
.br
.ti -1c
.RI "static void \fBcodeDistinct\fP (\fBParse\fP *pParse, int iTab, int addrRepeat, int N, int iMem)"
.br
.ti -1c
.RI "static int \fBcheckForMultiColumnSelectError\fP (\fBParse\fP *pParse, \fBSelectDest\fP *pDest, int nExpr)"
.br
.ti -1c
.RI "static void \fBselectInnerLoop\fP (\fBParse\fP *pParse, \fBSelect\fP *p, \fBExprList\fP *pEList, int srcTab, int nColumn, \fBExprList\fP *pOrderBy, int distinct, \fBSelectDest\fP *pDest, int iContinue, int iBreak)"
.br
.ti -1c
.RI "static \fBKeyInfo\fP * \fBkeyInfoFromExprList\fP (\fBParse\fP *pParse, \fBExprList\fP *pList)"
.br
.ti -1c
.RI "static void \fBgenerateSortTail\fP (\fBParse\fP *pParse, \fBSelect\fP *p, \fBVdbe\fP *v, int nColumn, \fBSelectDest\fP *pDest)"
.br
.ti -1c
.RI "static const char * \fBcolumnType\fP (\fBNameContext\fP *pNC, \fBExpr\fP *pExpr, const char **pzOriginDb, const char **pzOriginTab, const char **pzOriginCol)"
.br
.ti -1c
.RI "static void \fBgenerateColumnTypes\fP (\fBParse\fP *pParse, \fBSrcList\fP *pTabList, \fBExprList\fP *pEList)"
.br
.ti -1c
.RI "static void \fBgenerateColumnNames\fP (\fBParse\fP *pParse, \fBSrcList\fP *pTabList, \fBExprList\fP *pEList)"
.br
.ti -1c
.RI "static const char * \fBselectOpName\fP (int id)"
.br
.ti -1c
.RI "static int \fBselectColumnsFromExprList\fP (\fBParse\fP *pParse, \fBExprList\fP *pEList, int *pnCol, \fBColumn\fP **paCol)"
.br
.ti -1c
.RI "static void \fBselectAddColumnTypeAndCollation\fP (\fBParse\fP *pParse, int nCol, \fBColumn\fP *aCol, \fBSelect\fP *pSelect)"
.br
.ti -1c
.RI "static void \fBcomputeLimitRegisters\fP (\fBParse\fP *pParse, \fBSelect\fP *p, int iBreak)"
.br
.ti -1c
.RI "static \fBCollSeq\fP * \fBmultiSelectCollSeq\fP (\fBParse\fP *pParse, \fBSelect\fP *p, int iCol)"
.br
.ti -1c
.RI "static int \fBmultiSelectOrderBy\fP (\fBParse\fP *pParse, \fBSelect\fP *p, \fBSelectDest\fP *pDest)"
.br
.ti -1c
.RI "static int \fBmultiSelect\fP (\fBParse\fP *pParse, \fBSelect\fP *p, \fBSelectDest\fP *pDest)"
.br
.ti -1c
.RI "static int \fBgenerateOutputSubroutine\fP (\fBParse\fP *pParse, \fBSelect\fP *p, \fBSelectDest\fP *pIn, \fBSelectDest\fP *pDest, int regReturn, int regPrev, \fBKeyInfo\fP *pKeyInfo, int p4type, int iBreak)"
.br
.ti -1c
.RI "static void \fBsubstExprList\fP (\fBsqlite3\fP *, \fBExprList\fP *, int, \fBExprList\fP *)"
.br
.ti -1c
.RI "static void \fBsubstSelect\fP (\fBsqlite3\fP *, \fBSelect\fP *, int, \fBExprList\fP *)"
.br
.ti -1c
.RI "static \fBExpr\fP * \fBsubstExpr\fP (\fBsqlite3\fP *\fBdb\fP, \fBExpr\fP *pExpr, int iTable, \fBExprList\fP *pEList)"
.br
.ti -1c
.RI "static int \fBflattenSubquery\fP (\fBParse\fP *pParse, \fBSelect\fP *p, int iFrom, int isAgg, int subqueryIsAgg)"
.br
.ti -1c
.RI "static \fBu8\fP \fBminMaxQuery\fP (\fBSelect\fP *p)"
.br
.ti -1c
.RI "static \fBTable\fP * \fBisSimpleCount\fP (\fBSelect\fP *p, \fBAggInfo\fP *pAggInfo)"
.br
.ti -1c
.RI "static int \fBselectExpander\fP (\fBWalker\fP *pWalker, \fBSelect\fP *p)"
.br
.ti -1c
.RI "static int \fBexprWalkNoop\fP (\fBWalker\fP *NotUsed, \fBExpr\fP *NotUsed2)"
.br
.ti -1c
.RI "static void \fBsqlite3SelectExpand\fP (\fBParse\fP *pParse, \fBSelect\fP *pSelect)"
.br
.ti -1c
.RI "static int \fBselectAddSubqueryTypeInfo\fP (\fBWalker\fP *pWalker, \fBSelect\fP *p)"
.br
.ti -1c
.RI "static void \fBsqlite3SelectAddTypeInfo\fP (\fBParse\fP *pParse, \fBSelect\fP *pSelect)"
.br
.ti -1c
.RI "static void \fBresetAccumulator\fP (\fBParse\fP *pParse, \fBAggInfo\fP *pAggInfo)"
.br
.ti -1c
.RI "static void \fBfinalizeAggFunctions\fP (\fBParse\fP *pParse, \fBAggInfo\fP *pAggInfo)"
.br
.ti -1c
.RI "static void \fBupdateAccumulator\fP (\fBParse\fP *pParse, \fBAggInfo\fP *pAggInfo)"
.br
.ti -1c
.RI "static int \fBsqlite3_get_table_cb\fP (void *pArg, int nCol, char **argv, char **colv)"
.br
.ti -1c
.RI "static \fBTriggerStep\fP * \fBtriggerStepAllocate\fP (\fBsqlite3\fP *\fBdb\fP, \fBu8\fP op, \fBToken\fP *pName)"
.br
.ti -1c
.RI "static \fBTable\fP * \fBtableOfTrigger\fP (\fBTrigger\fP *pTrigger)"
.br
.ti -1c
.RI "static int \fBcheckColumnOverlap\fP (\fBIdList\fP *pIdList, \fBExprList\fP *pEList)"
.br
.ti -1c
.RI "static \fBSrcList\fP * \fBtargetSrcList\fP (\fBParse\fP *pParse, \fBTriggerStep\fP *pStep)"
.br
.ti -1c
.RI "static int \fBcodeTriggerProgram\fP (\fBParse\fP *pParse, \fBTriggerStep\fP *pStepList, int orconf)"
.br
.ti -1c
.RI "static void \fBtransferParseError\fP (\fBParse\fP *pTo, \fBParse\fP *pFrom)"
.br
.ti -1c
.RI "static \fBTriggerPrg\fP * \fBcodeRowTrigger\fP (\fBParse\fP *pParse, \fBTrigger\fP *pTrigger, \fBTable\fP *pTab, int orconf)"
.br
.ti -1c
.RI "static \fBTriggerPrg\fP * \fBgetRowTrigger\fP (\fBParse\fP *pParse, \fBTrigger\fP *pTrigger, \fBTable\fP *pTab, int orconf)"
.br
.ti -1c
.RI "static void \fBupdateVirtualTable\fP (\fBParse\fP *pParse, \fBSrcList\fP *pSrc, \fBTable\fP *pTab, \fBExprList\fP *pChanges, \fBExpr\fP *pRowidExpr, int *aXRef, \fBExpr\fP *pWhere)"
.br
.ti -1c
.RI "static int \fBvacuumFinalize\fP (\fBsqlite3\fP *\fBdb\fP, \fBsqlite3_stmt\fP *pStmt, char **pzErrMsg)"
.br
.ti -1c
.RI "static int \fBexecSql\fP (\fBsqlite3\fP *\fBdb\fP, char **pzErrMsg, const char *zSql)"
.br
.ti -1c
.RI "static int \fBexecExecSql\fP (\fBsqlite3\fP *\fBdb\fP, char **pzErrMsg, const char *zSql)"
.br
.ti -1c
.RI "static int \fBcreateModule\fP (\fBsqlite3\fP *\fBdb\fP, const char *zName, const \fBsqlite3_module\fP *pModule, void *pAux, void(*xDestroy)(void *))"
.br
.ti -1c
.RI "static \fBVTable\fP * \fBvtabDisconnectAll\fP (\fBsqlite3\fP *\fBdb\fP, \fBTable\fP *p)"
.br
.ti -1c
.RI "static void \fBaddModuleArgument\fP (\fBsqlite3\fP *\fBdb\fP, \fBTable\fP *pTable, char *zArg)"
.br
.ti -1c
.RI "static void \fBaddArgumentToVtab\fP (\fBParse\fP *pParse)"
.br
.ti -1c
.RI "static int \fBvtabCallConstructor\fP (\fBsqlite3\fP *\fBdb\fP, \fBTable\fP *pTab, \fBModule\fP *pMod, int(*xConstruct)(\fBsqlite3\fP *, void *, int, const char *const *, \fBsqlite3_vtab\fP **, char **), char **pzErr)"
.br
.ti -1c
.RI "static int \fBaddToVTrans\fP (\fBsqlite3\fP *\fBdb\fP, \fBVTable\fP *pVTab)"
.br
.ti -1c
.RI "static void \fBcallFinaliser\fP (\fBsqlite3\fP *\fBdb\fP, int offset)"
.br
.ti -1c
.RI "static void \fBwhereClauseInit\fP (\fBWhereClause\fP *pWC, \fBParse\fP *pParse, \fBWhereMaskSet\fP *pMaskSet)"
.br
.ti -1c
.RI "static void \fBwhereClauseClear\fP (\fBWhereClause\fP *)"
.br
.ti -1c
.RI "static void \fBwhereOrInfoDelete\fP (\fBsqlite3\fP *\fBdb\fP, \fBWhereOrInfo\fP *p)"
.br
.ti -1c
.RI "static void \fBwhereAndInfoDelete\fP (\fBsqlite3\fP *\fBdb\fP, \fBWhereAndInfo\fP *p)"
.br
.ti -1c
.RI "static int \fBwhereClauseInsert\fP (\fBWhereClause\fP *pWC, \fBExpr\fP *p, \fBu8\fP wtFlags)"
.br
.ti -1c
.RI "static void \fBwhereSplit\fP (\fBWhereClause\fP *pWC, \fBExpr\fP *pExpr, int op)"
.br
.ti -1c
.RI "static \fBBitmask\fP \fBgetMask\fP (\fBWhereMaskSet\fP *pMaskSet, int iCursor)"
.br
.ti -1c
.RI "static void \fBcreateMask\fP (\fBWhereMaskSet\fP *pMaskSet, int iCursor)"
.br
.ti -1c
.RI "static \fBBitmask\fP \fBexprListTableUsage\fP (\fBWhereMaskSet\fP *, \fBExprList\fP *)"
.br
.ti -1c
.RI "static \fBBitmask\fP \fBexprSelectTableUsage\fP (\fBWhereMaskSet\fP *, \fBSelect\fP *)"
.br
.ti -1c
.RI "static \fBBitmask\fP \fBexprTableUsage\fP (\fBWhereMaskSet\fP *pMaskSet, \fBExpr\fP *p)"
.br
.ti -1c
.RI "static int \fBallowedOp\fP (int op)"
.br
.ti -1c
.RI "static void \fBexprCommute\fP (\fBParse\fP *pParse, \fBExpr\fP *pExpr)"
.br
.ti -1c
.RI "static \fBu16\fP \fBoperatorMask\fP (int op)"
.br
.ti -1c
.RI "static \fBWhereTerm\fP * \fBfindTerm\fP (\fBWhereClause\fP *pWC, int iCur, int iColumn, \fBBitmask\fP notReady, \fBu32\fP op, \fBIndex\fP *pIdx)"
.br
.ti -1c
.RI "static void \fBexprAnalyze\fP (\fBSrcList\fP *, \fBWhereClause\fP *, int)"
.br
.ti -1c
.RI "static void \fBexprAnalyzeAll\fP (\fBSrcList\fP *pTabList, \fBWhereClause\fP *pWC)"
.br
.ti -1c
.RI "static int \fBisLikeOrGlob\fP (\fBParse\fP *pParse, \fBExpr\fP *pExpr, \fBExpr\fP **ppPrefix, int *pisComplete, int *pnoCase)"
.br
.ti -1c
.RI "static int \fBisMatchOfColumn\fP (\fBExpr\fP *pExpr)"
.br
.ti -1c
.RI "static void \fBtransferJoinMarkings\fP (\fBExpr\fP *pDerived, \fBExpr\fP *pBase)"
.br
.ti -1c
.RI "static void \fBexprAnalyzeOrTerm\fP (\fBSrcList\fP *pSrc, \fBWhereClause\fP *pWC, int idxTerm)"
.br
.ti -1c
.RI "static int \fBreferencesOtherTables\fP (\fBExprList\fP *pList, \fBWhereMaskSet\fP *pMaskSet, int iFirst, int iBase)"
.br
.ti -1c
.RI "static int \fBisSortingIndex\fP (\fBParse\fP *pParse, \fBWhereMaskSet\fP *pMaskSet, \fBIndex\fP *pIdx, int base, \fBExprList\fP *pOrderBy, int nEqCol, int *pbRev)"
.br
.ti -1c
.RI "static double \fBestLog\fP (double N)"
.br
.ti -1c
.RI "static void \fBbestIndex\fP (\fBParse\fP *, \fBWhereClause\fP *, struct SrcList_item *, \fBBitmask\fP, \fBBitmask\fP, \fBExprList\fP *, \fBWhereCost\fP *)"
.br
.ti -1c
.RI "static void \fBbestOrClauseIndex\fP (\fBParse\fP *pParse, \fBWhereClause\fP *pWC, struct SrcList_item *pSrc, \fBBitmask\fP notReady, \fBBitmask\fP notValid, \fBExprList\fP *pOrderBy, \fBWhereCost\fP *pCost)"
.br
.ti -1c
.RI "static int \fBtermCanDriveIndex\fP (\fBWhereTerm\fP *pTerm, struct SrcList_item *pSrc, \fBBitmask\fP notReady)"
.br
.ti -1c
.RI "static void \fBbestAutomaticIndex\fP (\fBParse\fP *pParse, \fBWhereClause\fP *pWC, struct SrcList_item *pSrc, \fBBitmask\fP notReady, \fBWhereCost\fP *pCost)"
.br
.ti -1c
.RI "static void \fBconstructAutomaticIndex\fP (\fBParse\fP *pParse, \fBWhereClause\fP *pWC, struct SrcList_item *pSrc, \fBBitmask\fP notReady, \fBWhereLevel\fP *pLevel)"
.br
.ti -1c
.RI "static \fBsqlite3_index_info\fP * \fBallocateIndexInfo\fP (\fBParse\fP *pParse, \fBWhereClause\fP *pWC, struct SrcList_item *pSrc, \fBExprList\fP *pOrderBy)"
.br
.ti -1c
.RI "static int \fBvtabBestIndex\fP (\fBParse\fP *pParse, \fBTable\fP *pTab, \fBsqlite3_index_info\fP *p)"
.br
.ti -1c
.RI "static void \fBbestVirtualIndex\fP (\fBParse\fP *pParse, \fBWhereClause\fP *pWC, struct SrcList_item *pSrc, \fBBitmask\fP notReady, \fBBitmask\fP notValid, \fBExprList\fP *pOrderBy, \fBWhereCost\fP *pCost, \fBsqlite3_index_info\fP **ppIdxInfo)"
.br
.ti -1c
.RI "static int \fBwhereRangeScanEst\fP (\fBParse\fP *pParse, \fBIndex\fP *p, int nEq, \fBWhereTerm\fP *pLower, \fBWhereTerm\fP *pUpper, int *piEst)"
.br
.ti -1c
.RI "static void \fBbestBtreeIndex\fP (\fBParse\fP *pParse, \fBWhereClause\fP *pWC, struct SrcList_item *pSrc, \fBBitmask\fP notReady, \fBBitmask\fP notValid, \fBExprList\fP *pOrderBy, \fBWhereCost\fP *pCost)"
.br
.ti -1c
.RI "static void \fBdisableTerm\fP (\fBWhereLevel\fP *pLevel, \fBWhereTerm\fP *pTerm)"
.br
.ti -1c
.RI "static void \fBcodeApplyAffinity\fP (\fBParse\fP *pParse, int base, int n, char *zAff)"
.br
.ti -1c
.RI "static int \fBcodeEqualityTerm\fP (\fBParse\fP *pParse, \fBWhereTerm\fP *pTerm, \fBWhereLevel\fP *pLevel, int iTarget)"
.br
.ti -1c
.RI "static int \fBcodeAllEqualityTerms\fP (\fBParse\fP *pParse, \fBWhereLevel\fP *pLevel, \fBWhereClause\fP *pWC, \fBBitmask\fP notReady, int nExtraReg, char **pzAff)"
.br
.ti -1c
.RI "static \fBBitmask\fP \fBcodeOneLoopStart\fP (\fBWhereInfo\fP *pWInfo, int iLevel, \fBu16\fP wctrlFlags, \fBBitmask\fP notReady)"
.br
.ti -1c
.RI "static void \fBwhereInfoFree\fP (\fBsqlite3\fP *\fBdb\fP, \fBWhereInfo\fP *pWInfo)"
.br
.ti -1c
.RI "static void \fBspanSet\fP (\fBExprSpan\fP *pOut, \fBToken\fP *pStart, \fBToken\fP *pEnd)"
.br
.ti -1c
.RI "static void \fBspanExpr\fP (\fBExprSpan\fP *pOut, \fBParse\fP *pParse, int op, \fBToken\fP *pValue)"
.br
.ti -1c
.RI "static void \fBspanBinaryExpr\fP (\fBExprSpan\fP *pOut, \fBParse\fP *pParse, int op, \fBExprSpan\fP *pLeft, \fBExprSpan\fP *pRight)"
.br
.ti -1c
.RI "static void \fBspanUnaryPostfix\fP (\fBExprSpan\fP *pOut, \fBParse\fP *pParse, int op, \fBExprSpan\fP *pOperand, \fBToken\fP *pPostOp)"
.br
.ti -1c
.RI "static void \fBbinaryToUnaryIfNull\fP (\fBParse\fP *pParse, \fBExpr\fP *pY, \fBExpr\fP *pA, int op)"
.br
.ti -1c
.RI "static void \fBspanUnaryPrefix\fP (\fBExprSpan\fP *pOut, \fBParse\fP *pParse, int op, \fBExprSpan\fP *pOperand, \fBToken\fP *pPreOp)"
.br
.ti -1c
.RI "SQLITE_PRIVATE void * \fBsqlite3ParserAlloc\fP (void *(*mallocProc)(size_t))"
.br
.ti -1c
.RI "static void \fByy_destructor\fP (\fByyParser\fP *yypParser, YYCODETYPE yymajor, \fBYYMINORTYPE\fP *yypminor)"
.br
.ti -1c
.RI "static int \fByy_pop_parser_stack\fP (\fByyParser\fP *pParser)"
.br
.ti -1c
.RI "static int \fByy_find_shift_action\fP (\fByyParser\fP *pParser, YYCODETYPE iLookAhead)"
.br
.ti -1c
.RI "static int \fByy_find_reduce_action\fP (int stateno, YYCODETYPE iLookAhead)"
.br
.ti -1c
.RI "static void \fByyStackOverflow\fP (\fByyParser\fP *yypParser, \fBYYMINORTYPE\fP *yypMinor)"
.br
.ti -1c
.RI "static void \fByy_shift\fP (\fByyParser\fP *yypParser, int yyNewState, int yyMajor, \fBYYMINORTYPE\fP *yypMinor)"
.br
.ti -1c
.RI "static void \fByy_accept\fP (\fByyParser\fP *)"
.br
.ti -1c
.RI "static void \fByy_reduce\fP (\fByyParser\fP *yypParser, int yyruleno)"
.br
.ti -1c
.RI "static void \fByy_syntax_error\fP (\fByyParser\fP *yypParser, int yymajor, \fBYYMINORTYPE\fP yyminor)"
.br
.ti -1c
.RI "SQLITE_PRIVATE void \fBsqlite3Parser\fP (void *yyp, int yymajor, sqlite3ParserTOKENTYPE yyminorsqlite3ParserARG_PDECL)"
.br
.ti -1c
.RI "static int \fBkeywordCode\fP (const char *z, int n)"
.br
.ti -1c
.RI "static int \fBsetupLookaside\fP (\fBsqlite3\fP *\fBdb\fP, void *pBuf, int sz, int cnt)"
.br
.ti -1c
.RI "static int \fBallSpaces\fP (const char *z, int n)"
.br
.ti -1c
.RI "static int \fBbinCollFunc\fP (void *padFlag, int nKey1, const void *pKey1, int nKey2, const void *pKey2)"
.br
.ti -1c
.RI "static int \fBnocaseCollatingFunc\fP (void *NotUsed, int nKey1, const void *pKey1, int nKey2, const void *pKey2)"
.br
.ti -1c
.RI "static void \fBfunctionDestroy\fP (\fBsqlite3\fP *\fBdb\fP, \fBFuncDef\fP *p)"
.br
.ti -1c
.RI "static int \fBsqliteDefaultBusyCallback\fP (void *ptr, int count)"
.br
.ti -1c
.RI "SQLITE_API void * \fBsqlite3_profile\fP (\fBsqlite3\fP *\fBdb\fP, void(*xProfile)(void *, const char *, \fBsqlite_uint64\fP), void *pArg)"
.br
.ti -1c
.RI "SQLITE_API void * \fBsqlite3_update_hook\fP (\fBsqlite3\fP *\fBdb\fP, void(*xCallback)(void *, int, char const *, char const *, \fBsqlite_int64\fP), void *pArg)"
.br
.ti -1c
.RI "static int \fBcreateCollation\fP (\fBsqlite3\fP *\fBdb\fP, const char *zName, \fBu8\fP enc, \fBu8\fP collType, void *pCtx, int(*xCompare)(void *, int, const void *, int, const void *), void(*xDel)(void *))"
.br
.ti -1c
.RI "static int \fBopenDatabase\fP (const char *zFilename, \fBsqlite3\fP **ppDb, unsigned flags, const char *zVfs)"
.br
.in -1c
.SS "Variables"

.in +1c
.ti -1c
.RI "SQLITE_API const char \fBsqlite3_version\fP [] = SQLITE_VERSION"
.br
.ti -1c
.RI "SQLITE_API char * \fBsqlite3_temp_directory\fP"
.br
.ti -1c
.RI "SQLITE_PRIVATE const int \fBsqlite3one\fP = 1"
.br
.ti -1c
.RI "SQLITE_PRIVATE void(*)(void) \fBsqlite3OsDlSym\fP (\fBsqlite3_vfs\fP *, void *, const char *)"
.br
.ti -1c
.RI "SQLITE_PRIVATE const unsigned char \fBsqlite3UpperToLower\fP []"
.br
.ti -1c
.RI "SQLITE_PRIVATE const unsigned char \fBsqlite3CtypeMap\fP [256]"
.br
.ti -1c
.RI "SQLITE_PRIVATE SQLITE_WSD struct \fBSqlite3Config\fP \fBsqlite3Config\fP"
.br
.ti -1c
.RI "SQLITE_PRIVATE SQLITE_WSD \fBFuncDefHash\fP \fBsqlite3GlobalFunctions\fP"
.br
.ti -1c
.RI "SQLITE_PRIVATE const \fBToken\fP \fBsqlite3IntTokens\fP []"
.br
.ti -1c
.RI "SQLITE_PRIVATE int \fBsqlite3PendingByte\fP = 0x40000000"
.br
.ti -1c
.RI "SQLITE_PRIVATE const unsigned char \fBsqlite3OpcodeProperty\fP [] = OPFLG_INITIALIZER"
.br
.ti -1c
.RI "static const char *const \fBazCompileOpt\fP []"
.br
.ti -1c
.RI "static SQLITE_WSD struct \fBsqlite3StatType\fP \fBsqlite3Stat\fP"
.br
.ti -1c
.RI "static \fBsqlite3_vfs\fP *SQLITE_WSD \fBvfsList\fP = 0"
.br
.ti -1c
.RI "static SQLITE_WSD struct \fBBenignMallocHooks\fP \fBsqlite3Hooks\fP"
.br
.ti -1c
.RI "static SQLITE_WSD struct \fBMem0Global\fP \fBmem0\fP"
.br
.ti -1c
.RI "static const char \fBaDigits\fP [] = '0123456789ABCDEF0123456789abcdef'"
.br
.ti -1c
.RI "static const char \fBaPrefix\fP [] = '-x0\\000X0'"
.br
.ti -1c
.RI "static const \fBet_info\fP \fBfmtinfo\fP []"
.br
.ti -1c
.RI "static SQLITE_WSD struct \fBsqlite3PrngType\fP \fBsqlite3Prng\fP"
.br
.ti -1c
.RI "static SQLITE_WSD struct \fBsqlite3PrngType\fP \fBsqlite3SavedPrng\fP"
.br
.ti -1c
.RI "static const unsigned char \fBsqlite3Utf8Trans1\fP []"
.br
.ti -1c
.RI "static \fBunixInodeInfo\fP * \fBinodeList\fP = 0"
.br
.ti -1c
.RI "static SQLITE_WSD struct \fBPCacheGlobal\fP \fBpcache1_g\fP"
.br
.ti -1c
.RI "static const unsigned char \fBaJournalMagic\fP []"
.br
.ti -1c
.RI "static const char \fBzMagicHeader\fP [] = SQLITE_FILE_HEADER"
.br
.ti -1c
.RI "static \fBBtShared\fP *SQLITE_WSD \fBsqlite3SharedCacheList\fP = 0"
.br
.ti -1c
.RI "static struct \fBsqlite3_io_methods\fP \fBMemJournalMethods\fP"
.br
.ti -1c
.RI "static struct \fBcompareInfo\fP \fBglobInfo\fP = { '*', '?', '[', 0 }"
.br
.ti -1c
.RI "static struct \fBcompareInfo\fP \fBlikeInfoNorm\fP = { '%', '_', 0, 1 }"
.br
.ti -1c
.RI "static struct \fBcompareInfo\fP \fBlikeInfoAlt\fP = { '%', '_', 0, 0 }"
.br
.ti -1c
.RI "static const char \fBhexdigits\fP []"
.br
.ti -1c
.RI "static const \fBsqlite3_api_routines\fP \fBsqlite3Apis\fP"
.br
.ti -1c
.RI "static SQLITE_WSD struct \fBsqlite3AutoExtList\fP \fBsqlite3Autoext\fP"
.br
.ti -1c
.RI "static const \fBYYMINORTYPE\fP \fByyzerominor\fP = { 0 }"
.br
.ti -1c
.RI "static const YYACTIONTYPE \fByy_action\fP []"
.br
.ti -1c
.RI "static const YYCODETYPE \fByy_lookahead\fP []"
.br
.ti -1c
.RI "static const short \fByy_shift_ofst\fP []"
.br
.ti -1c
.RI "static const short \fByy_reduce_ofst\fP []"
.br
.ti -1c
.RI "static const YYACTIONTYPE \fByy_default\fP []"
.br
.ti -1c
.RI "static const YYCODETYPE \fByyFallback\fP []"
.br
.ti -1c
.RI "struct {"
.br
.ti -1c
.RI "   YYCODETYPE \fBlhs\fP"
.br
.ti -1c
.RI "   unsigned char \fBnrhs\fP"
.br
.ti -1c
.RI "} \fByyRuleInfo\fP []"
.br
.ti -1c
.RI "SQLITE_API char * \fBsqlite3_temp_directory\fP = 0"
.br
.ti -1c
.RI "static const int \fBaHardLimit\fP []"
.br
.in -1c
.SH "Define Documentation"
.PP 
.SS "#define _FILE_OFFSET_BITS   64"
.PP
.SS "#define _LARGE_FILE   1"
.PP
.SS "#define _LARGE_FILE   1"
.PP
.SS "#define _LARGEFILE_SOURCE   1"
.PP
.SS "#define _LARGEFILE_SOURCE   1"
.PP
.SS "#define _SQLITE_OS_C_   1"
.PP
.SS "#define _XOPEN_SOURCE   500"
.PP
.SS "#define ADDR(X)   (-1-(X))"
.PP
.SS "#define AGGREGATE(zName, nArg, arg, nc, xStep, xFinal)"
.PP
\fBValue:\fP
.PP
.nf
{nArg, SQLITE_UTF8, nc*SQLITE_FUNC_NEEDCOLL, \
   SQLITE_INT_TO_PTR(arg), 0, 0, xStep,xFinal,#zName,0,0}
.fi
.SS "#define ALWAYS(X)   (X)"
.PP
.SS "#define ArraySize(X)   ((int)(sizeof(X)/sizeof(X[0])))"
.PP
.SS "#define assertCellInfo(x)"
.PP
.SS "#define assertParentIndex(x, y, z)"
.PP
.SS "#define assertTruncateConstraint(pPager)"
.PP
.SS "#define BITVEC_HASH(X)   (((X)*1)%BITVEC_NINT)"
.PP
.SS "#define BITVEC_MXHASH   (BITVEC_NINT/2)"
.PP
.SS "#define BITVEC_NBIT   (BITVEC_NELEM*BITVEC_SZELEM)"
.PP
.SS "#define BITVEC_NELEM   (BITVEC_USIZE/sizeof(BITVEC_TELEM))"
.PP
.SS "#define BITVEC_NINT   (BITVEC_USIZE/sizeof(\fBu32\fP))"
.PP
.SS "#define BITVEC_NPTR   (BITVEC_USIZE/sizeof(\fBBitvec\fP *))"
.PP
.SS "#define BITVEC_SZ   512"
.PP
.SS "#define BITVEC_SZELEM   8"
.PP
.SS "#define BITVEC_TELEM   \fBu8\fP"
.PP
.SS "#define BITVEC_USIZE   (((BITVEC_SZ-(3*sizeof(\fBu32\fP)))/sizeof(\fBBitvec\fP*))*sizeof(\fBBitvec\fP*))"
.PP
.SS "#define BMS   ((int)(sizeof(\fBBitmask\fP)*8))"
.PP
.SS "#define BTCURSOR_MAX_DEPTH   20"
.PP
.SS "#define BTREE_AUTOVACUUM_FULL   1"
.PP
.SS "#define BTREE_AUTOVACUUM_INCR   2"
.PP
.SS "#define BTREE_AUTOVACUUM_NONE   0"
.PP
.SS "#define BTREE_BLOBKEY   2"
.PP
.SS "#define BTREE_DEFAULT_CACHE_SIZE   3"
.PP
.SS "#define BTREE_FILE_FORMAT   2"
.PP
.SS "#define BTREE_FREE_PAGE_COUNT   0"
.PP
.SS "#define BTREE_INCR_VACUUM   7"
.PP
.SS "#define BTREE_INTKEY   1"
.PP
.SS "#define BTREE_LARGEST_ROOT_PAGE   4"
.PP
.SS "#define BTREE_MEMORY   4"
.PP
.SS "#define BTREE_NO_READLOCK   2"
.PP
.SS "#define BTREE_OMIT_JOURNAL   1"
.PP
.SS "#define BTREE_SCHEMA_VERSION   1"
.PP
.SS "#define BTREE_SINGLE   8"
.PP
.SS "#define BTREE_TEXT_ENCODING   5"
.PP
.SS "#define BTREE_UNORDERED   16"
.PP
.SS "#define BTREE_USER_VERSION   6"
.PP
.SS "#define btreeIntegrity(p)"
.PP
\fBValue:\fP
.PP
.nf
assert( p->pBt->inTransaction!=TRANS_NONE || p->pBt->nTransaction==0 ); \
  assert( p->pBt->inTransaction>=p->inTrans );
.fi
.SS "#define BYTESWAP32(x)"
.PP
\fBValue:\fP
.PP
.nf
( \
    (((x)&0x000000FF)<<24) + (((x)&0x0000FF00)<<8)  \
  + (((x)&0x00FF0000)>>8)  + (((x)&0xFF000000)>>24) \
)
.fi
.SS "#define CACHE_STALE   0"
.PP
.SS "#define charMap(X)   \fBsqlite3UpperToLower\fP[(unsigned char)X]"
.PP
.SS "#define CHECK_FOR_INTERRUPT   if( \fBdb\fP->u1.isInterrupted ) goto abort_due_to_interrupt;"
.PP
.SS "#define CHECK_PAGE(x)"
.PP
.SS "#define checkActiveVdbeCnt(x)"
.PP
.SS "#define CLEARBIT(V, I)   V[I>>3] &= ~(1<<(I&7))"
.PP
.SS "#define CODEC1(P, D, N, X, E)"
.PP
.SS "#define CODEC2(P, D, N, X, E, O)   O=(char*)D"
.PP
.SS "#define COLNAME_COLUMN   4"
.PP
.SS "#define COLNAME_DATABASE   2"
.PP
.SS "#define COLNAME_DECLTYPE   1"
.PP
.SS "#define COLNAME_N   2"
.PP
.SS "#define COLNAME_NAME   0"
.PP
.SS "#define COLNAME_TABLE   3"
.PP
.SS "#define COLUMN_MASK(x)   (((x)>31) ? 0xffffffff : ((u32)1<<(x)))"
.PP
.SS "#define CTIMEOPT_VAL(opt)   CTIMEOPT_VAL_(opt)"
.PP
.SS "#define CTIMEOPT_VAL_(opt)   #opt"
.PP
.SS "#define CURSOR_FAULT   3"
.PP
.SS "#define CURSOR_INVALID   0"
.PP
.SS "#define CURSOR_REQUIRESEEK   2"
.PP
.SS "#define CURSOR_VALID   1"
.PP
.SS "#define DB_Empty   0x0004"
.PP
.SS "#define DB_SchemaLoaded   0x0001"
.PP
.SS "#define DB_UnresetViews   0x0002"
.PP
.SS "#define DbClearProperty(D, I, P)   (D)->aDb[I].pSchema->flags&=~(P)"
.PP
.SS "#define DbHasAnyProperty(D, I, P)   (((D)->aDb[I].pSchema->flags&(P))!=0)"
.PP
.SS "#define DbHasProperty(D, I, P)   (((D)->aDb[I].pSchema->flags&(P))==(P))"
.PP
.SS "#define DbSetProperty(D, I, P)   (D)->aDb[I].pSchema->flags|=(P)"
.PP
.SS "#define Deephemeralize(P)"
.PP
\fBValue:\fP
.PP
.nf
if( ((P)->flags&MEM_Ephem)!=0 \
       && sqlite3VdbeMemMakeWriteable(P) ){ goto no_mem;}
.fi
.SS "#define DIRECT_MODE   0"
.PP
.SS "#define disable_simulated_io_errors()"
.PP
.SS "#define disable_simulated_io_errors()"
.PP
.SS "#define DO_OS_MALLOC_TEST(x)"
.PP
.SS "#define DOTLOCK_SUFFIX   '.lock'"
.PP
.SS "#define EIGHT_BYTE_ALIGNMENT(X)   ((((char*)(X) - (char*)0)&7)==0)"
.PP
.SS "#define enable_simulated_io_errors()"
.PP
.SS "#define enable_simulated_io_errors()"
.PP
.SS "#define ENC(\fBdb\fP)   ((\fBdb\fP)->aDb[0].pSchema->enc)"
.PP
.SS "#define EP2_Irreducible   0x0002"
.PP
.SS "#define EP2_MallocedToken   0x0001"
.PP
.SS "#define EP_Agg   0x0002"
.PP
.SS "#define EP_DblQuoted   0x0040"
.PP
.SS "#define EP_Distinct   0x0010"
.PP
.SS "#define EP_Error   0x0008"
.PP
.SS "#define EP_ExpCollate   0x0100"
.PP
.SS "#define EP_FixedDest   0x0200"
.PP
.SS "#define EP_FromJoin   0x0001"
.PP
.SS "#define EP_InfixFunc   0x0080"
.PP
.SS "#define EP_IntValue   0x0400"
.PP
.SS "#define EP_Reduced   0x1000"
.PP
.SS "#define EP_Resolved   0x0004"
.PP
.SS "#define EP_Static   0x4000"
.PP
.SS "#define EP_TokenOnly   0x2000"
.PP
.SS "#define EP_VarSelect   0x0020"
.PP
.SS "#define EP_xIsSelect   0x0800"
.PP
.SS "#define etBUFSIZE   SQLITE_PRINT_BUF_SIZE"
.PP
.SS "#define etCHARX   9"
.PP
.SS "#define etDYNSTRING   7"
.PP
.SS "#define etEXP   3"
.PP
.SS "#define etFLOAT   2"
.PP
.SS "#define etGENERIC   4"
.PP
.SS "#define etINVALID   0"
.PP
.SS "#define etORDINAL   16"
.PP
.SS "#define etPERCENT   8"
.PP
.SS "#define etPOINTER   14"
.PP
.SS "#define etRADIX   1"
.PP
.SS "#define etSIZE   5"
.PP
.SS "#define etSQLESCAPE   10"
.PP
.SS "#define etSQLESCAPE2   11"
.PP
.SS "#define etSQLESCAPE3   15"
.PP
.SS "#define etSRCLIST   13"
.PP
.SS "#define etSTRING   6"
.PP
.SS "#define etTOKEN   12"
.PP
.SS "#define EXCLUSIVE_LOCK   4"
.PP
.SS "#define ExpandBlob(P)   (((P)->flags&MEM_Zero)?sqlite3VdbeMemExpandBlob(P):0)"
.PP
.SS "#define expandBlob(P)   (((P)->flags&MEM_Zero)?sqlite3VdbeMemExpandBlob(P):0)"
.PP
.SS "#define expensive_assert(X)"
.PP
.SS "#define EXPR_FULLSIZE   sizeof(\fBExpr\fP)"
.PP
.SS "#define EXPR_REDUCEDSIZE   offsetof(\fBExpr\fP,iTable)"
.PP
.SS "#define EXPR_TOKENONLYSIZE   offsetof(\fBExpr\fP,pLeft)"
.PP
.SS "#define ExprClearProperty(E, P)   (E)->flags&=~(P)"
.PP
.SS "#define EXPRDUP_REDUCE   0x0001"
.PP
.SS "#define ExprHasAnyProperty(E, P)   (((E)->flags&(P))!=0)"
.PP
.SS "#define ExprHasProperty(E, P)   (((E)->flags&(P))==(P))"
.PP
.SS "#define ExprSetIrreducible(X)"
.PP
.SS "#define ExprSetProperty(E, P)   (E)->flags|=(P)"
.PP
.SS "#define EXTRA_SIZE   sizeof(\fBMemPage\fP)"
.PP
.SS "#define fdatasync   fsync"
.PP
.SS "#define FILEHANDLEID(fd)   ((int)fd)"
.PP
.SS "#define findCell(P, I)   ((P)->aData + ((P)->maskPage & get2byte(&(P)->aData[(P)->cellOffset+2*(I)])))"
.PP
.SS "#define FLAG_INTERN   2"
.PP
.SS "#define FLAG_SIGNED   1"
.PP
.SS "#define FLAG_STRING   4"
.PP
.SS "#define FUNCTION(zName, nArg, iArg, bNC, xFunc)"
.PP
\fBValue:\fP
.PP
.nf
{nArg, SQLITE_UTF8, bNC*SQLITE_FUNC_NEEDCOLL, \
   SQLITE_INT_TO_PTR(iArg), 0, xFunc, 0, 0, #zName, 0, 0}
.fi
.SS "#define get2byte(x)   ((x)[0]<<8 | (x)[1])"
.PP
.SS "#define get2byteNotZero(X)   (((((int)get2byte(X))-1)&0xffff)+1)"
.PP
.SS "#define get4byte   sqlite3Get4byte"
.PP
.SS "#define getCellInfo(pCur)"
.PP
\fBValue:\fP
.PP
.nf
if( pCur->info.nSize==0 ){                                                   \
    int iPage = pCur->iPage;                                                   \
    btreeParseCell(pCur->apPage[iPage],pCur->aiIdx[iPage],&pCur->info); \
    pCur->validNKey = 1;                                                       \
  }else{                                                                       \
    assertCellInfo(pCur);                                                      \
  }
.fi
.SS "#define getVarint   sqlite3GetVarint"
.PP
.SS "#define getVarint32(A, B)   (\fBu8\fP)((*(A)<(\fBu8\fP)0x80) ? ((B) = (u32)*(A)),1 : sqlite3GetVarint32((A), (u32 *)&(B)))"
.PP
.SS "#define GLOBAL(t, v)   v"
.PP
.SS "#define GlogUpperToLower(A)   if( A<0x80 ){ A = sqlite3UpperToLower[A]; }"
.PP
.SS "#define HASHTABLE_HASH_1   383"
.PP
.SS "#define HASHTABLE_NPAGE   4096"
.PP
.SS "#define HASHTABLE_NPAGE_ONE   (HASHTABLE_NPAGE - (WALINDEX_HDR_SIZE/sizeof(\fBu32\fP)))"
.PP
.SS "#define HASHTABLE_NSLOT   (HASHTABLE_NPAGE*2)"
.PP
.SS "#define HAVE_FULLFSYNC   0"
.PP
.SS "#define IdChar(C)   ((\fBsqlite3CtypeMap\fP[(unsigned char)C]&0x46)!=0)"
.PP
.SS "#define ifnullFunc   versionFunc"
.PP
.SS "#define IgnorableOrderby(X)   ((X->eDest)<=SRT_Discard)"
.PP
.SS "#define IN_DECLARE_VTAB   (pParse->declareVtab)"
.PP
.SS "#define IN_INDEX_EPH   2"
.PP
.SS "#define IN_INDEX_INDEX   3"
.PP
.SS "#define IN_INDEX_ROWID   1"
.PP
.SS "#define initMaskSet(P)   memset(P, 0, sizeof(*P))"
.PP
.SS "#define INT16_TYPE   short int"
.PP
.SS "#define INT8_TYPE   signed char"
.PP
.SS "#define INTERFACE   1"
.PP
.SS "#define IOMETHODS(FINDER, METHOD, VERSION, CLOSE, LOCK, UNLOCK, CKLOCK)"
.PP
\fBValue:\fP
.PP
.nf
static const sqlite3_io_methods METHOD = {                                   \
   VERSION,                    /* iVersion */                                \
   CLOSE,                      /* xClose */                                  \
   unixRead,                   /* xRead */                                   \
   unixWrite,                  /* xWrite */                                  \
   unixTruncate,               /* xTruncate */                               \
   unixSync,                   /* xSync */                                   \
   unixFileSize,               /* xFileSize */                               \
   LOCK,                       /* xLock */                                   \
   UNLOCK,                     /* xUnlock */                                 \
   CKLOCK,                     /* xCheckReservedLock */                      \
   unixFileControl,            /* xFileControl */                            \
   unixSectorSize,             /* xSectorSize */                             \
   unixDeviceCharacteristics,  /* xDeviceCapabilities */                     \
   unixShmMap,                 /* xShmMap */                                 \
   unixShmLock,                /* xShmLock */                                \
   unixShmBarrier,             /* xShmBarrier */                             \
   unixShmUnmap                /* xShmUnmap */                               \
};                                                                           \
static const sqlite3_io_methods *FINDER##Impl(const char *z, unixFile *p){   \
  UNUSED_PARAMETER(z); UNUSED_PARAMETER(p);                                  \
  return &METHOD;                                                            \
}                                                                            \
static const sqlite3_io_methods *(*const FINDER)(const char*,unixFile *p)    \
    = FINDER##Impl;
.fi
.SS "#define IOTRACE(A)"
.PP
.SS "#define IS_BIG_INT(X)   (((X)&~(\fBi64\fP)0xffffffff)!=0)"
.PP
.SS "#define IS_LOCK_ERROR(x)   ((x != SQLITE_OK) && (x != SQLITE_BUSY))"
.PP
.SS "#define ISAUTOVACUUM   (pBt->autoVacuum)"
.PP
.SS "#define IsHiddenColumn(X)   ((X)->isHidden)"
.PP
.SS "#define isOpen(pFd)   ((pFd)->pMethods)"
.PP
.SS "#define IsVirtual(X)   (((X)->tabFlags & TF_Virtual)!=0)"
.PP
.SS "#define JOURNAL_CHUNKSIZE   ((int)(1024-sizeof(\fBFileChunk\fP*)))"
.PP
.SS "#define JOURNAL_HDR_SZ(pPager)   (pPager->sectorSize)"
.PP
.SS "#define JOURNAL_PG_SZ(pPager)   ((pPager->pageSize) + 8)"
.PP
.SS "#define JT_CROSS   0x0002"
.PP
.SS "#define JT_ERROR   0x0040"
.PP
.SS "#define JT_INNER   0x0001"
.PP
.SS "#define JT_LEFT   0x0008"
.PP
.SS "#define JT_NATURAL   0x0004"
.PP
.SS "#define JT_OUTER   0x0020"
.PP
.SS "#define JT_RIGHT   0x0010"
.PP
.SS "#define LARGEST_INT64   (0xffffffff|(((i64)0x7fffffff)<<32))"
.PP
.SS "#define LIKEFUNC(zName, nArg, arg, flags)   {nArg, SQLITE_UTF8, flags, (void *)arg, 0, likeFunc, 0, 0, #zName, 0, 0}"
.PP
.SS "#define likely(X)   !!(X)"
.PP
.SS "#define LONGDOUBLE_TYPE   long double"
.PP
.SS "#define MASTER_NAME   'sqlite_master'"
.PP
.SS "#define MASTER_ROOT   1"
.PP
.SS "#define MAX_6BYTE   ((((\fBi64\fP)0x00008000)<<32)-1)"
.PP
.SS "#define MAX_PATHNAME   512"
.PP
.SS "#define MAX_ROWID   (\fBi64\fP)( (((\fBu64\fP)0x7fffffff)<<32) | (u64)0xffffffff )"
.PP
.SS "#define MAX_SECTOR_SIZE   0x10000"
.PP
.SS "#define \fBmem0\fP   GLOBAL(struct \fBMem0Global\fP, \fBmem0\fP)"
.PP
.SS "#define MEM_Agg   0x2000"
.PP
.SS "#define MEM_Blob   0x0010"
.PP
.SS "#define MEM_Dyn   0x0400"
.PP
.SS "#define MEM_Ephem   0x1000"
.PP
.SS "#define MEM_Frame   0x0040"
.PP
.SS "#define MEM_Int   0x0004"
.PP
.SS "#define MEM_Invalid   0x0080"
.PP
.SS "#define MEM_Null   0x0001"
.PP
.SS "#define MEM_Real   0x0008"
.PP
.SS "#define MEM_RowSet   0x0020"
.PP
.SS "#define MEM_Static   0x0800"
.PP
.SS "#define MEM_Str   0x0002"
.PP
.SS "#define MEM_Term   0x0200"
.PP
.SS "#define MEM_TypeMask   0x00ff"
.PP
.SS "#define MEM_Zero   0x4000"
.PP
.SS "#define memAboutToChange(P, M)"
.PP
.SS "#define MEMCELLSIZE   (size_t)(&(((\fBMem\fP *)0)->zMalloc))"
.PP
.SS "#define MEMDB   pPager->memDb"
.PP
.SS "#define MemSetTypeFlag(p, f)   ((p)->flags = ((p)->flags&~(MEM_TypeMask|MEM_Zero))|f)"
.PP
.SS "#define MEMTYPE_DB   0x10"
.PP
.SS "#define MEMTYPE_HEAP   0x01"
.PP
.SS "#define MEMTYPE_LOOKASIDE   0x02"
.PP
.SS "#define MEMTYPE_PCACHE   0x08"
.PP
.SS "#define MEMTYPE_SCRATCH   0x04"
.PP
.SS "#define MIN(x, y)   ((x)<(y)?(x):(y))"
.PP
.SS "#define MX_CELL(pBt)   ((pBt->pageSize-8)/6)"
.PP
.SS "#define MX_CELL_SIZE(pBt)   (pBt->pageSize-8)"
.PP
.SS "#define N_SORT_BUCKET   32"
.PP
.SS "#define NB   (NN*2+1)"
.PP
.SS "#define NDEBUG   1"
.PP
.SS "#define NEVER(X)   (X)"
.PP
.SS "#define NN   1"
.PP
.SS "#define NO_LOCK   0"
.PP
.SS "#define O_BINARY   0"
.PP
.SS "#define O_LARGEFILE   0"
.PP
.SS "#define O_NOFOLLOW   0"
.PP
.SS "#define OE_Abort   2"
.PP
.SS "#define OE_Cascade   9"
.PP
.SS "#define OE_Default   99"
.PP
.SS "#define OE_Fail   3"
.PP
.SS "#define OE_Ignore   4"
.PP
.SS "#define OE_None   0"
.PP
.SS "#define OE_Replace   5"
.PP
.SS "#define OE_Restrict   6"
.PP
.SS "#define OE_Rollback   1"
.PP
.SS "#define OE_SetDflt   8"
.PP
.SS "#define OE_SetNull   7"
.PP
.SS "#define offsetof(STRUCTURE, FIELD)   ((int)((char*)&((STRUCTURE*)0)->FIELD))"
.PP
.SS "#define OMIT_TEMPDB   0"
.PP
.SS "#define OP_Add   86"
.PP
.SS "#define OP_AddImm   20"
.PP
.SS "#define OP_Affinity   29"
.PP
.SS "#define OP_AggFinal   117"
.PP
.SS "#define OP_AggStep   116"
.PP
.SS "#define OP_And   69"
.PP
.SS "#define OP_AutoCommit   33"
.PP
.SS "#define OP_BitAnd   82"
.PP
.SS "#define OP_BitNot   93"
.PP
.SS "#define OP_BitOr   83"
.PP
.SS "#define OP_Blob   11"
.PP
.SS "#define OP_Checkpoint   118"
.PP
.SS "#define OP_Clear   96"
.PP
.SS "#define OP_Close   43"
.PP
.SS "#define OP_CollSeq   17"
.PP
.SS "#define OP_Column   28"
.PP
.SS "#define OP_Compare   24"
.PP
.SS "#define OP_Concat   91"
.PP
.SS "#define OP_Copy   14"
.PP
.SS "#define OP_Count   31"
.PP
.SS "#define OP_CreateIndex   97"
.PP
.SS "#define OP_CreateTable   98"
.PP
.SS "#define OP_Delete   57"
.PP
.SS "#define OP_Destroy   95"
.PP
.SS "#define OP_Divide   89"
.PP
.SS "#define OP_DropIndex   102"
.PP
.SS "#define OP_DropTable   101"
.PP
.SS "#define OP_DropTrigger   103"
.PP
.SS "#define OP_Eq   76"
.PP
.SS "#define OP_Expire   122"
.PP
.SS "#define OP_Explain   137"
.PP
.SS "#define OP_FkCounter   110"
.PP
.SS "#define OP_FkIfZero   111"
.PP
.SS "#define OP_Found   50"
.PP
.SS "#define OP_Function   18"
.PP
.SS "#define OP_Ge   80"
.PP
.SS "#define OP_Gosub   2"
.PP
.SS "#define OP_Goto   1"
.PP
.SS "#define OP_Gt   77"
.PP
.SS "#define OP_Halt   6"
.PP
.SS "#define OP_HaltIfNull   5"
.PP
.SS "#define OP_IdxDelete   71"
.PP
.SS "#define OP_IdxGE   92"
.PP
.SS "#define OP_IdxInsert   70"
.PP
.SS "#define OP_IdxLT   81"
.PP
.SS "#define OP_IdxRowid   72"
.PP
.SS "#define OP_If   26"
.PP
.SS "#define OP_IfNeg   114"
.PP
.SS "#define OP_IfNot   27"
.PP
.SS "#define OP_IfPos   113"
.PP
.SS "#define OP_IfZero   115"
.PP
.SS "#define OP_IncrVacuum   121"
.PP
.SS "#define OP_Insert   55"
.PP
.SS "#define OP_InsertInt   56"
.PP
.SS "#define OP_Int64   8"
.PP
.SS "#define OP_Integer   7"
.PP
.SS "#define OP_IntegrityCk   104"
.PP
.SS "#define OP_IsNull   73"
.PP
.SS "#define OP_IsUnique   51"
.PP
.SS "#define OP_JournalMode   119"
.PP
.SS "#define OP_Jump   25"
.PP
.SS "#define OP_Last   63"
.PP
.SS "#define OP_Le   78"
.PP
.SS "#define OP_LoadAnalysis   100"
.PP
.SS "#define OP_Lt   79"
.PP
.SS "#define OP_MakeRecord   30"
.PP
.SS "#define OP_MemMax   112"
.PP
.SS "#define OP_Move   13"
.PP
.SS "#define OP_Multiply   88"
.PP
.SS "#define OP_MustBeInt   21"
.PP
.SS "#define OP_Ne   75"
.PP
.SS "#define OP_NewRowid   54"
.PP
.SS "#define OP_Next   67"
.PP
.SS "#define OP_Noop   136"
.PP
.SS "#define OP_Not   19"
.PP
.SS "#define OP_NotExists   52"
.PP
.SS "#define OP_NotFound   49"
.PP
.SS "#define OP_NotNull   74"
.PP
.SS "#define OP_NotUsed_138   138"
.PP
.SS "#define OP_NotUsed_139   139"
.PP
.SS "#define OP_NotUsed_140   140"
.PP
.SS "#define OP_Null   10"
.PP
.SS "#define OP_NullRow   62"
.PP
.SS "#define OP_OpenAutoindex   40"
.PP
.SS "#define OP_OpenEphemeral   41"
.PP
.SS "#define OP_OpenPseudo   42"
.PP
.SS "#define OP_OpenRead   38"
.PP
.SS "#define OP_OpenWrite   39"
.PP
.SS "#define OP_Or   68"
.PP
.SS "#define OP_Pagecount   134"
.PP
.SS "#define OP_Param   109"
.PP
.SS "#define OP_ParseSchema   99"
.PP
.SS "#define OP_Permutation   23"
.PP
.SS "#define OP_Prev   66"
.PP
.SS "#define OP_Program   108"
.PP
.SS "#define OP_ReadCookie   35"
.PP
.SS "#define OP_Real   130"
.PP
.SS "#define OP_RealAffinity   22"
.PP
.SS "#define OP_Remainder   90"
.PP
.SS "#define OP_ResetCount   58"
.PP
.SS "#define OP_ResultRow   16"
.PP
.SS "#define OP_Return   3"
.PP
.SS "#define OP_Rewind   65"
.PP
.SS "#define OP_RowData   60"
.PP
.SS "#define OP_Rowid   61"
.PP
.SS "#define OP_RowKey   59"
.PP
.SS "#define OP_RowSetAdd   105"
.PP
.SS "#define OP_RowSetRead   106"
.PP
.SS "#define OP_RowSetTest   107"
.PP
.SS "#define OP_Savepoint   32"
.PP
.SS "#define OP_SCopy   15"
.PP
.SS "#define OP_Seek   48"
.PP
.SS "#define OP_SeekGe   46"
.PP
.SS "#define OP_SeekGt   47"
.PP
.SS "#define OP_SeekLe   45"
.PP
.SS "#define OP_SeekLt   44"
.PP
.SS "#define OP_Sequence   53"
.PP
.SS "#define OP_SetCookie   36"
.PP
.SS "#define OP_ShiftLeft   84"
.PP
.SS "#define OP_ShiftRight   85"
.PP
.SS "#define OP_Sort   64"
.PP
.SS "#define OP_String   9"
.PP
.SS "#define OP_String8   94"
.PP
.SS "#define OP_Subtract   87"
.PP
.SS "#define OP_TableLock   123"
.PP
.SS "#define OP_ToBlob   142"
.PP
.SS "#define OP_ToInt   144"
.PP
.SS "#define OP_ToNumeric   143"
.PP
.SS "#define OP_ToReal   145"
.PP
.SS "#define OP_ToText   141"
.PP
.SS "#define OP_Trace   135"
.PP
.SS "#define OP_Transaction   34"
.PP
.SS "#define OP_Vacuum   120"
.PP
.SS "#define OP_Variable   12"
.PP
.SS "#define OP_VBegin   124"
.PP
.SS "#define OP_VColumn   129"
.PP
.SS "#define OP_VCreate   125"
.PP
.SS "#define OP_VDestroy   126"
.PP
.SS "#define OP_VerifyCookie   37"
.PP
.SS "#define OP_VFilter   128"
.PP
.SS "#define OP_VNext   131"
.PP
.SS "#define OP_VOpen   127"
.PP
.SS "#define OP_VRename   132"
.PP
.SS "#define OP_VUpdate   133"
.PP
.SS "#define OP_Yield   4"
.PP
.SS "#define OpenCounter(X)"
.PP
.SS "#define OPFLAG_APPEND   0x08"
.PP
.SS "#define OPFLAG_CLEARCACHE   0x20"
.PP
.SS "#define OPFLAG_ISUPDATE   0x04"
.PP
.SS "#define OPFLAG_LASTROWID   0x02"
.PP
.SS "#define OPFLAG_NCHANGE   0x01"
.PP
.SS "#define OPFLAG_USESEEKRESULT   0x10"
.PP
.SS "#define OPFLG_IN1   0x0004"
.PP
.SS "#define OPFLG_IN2   0x0008"
.PP
.SS "#define OPFLG_IN3   0x0010"
.PP
.SS "#define OPFLG_INITIALIZER"
.PP
\fBValue:\fP
.PP
.nf
{\
/*   0 */ 0x00, 0x01, 0x05, 0x04, 0x04, 0x10, 0x00, 0x02,\
/*   8 */ 0x02, 0x02, 0x02, 0x02, 0x02, 0x00, 0x24, 0x24,\
/*  16 */ 0x00, 0x00, 0x00, 0x24, 0x04, 0x05, 0x04, 0x00,\
/*  24 */ 0x00, 0x01, 0x05, 0x05, 0x00, 0x00, 0x00, 0x02,\
/*  32 */ 0x00, 0x00, 0x00, 0x02, 0x10, 0x00, 0x00, 0x00,\
/*  40 */ 0x00, 0x00, 0x00, 0x00, 0x11, 0x11, 0x11, 0x11,\
/*  48 */ 0x08, 0x11, 0x11, 0x11, 0x11, 0x02, 0x02, 0x00,\
/*  56 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x01,\
/*  64 */ 0x01, 0x01, 0x01, 0x01, 0x4c, 0x4c, 0x08, 0x00,\
/*  72 */ 0x02, 0x05, 0x05, 0x15, 0x15, 0x15, 0x15, 0x15,\
/*  80 */ 0x15, 0x01, 0x4c, 0x4c, 0x4c, 0x4c, 0x4c, 0x4c,\
/*  88 */ 0x4c, 0x4c, 0x4c, 0x4c, 0x01, 0x24, 0x02, 0x02,\
/*  96 */ 0x00, 0x02, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,\
/* 104 */ 0x00, 0x0c, 0x45, 0x15, 0x01, 0x02, 0x00, 0x01,\
/* 112 */ 0x08, 0x05, 0x05, 0x05, 0x00, 0x00, 0x00, 0x02,\
/* 120 */ 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\
/* 128 */ 0x01, 0x00, 0x02, 0x01, 0x00, 0x00, 0x02, 0x00,\
/* 136 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x04, 0x04,\
/* 144 */ 0x04, 0x04,}
.fi
.SS "#define OPFLG_JUMP   0x0001"
.PP
.SS "#define OPFLG_OUT2   0x0020"
.PP
.SS "#define OPFLG_OUT2_PRERELEASE   0x0002"
.PP
.SS "#define OPFLG_OUT3   0x0040"
.PP
.SS "#define OS_VXWORKS   0"
.PP
.SS "#define OSTRACE(X)"
.PP
.SS "#define P4_COLLSEQ   (-4)"
.PP
.SS "#define P4_DYNAMIC   (-1)"
.PP
.SS "#define P4_FUNCDEF   (-5)"
.PP
.SS "#define P4_INT32   (-14)"
.PP
.SS "#define P4_INT64   (-13)"
.PP
.SS "#define P4_INTARRAY   (-15)"
.PP
.SS "#define P4_KEYINFO   (-6)"
.PP
.SS "#define P4_KEYINFO_HANDOFF   (-16)"
.PP
.SS "#define P4_KEYINFO_STATIC   (-17)"
.PP
.SS "#define P4_MEM   (-8)"
.PP
.SS "#define P4_MPRINTF   (-11)"
.PP
.SS "#define P4_NOTUSED   0"
.PP
.SS "#define P4_REAL   (-12)"
.PP
.SS "#define P4_STATIC   (-2)"
.PP
.SS "#define P4_SUBPROGRAM   (-18)"
.PP
.SS "#define P4_TRANSIENT   (-9)"
.PP
.SS "#define P4_VDBEFUNC   (-7)"
.PP
.SS "#define P4_VTAB   (-10)"
.PP
.SS "#define PAGE_TO_PGHDR1(c, p)   (\fBPgHdr1\fP*)(((char*)p) + c->szPage)"
.PP
.SS "#define pager_datahash(X, Y)   0"
.PP
.SS "#define PAGER_ERROR   6"
.PP
.SS "#define PAGER_INCR(v)"
.PP
.SS "#define PAGER_JOURNALMODE_DELETE   0"
.PP
.SS "#define PAGER_JOURNALMODE_MEMORY   4"
.PP
.SS "#define PAGER_JOURNALMODE_OFF   2"
.PP
.SS "#define PAGER_JOURNALMODE_PERSIST   1"
.PP
.SS "#define PAGER_JOURNALMODE_QUERY   (-1)"
.PP
.SS "#define PAGER_JOURNALMODE_TRUNCATE   3"
.PP
.SS "#define PAGER_JOURNALMODE_WAL   5"
.PP
.SS "#define PAGER_LOCKINGMODE_EXCLUSIVE   1"
.PP
.SS "#define PAGER_LOCKINGMODE_NORMAL   0"
.PP
.SS "#define PAGER_LOCKINGMODE_QUERY   -1"
.PP
.SS "#define PAGER_MAX_PGNO   2147483647"
.PP
.SS "#define PAGER_MEMORY   0x0004"
.PP
.SS "#define PAGER_MJ_PGNO(x)   ((\fBPgno\fP)((PENDING_BYTE/((x)->pageSize))+1))"
.PP
.SS "#define PAGER_NO_READLOCK   0x0002"
.PP
.SS "#define PAGER_OMIT_JOURNAL   0x0001"
.PP
.SS "#define PAGER_OPEN   0"
.PP
.SS "#define pager_pagehash(X)   0"
.PP
.SS "#define PAGER_READER   1"
.PP
.SS "#define pager_set_pagehash(X)"
.PP
.SS "#define PAGER_WRITER_CACHEMOD   3"
.PP
.SS "#define PAGER_WRITER_DBMOD   4"
.PP
.SS "#define PAGER_WRITER_FINISHED   5"
.PP
.SS "#define PAGER_WRITER_LOCKED   2"
.PP
.SS "#define PAGERID(p)   ((int)(p->fd))"
.PP
.SS "#define pagerReportSize(X)"
.PP
.SS "#define PAGERTRACE(X)"
.PP
.SS "#define parseCell(pPage, iCell, pInfo)   btreeParseCellPtr((pPage), findCell((pPage), (iCell)), (pInfo))"
.PP
.SS "#define pcache1   (GLOBAL(struct \fBPCacheGlobal\fP, \fBpcache1_g\fP))"
.PP
.SS "#define pcache1EnterMutex()   sqlite3_mutex_enter(pcache1.mutex)"
.PP
.SS "#define pcache1LeaveMutex()   sqlite3_mutex_leave(pcache1.mutex)"
.PP
.SS "#define PENDING_BYTE   \fBsqlite3PendingByte\fP"
.PP
.SS "#define PENDING_BYTE_PAGE(pBt)   PAGER_MJ_PGNO(pBt)"
.PP
.SS "#define PENDING_LOCK   3"
.PP
.SS "#define PGHDR1_TO_PAGE(p)   (void*)(((char*)p) - p->pCache->szPage)"
.PP
.SS "#define PGHDR_DIRTY   0x002"
.PP
.SS "#define PGHDR_DONT_WRITE   0x020"
.PP
.SS "#define PGHDR_NEED_READ   0x008"
.PP
.SS "#define PGHDR_NEED_SYNC   0x004"
.PP
.SS "#define PGHDR_REUSE_UNLIKELY   0x010"
.PP
.SS "#define PTF_INTKEY   0x01"
.PP
.SS "#define PTF_LEAF   0x08"
.PP
.SS "#define PTF_LEAFDATA   0x04"
.PP
.SS "#define PTF_ZERODATA   0x02"
.PP
.SS "#define PTRMAP_BTREE   5"
.PP
.SS "#define PTRMAP_FREEPAGE   2"
.PP
.SS "#define PTRMAP_ISPAGE(pBt, pgno)   (PTRMAP_PAGENO((pBt),(pgno))==(pgno))"
.PP
.SS "#define PTRMAP_OVERFLOW1   3"
.PP
.SS "#define PTRMAP_OVERFLOW2   4"
.PP
.SS "#define PTRMAP_PAGENO(pBt, pgno)   ptrmapPageno(pBt, pgno)"
.PP
.SS "#define PTRMAP_PTROFFSET(pgptrmap, pgno)   (5*(pgno-pgptrmap-1))"
.PP
.SS "#define PTRMAP_ROOTPAGE   1"
.PP
.SS "#define put2byte(p, v)   ((p)[0] = (\fBu8\fP)((v)>>8), (p)[1] = (\fBu8\fP)(v))"
.PP
.SS "#define put32bits(A, B)   sqlite3Put4byte((\fBu8\fP*)A,B)"
.PP
.SS "#define put4byte   sqlite3Put4byte"
.PP
.SS "#define putVarint   sqlite3PutVarint"
.PP
.SS "#define putVarint32(A, B)   (\fBu8\fP)(((\fBu32\fP)(B)<(\fBu32\fP)0x80) ? (*(A) = (unsigned char)(B)),1 : sqlite3PutVarint32((A), (B)))"
.PP
.SS "#define READ_LOCK   1"
.PP
.SS "#define READ_UTF16BE(zIn, TERM, c)"
.PP
\fBValue:\fP
.PP
.nf
{                                   \
  c = ((*zIn++)<<8);                                                  \
  c += (*zIn++);                                                      \
  if( c>=0xD800 && c<0xE000 && TERM ){                                \
    int c2 = ((*zIn++)<<8);                                           \
    c2 += (*zIn++);                                                   \
    c = (c2&0x03FF) + ((c&0x003F)<<10) + (((c&0x03C0)+0x0040)<<10);   \
  }                                                                   \
}
.fi
.SS "#define READ_UTF16LE(zIn, TERM, c)"
.PP
\fBValue:\fP
.PP
.nf
{                                   \
  c = (*zIn++);                                                       \
  c += ((*zIn++)<<8);                                                 \
  if( c>=0xD800 && c<0xE000 && TERM ){                                \
    int c2 = (*zIn++);                                                \
    c2 += ((*zIn++)<<8);                                              \
    c = (c2&0x03FF) + ((c&0x003F)<<10) + (((c&0x03C0)+0x0040)<<10);   \
  }                                                                   \
}
.fi
.SS "#define READ_UTF8(zIn, zTerm, c)"
.PP
\fBValue:\fP
.PP
.nf
c = *(zIn++);                                            \
  if( c>=0xc0 ){                                           \
    c = sqlite3Utf8Trans1[c-0xc0];                         \
    while( zIn!=zTerm && (*zIn & 0xc0)==0x80 ){            \
      c = (c<<6) + (0x3f & *(zIn++));                      \
    }                                                      \
    if( c<0x80                                             \
        || (c&0xFFFFF800)==0xD800                          \
        || (c&0xFFFFFFFE)==0xFFFE ){  c = 0xFFFD; }        \
  }
.fi
.SS "#define READMARK_NOT_USED   0xffffffff"
.PP
.SS "#define REGISTER_TRACE(R, M)"
.PP
.SS "#define RESERVED_BYTE   (PENDING_BYTE+1)"
.PP
.SS "#define RESERVED_LOCK   2"
.PP
.SS "#define restoreCursorPosition(p)"
.PP
\fBValue:\fP
.PP
.nf
(p->eState>=CURSOR_REQUIRESEEK ? \
         btreeRestoreCursorPosition(p) : \
         SQLITE_OK)
.fi
.SS "#define ROUND8(x)   (((x)+7)&~7)"
.PP
.SS "#define ROUNDDOWN8(x)   ((x)&~7)"
.PP
.SS "#define ROWSET_ALLOCATION_SIZE   1024"
.PP
.SS "#define ROWSET_ENTRY_PER_CHUNK   ((ROWSET_ALLOCATION_SIZE-8)/sizeof(struct \fBRowSetEntry\fP))"
.PP
.SS "#define SAVE_SZ   (sizeof(\fBParse\fP) - offsetof(\fBParse\fP,nVar))"
.PP
.SS "#define SAVEPOINT_BEGIN   0"
.PP
.SS "#define SAVEPOINT_RELEASE   1"
.PP
.SS "#define SAVEPOINT_ROLLBACK   2"
.PP
.SS "#define SCHEMA_TABLE(x)   ((!OMIT_TEMPDB)&&(x==1)?TEMP_MASTER_NAME:MASTER_NAME)"
.PP
.SS "#define SET_FULLSYNC(x, y)"
.PP
.SS "#define SETBIT(V, I)   V[I>>3] |= (1<<(I&7))"
.PP
.SS "#define SF_Aggregate   0x0004"
.PP
.SS "#define SF_Distinct   0x0001"
.PP
.SS "#define SF_Expanded   0x0010"
.PP
.SS "#define SF_HasTypeInfo   0x0020"
.PP
.SS "#define SF_Resolved   0x0002"
.PP
.SS "#define SF_UsesEphemeral   0x0008"
.PP
.SS "#define SHARED_FIRST   (PENDING_BYTE+2)"
.PP
.SS "#define SHARED_LOCK   1"
.PP
.SS "#define SHARED_SIZE   510"
.PP
.SS "#define SimulateDiskfullError(A)"
.PP
.SS "#define SimulateIOError(A)"
.PP
.SS "#define SimulateIOErrorBenign(X)"
.PP
.SS "#define SLOT_2_0   0x001fc07f"
.PP
.SS "#define SLOT_4_2_0   0xf01fc07f"
.PP
.SS "#define SMALLEST_INT64   (((\fBi64\fP)-1) - LARGEST_INT64)"
.PP
.SS "#define sqlite3_column_database_name   0"
.PP
.SS "#define sqlite3_column_database_name16   0"
.PP
.SS "#define sqlite3_column_origin_name   0"
.PP
.SS "#define sqlite3_column_origin_name16   0"
.PP
.SS "#define sqlite3_column_table_name   0"
.PP
.SS "#define sqlite3_column_table_name16   0"
.PP
.SS "#define SQLITE3_MUTEX_INITIALIZER   { PTHREAD_MUTEX_INITIALIZER }"
.PP
.SS "#define sqlite3_table_column_metadata   0"
.PP
.SS "#define SQLITE3_TEXT   3"
.PP
.SS "#define sqlite3ConnectionBlocked(x, y)"
.PP
.SS "#define sqlite3ConnectionClosed(x)"
.PP
.SS "#define sqlite3ConnectionUnlocked(x)"
.PP
.SS "#define sqlite3GlobalConfig   \fBsqlite3Config\fP"
.PP
.SS "#define sqlite3Isalnum(x)   (\fBsqlite3CtypeMap\fP[(unsigned char)(x)]&0x06)"
.PP
.SS "#define sqlite3Isalpha(x)   (\fBsqlite3CtypeMap\fP[(unsigned char)(x)]&0x02)"
.PP
.SS "#define sqlite3Isdigit(x)   (\fBsqlite3CtypeMap\fP[(unsigned char)(x)]&0x04)"
.PP
.SS "#define sqlite3IsNumericAffinity(X)   ((X)>=SQLITE_AFF_NUMERIC)"
.PP
.SS "#define sqlite3Isspace(x)   (\fBsqlite3CtypeMap\fP[(unsigned char)(x)]&0x01)"
.PP
.SS "#define sqlite3Isxdigit(x)   (\fBsqlite3CtypeMap\fP[(unsigned char)(x)]&0x08)"
.PP
.SS "#define sqlite3JournalSize(pVfs)   ((pVfs)->szOsFile)"
.PP
.SS "#define sqlite3MemdebugHasType(X, Y)   1"
.PP
.SS "#define sqlite3MemdebugNoType(X, Y)   1"
.PP
.SS "#define sqlite3MemdebugSetType(X, Y)"
.PP
.SS "#define sqlite3PagerGet(A, B, C)   sqlite3PagerAcquire(A,B,C,0)"
.PP
.SS "#define sqlite3ParserARG_FETCH   \fBParse\fP *pParse = yypParser->pParse"
.PP
.SS "#define sqlite3ParserARG_PDECL   ,\fBParse\fP *pParse"
.PP
.SS "#define sqlite3ParserARG_SDECL   \fBParse\fP *pParse;"
.PP
.SS "#define sqlite3ParserARG_STORE   yypParser->pParse = pParse"
.PP
.SS "#define sqlite3ParserTOKENTYPE   \fBToken\fP"
.PP
.SS "#define sqlite3ParseToplevel(p)   ((p)->pToplevel ? (p)->pToplevel : (p))"
.PP
.SS "#define sqlite3StackAllocRaw(D, N)   sqlite3DbMallocRaw(D,N)"
.PP
.SS "#define sqlite3StackAllocZero(D, N)   sqlite3DbMallocZero(D,N)"
.PP
.SS "#define sqlite3StackFree(D, P)   sqlite3DbFree(D,P)"
.PP
.SS "#define sqlite3StrNICmp   sqlite3_strnicmp"
.PP
.SS "#define sqlite3Tolower(x)   (\fBsqlite3UpperToLower\fP[(unsigned char)(x)])"
.PP
.SS "#define sqlite3Toupper(x)   ((x)&~(\fBsqlite3CtypeMap\fP[(unsigned char)(x)]&0x20))"
.PP
.SS "#define sqlite3VdbeIOTraceSql(X)"
.PP
.SS "#define sqlite3VtabInSync(\fBdb\fP)   ((\fBdb\fP)->nVTrans>0 && (\fBdb\fP)->aVTrans==0)"
.PP
.SS "#define SQLITE_ABORT   4"
.PP
.SS "#define SQLITE_ACCESS_EXISTS   0"
.PP
.SS "#define SQLITE_ACCESS_READ   2"
.PP
.SS "#define SQLITE_ACCESS_READWRITE   1"
.PP
.SS "#define SQLITE_AFF_INTEGER   'd'"
.PP
.SS "#define SQLITE_AFF_MASK   0x67"
.PP
.SS "#define SQLITE_AFF_NONE   'b'"
.PP
.SS "#define SQLITE_AFF_NUMERIC   'c'"
.PP
.SS "#define SQLITE_AFF_REAL   'e'"
.PP
.SS "#define SQLITE_AFF_TEXT   'a'"
.PP
.SS "#define SQLITE_ALTER_TABLE   26"
.PP
.SS "#define SQLITE_AMALGAMATION   1"
.PP
.SS "#define SQLITE_ANALYZE   28"
.PP
.SS "#define SQLITE_ANY   5"
.PP
.SS "#define SQLITE_ASCII   1"
.PP
.SS "#define SQLITE_ATTACH   24"
.PP
.SS "#define SQLITE_AUTH   23"
.PP
.SS "#define SQLITE_AutoIndex   0x08000000"
.PP
.SS "#define SQLITE_BIG_DBL   (1e99)"
.PP
.SS "#define SQLITE_BIGENDIAN   (*(char *)(&\fBsqlite3one\fP)==0)"
.PP
.SS "#define SQLITE_BLOB   4"
.PP
.SS "#define SQLITE_BUSY   5"
.PP
.SS "#define SQLITE_BUSY_RECOVERY   (SQLITE_BUSY   |  (1<<8))"
.PP
.SS "#define SQLITE_CANTOPEN   14"
.PP
.SS "#define SQLITE_CANTOPEN_BKPT   sqlite3CantopenError(__LINE__)"
.PP
.SS "#define SQLITE_CANTOPEN_NOTEMPDIR   (SQLITE_CANTOPEN | (1<<8))"
.PP
.SS "#define SQLITE_COLL_BINARY   1"
.PP
.SS "#define SQLITE_COLL_NOCASE   2"
.PP
.SS "#define SQLITE_COLL_REVERSE   3"
.PP
.SS "#define SQLITE_COLL_USER   0"
.PP
.SS "#define SQLITE_ColumnCache   0x02"
.PP
.SS "#define SQLITE_CONFIG_GETMALLOC   5"
.PP
.SS "#define SQLITE_CONFIG_GETMUTEX   11"
.PP
.SS "#define SQLITE_CONFIG_GETPCACHE   15"
.PP
.SS "#define SQLITE_CONFIG_HEAP   8"
.PP
.SS "#define SQLITE_CONFIG_LOG   16"
.PP
.SS "#define SQLITE_CONFIG_LOOKASIDE   13"
.PP
.SS "#define SQLITE_CONFIG_MALLOC   4"
.PP
.SS "#define SQLITE_CONFIG_MEMSTATUS   9"
.PP
.SS "#define SQLITE_CONFIG_MULTITHREAD   2"
.PP
.SS "#define SQLITE_CONFIG_MUTEX   10"
.PP
.SS "#define SQLITE_CONFIG_PAGECACHE   7"
.PP
.SS "#define SQLITE_CONFIG_PCACHE   14"
.PP
.SS "#define SQLITE_CONFIG_SCRATCH   6"
.PP
.SS "#define SQLITE_CONFIG_SERIALIZED   3"
.PP
.SS "#define SQLITE_CONFIG_SINGLETHREAD   1"
.PP
.SS "#define SQLITE_CONSTRAINT   19"
.PP
.SS "#define SQLITE_COPY   0"
.PP
.SS "#define SQLITE_CORE   1"
.PP
.SS "#define SQLITE_CORRUPT   11"
.PP
.SS "#define SQLITE_CORRUPT_BKPT   sqlite3CorruptError(__LINE__)"
.PP
.SS "#define SQLITE_CountRows   0x00001000"
.PP
.SS "#define SQLITE_CREATE_INDEX   1"
.PP
.SS "#define SQLITE_CREATE_TABLE   2"
.PP
.SS "#define SQLITE_CREATE_TEMP_INDEX   3"
.PP
.SS "#define SQLITE_CREATE_TEMP_TABLE   4"
.PP
.SS "#define SQLITE_CREATE_TEMP_TRIGGER   5"
.PP
.SS "#define SQLITE_CREATE_TEMP_VIEW   6"
.PP
.SS "#define SQLITE_CREATE_TRIGGER   7"
.PP
.SS "#define SQLITE_CREATE_VIEW   8"
.PP
.SS "#define SQLITE_CREATE_VTABLE   29"
.PP
.SS "#define SQLITE_DBCONFIG_LOOKASIDE   1001"
.PP
.SS "#define SQLITE_DBSTATUS_CACHE_USED   1"
.PP
.SS "#define SQLITE_DBSTATUS_LOOKASIDE_USED   0"
.PP
.SS "#define SQLITE_DBSTATUS_MAX   3"
.PP
.SS "#define SQLITE_DBSTATUS_SCHEMA_USED   2"
.PP
.SS "#define SQLITE_DBSTATUS_STMT_USED   3"
.PP
.SS "#define SQLITE_DEFAULT_AUTOVACUUM   0"
.PP
.SS "#define SQLITE_DEFAULT_CACHE_SIZE   2000"
.PP
.SS "#define SQLITE_DEFAULT_FILE_FORMAT   1"
.PP
.SS "#define SQLITE_DEFAULT_FILE_PERMISSIONS   0644"
.PP
.SS "#define SQLITE_DEFAULT_JOURNAL_SIZE_LIMIT   -1"
.PP
.SS "#define SQLITE_DEFAULT_MEMSTATUS   1"
.PP
.SS "#define SQLITE_DEFAULT_PAGE_SIZE   1024"
.PP
.SS "#define SQLITE_DEFAULT_PROXYDIR_PERMISSIONS   0755"
.PP
.SS "#define SQLITE_DEFAULT_RECURSIVE_TRIGGERS   0"
.PP
.SS "#define SQLITE_DEFAULT_SECTOR_SIZE   512"
.PP
.SS "#define SQLITE_DEFAULT_TEMP_CACHE_SIZE   500"
.PP
.SS "#define SQLITE_DEFAULT_WAL_AUTOCHECKPOINT   1000"
.PP
.SS "#define SQLITE_DELETE   9"
.PP
.SS "#define SQLITE_DENY   1"
.PP
.SS "#define SQLITE_DEPRECATED"
.PP
.SS "#define SQLITE_DETACH   25"
.PP
.SS "#define SQLITE_DONE   101"
.PP
.SS "#define SQLITE_DROP_INDEX   10"
.PP
.SS "#define SQLITE_DROP_TABLE   11"
.PP
.SS "#define SQLITE_DROP_TEMP_INDEX   12"
.PP
.SS "#define SQLITE_DROP_TEMP_TABLE   13"
.PP
.SS "#define SQLITE_DROP_TEMP_TRIGGER   14"
.PP
.SS "#define SQLITE_DROP_TEMP_VIEW   15"
.PP
.SS "#define SQLITE_DROP_TRIGGER   16"
.PP
.SS "#define SQLITE_DROP_VIEW   17"
.PP
.SS "#define SQLITE_DROP_VTABLE   30"
.PP
.SS "#define SQLITE_DYNAMIC   ((\fBsqlite3_destructor_type\fP)sqlite3DbFree)"
.PP
.SS "#define SQLITE_EMPTY   16"
.PP
.SS "#define SQLITE_ENABLE_LOCKING_STYLE   0"
.PP
.SS "#define SQLITE_ERROR   1"
.PP
.SS "#define SQLITE_EXPERIMENTAL"
.PP
.SS "#define SQLITE_EXTENSION_INIT1   const \fBsqlite3_api_routines\fP *sqlite3_api = 0;"
.PP
.SS "#define SQLITE_EXTENSION_INIT2(v)   sqlite3_api = v;"
.PP
.SS "#define SQLITE_EXTERN   extern"
.PP
.SS "#define SQLITE_FAULTINJECTOR_COUNT   1"
.PP
.SS "#define SQLITE_FAULTINJECTOR_MALLOC   0"
.PP
.SS "#define SQLITE_FCNTL_CHUNK_SIZE   6"
.PP
.SS "#define SQLITE_FCNTL_DB_UNCHANGED   0xca093fa0"
.PP
.SS "#define SQLITE_FCNTL_LOCKSTATE   1"
.PP
.SS "#define SQLITE_FCNTL_SIZE_HINT   5"
.PP
.SS "#define SQLITE_FILE_HEADER   'SQLite format 3'"
.PP
.SS "#define SQLITE_FLOAT   2"
.PP
.SS "#define SQLITE_ForeignKeys   0x04000000"
.PP
.SS "#define SQLITE_FORMAT   24"
.PP
.SS "#define SQLITE_FSFLAGS_IS_MSDOS   0x1"
.PP
.SS "#define SQLITE_FULL   13"
.PP
.SS "#define SQLITE_FullColNames   0x00000400"
.PP
.SS "#define SQLITE_FullFSync   0x00200000"
.PP
.SS "#define SQLITE_FUNC_CASE   0x02"
.PP
.SS "#define SQLITE_FUNC_COALESCE   0x40"
.PP
.SS "#define SQLITE_FUNC_COUNT   0x20"
.PP
.SS "#define SQLITE_FUNC_EPHEM   0x04"
.PP
.SS "#define SQLITE_FUNC_LIKE   0x01"
.PP
.SS "#define SQLITE_FUNC_NEEDCOLL   0x08"
.PP
.SS "#define SQLITE_FUNC_PRIVATE   0x10"
.PP
.SS "#define SQLITE_FUNCTION   31"
.PP
.SS "#define SQLITE_GET_LOCKPROXYFILE   2"
.PP
.SS "#define SQLITE_GroupByOrder   0x20"
.PP
.SS "#define SQLITE_IGNORE   2"
.PP
.SS "#define SQLITE_IgnoreChecks   0x00040000"
.PP
.SS "#define SQLITE_INDEX_CONSTRAINT_EQ   2"
.PP
.SS "#define SQLITE_INDEX_CONSTRAINT_GE   32"
.PP
.SS "#define SQLITE_INDEX_CONSTRAINT_GT   4"
.PP
.SS "#define SQLITE_INDEX_CONSTRAINT_LE   8"
.PP
.SS "#define SQLITE_INDEX_CONSTRAINT_LT   16"
.PP
.SS "#define SQLITE_INDEX_CONSTRAINT_MATCH   64"
.PP
.SS "#define SQLITE_INDEX_SAMPLES   10"
.PP
.SS "#define SQLITE_IndexCover   0x10"
.PP
.SS "#define SQLITE_IndexSearch   0x08"
.PP
.SS "#define SQLITE_IndexSort   0x04"
.PP
.SS "#define SQLITE_INSERT   18"
.PP
.SS "#define SQLITE_INT_TO_PTR(X)   ((void*)&((char*)0)[X])"
.PP
.SS "#define SQLITE_INTEGER   1"
.PP
.SS "#define SQLITE_INTEGRITY_CHECK_ERROR_MAX   100"
.PP
.SS "#define SQLITE_INTERNAL   2"
.PP
.SS "#define SQLITE_InternChanges   0x00000200"
.PP
.SS "#define SQLITE_INTERRUPT   9"
.PP
.SS "#define SQLITE_IOCAP_ATOMIC   0x00000001"
.PP
.SS "#define SQLITE_IOCAP_ATOMIC16K   0x00000040"
.PP
.SS "#define SQLITE_IOCAP_ATOMIC1K   0x00000004"
.PP
.SS "#define SQLITE_IOCAP_ATOMIC2K   0x00000008"
.PP
.SS "#define SQLITE_IOCAP_ATOMIC32K   0x00000080"
.PP
.SS "#define SQLITE_IOCAP_ATOMIC4K   0x00000010"
.PP
.SS "#define SQLITE_IOCAP_ATOMIC512   0x00000002"
.PP
.SS "#define SQLITE_IOCAP_ATOMIC64K   0x00000100"
.PP
.SS "#define SQLITE_IOCAP_ATOMIC8K   0x00000020"
.PP
.SS "#define SQLITE_IOCAP_SAFE_APPEND   0x00000200"
.PP
.SS "#define SQLITE_IOCAP_SEQUENTIAL   0x00000400"
.PP
.SS "#define SQLITE_IOCAP_UNDELETABLE_WHEN_OPEN   0x00000800"
.PP
.SS "#define SQLITE_IOERR   10"
.PP
.SS "#define SQLITE_IOERR_ACCESS   (SQLITE_IOERR | (13<<8))"
.PP
.SS "#define SQLITE_IOERR_BLOCKED   (SQLITE_IOERR | (11<<8))"
.PP
.SS "#define SQLITE_IOERR_CHECKRESERVEDLOCK   (SQLITE_IOERR | (14<<8))"
.PP
.SS "#define SQLITE_IOERR_CLOSE   (SQLITE_IOERR | (16<<8))"
.PP
.SS "#define SQLITE_IOERR_DELETE   (SQLITE_IOERR | (10<<8))"
.PP
.SS "#define SQLITE_IOERR_DIR_CLOSE   (SQLITE_IOERR | (17<<8))"
.PP
.SS "#define SQLITE_IOERR_DIR_FSYNC   (SQLITE_IOERR | (5<<8))"
.PP
.SS "#define SQLITE_IOERR_FSTAT   (SQLITE_IOERR | (7<<8))"
.PP
.SS "#define SQLITE_IOERR_FSYNC   (SQLITE_IOERR | (4<<8))"
.PP
.SS "#define SQLITE_IOERR_LOCK   (SQLITE_IOERR | (15<<8))"
.PP
.SS "#define SQLITE_IOERR_NOMEM   (SQLITE_IOERR | (12<<8))"
.PP
.SS "#define SQLITE_IOERR_RDLOCK   (SQLITE_IOERR | (9<<8))"
.PP
.SS "#define SQLITE_IOERR_READ   (SQLITE_IOERR | (1<<8))"
.PP
.SS "#define SQLITE_IOERR_SHMLOCK   (SQLITE_IOERR | (20<<8))"
.PP
.SS "#define SQLITE_IOERR_SHMOPEN   (SQLITE_IOERR | (18<<8))"
.PP
.SS "#define SQLITE_IOERR_SHMSIZE   (SQLITE_IOERR | (19<<8))"
.PP
.SS "#define SQLITE_IOERR_SHORT_READ   (SQLITE_IOERR | (2<<8))"
.PP
.SS "#define SQLITE_IOERR_TRUNCATE   (SQLITE_IOERR | (6<<8))"
.PP
.SS "#define SQLITE_IOERR_UNLOCK   (SQLITE_IOERR | (8<<8))"
.PP
.SS "#define SQLITE_IOERR_WRITE   (SQLITE_IOERR | (3<<8))"
.PP
.SS "#define SQLITE_JUMPIFNULL   0x08"
.PP
.SS "#define SQLITE_LAST_ERRNO   4"
.PP
.SS "#define SQLITE_LegacyFileFmt   0x00100000"
.PP
.SS "#define SQLITE_LIMIT_ATTACHED   7"
.PP
.SS "#define SQLITE_LIMIT_COLUMN   2"
.PP
.SS "#define SQLITE_LIMIT_COMPOUND_SELECT   4"
.PP
.SS "#define SQLITE_LIMIT_EXPR_DEPTH   3"
.PP
.SS "#define SQLITE_LIMIT_FUNCTION_ARG   6"
.PP
.SS "#define SQLITE_LIMIT_LENGTH   0"
.PP
.SS "#define SQLITE_LIMIT_LIKE_PATTERN_LENGTH   8"
.PP
.SS "#define SQLITE_LIMIT_SQL_LENGTH   1"
.PP
.SS "#define SQLITE_LIMIT_TRIGGER_DEPTH   10"
.PP
.SS "#define SQLITE_LIMIT_VARIABLE_NUMBER   9"
.PP
.SS "#define SQLITE_LIMIT_VDBE_OP   5"
.PP
.SS "#define SQLITE_LITTLEENDIAN   (*(char *)(&\fBsqlite3one\fP)==1)"
.PP
.SS "#define SQLITE_LoadExtension   0x00400000"
.PP
.SS "#define SQLITE_LOCK_EXCLUSIVE   4"
.PP
.SS "#define SQLITE_LOCK_NONE   0"
.PP
.SS "#define SQLITE_LOCK_PENDING   3"
.PP
.SS "#define SQLITE_LOCK_RESERVED   2"
.PP
.SS "#define SQLITE_LOCK_SHARED   1"
.PP
.SS "#define SQLITE_LOCKED   6"
.PP
.SS "#define SQLITE_LOCKED_SHAREDCACHE   (SQLITE_LOCKED |  (1<<8))"
.PP
.SS "#define SQLITE_MAGIC_BUSY   0xf03b7906"
.PP
.SS "#define SQLITE_MAGIC_CLOSED   0x9f3c2d33"
.PP
.SS "#define SQLITE_MAGIC_ERROR   0xb5357930"
.PP
.SS "#define SQLITE_MAGIC_OPEN   0xa029a697"
.PP
.SS "#define SQLITE_MAGIC_SICK   0x4b771290"
.PP
.SS "#define SQLITE_MALLOC_SOFT_LIMIT   1024"
.PP
.SS "#define SQLITE_MAX_ATTACHED   10"
.PP
.SS "#define SQLITE_MAX_COLUMN   2000"
.PP
.SS "#define SQLITE_MAX_COMPOUND_SELECT   500"
.PP
.SS "#define SQLITE_MAX_DEFAULT_PAGE_SIZE   8192"
.PP
.SS "#define SQLITE_MAX_EXPR_DEPTH   1000"
.PP
.SS "#define SQLITE_MAX_FILE_FORMAT   4"
.PP
.SS "#define SQLITE_MAX_FUNCTION_ARG   127"
.PP
.SS "#define SQLITE_MAX_LENGTH   1000000000"
.PP
.SS "#define SQLITE_MAX_LIKE_PATTERN_LENGTH   50000"
.PP
.SS "#define SQLITE_MAX_PAGE_COUNT   1073741823"
.PP
.SS "#define SQLITE_MAX_PAGE_SIZE   65536"
.PP
.SS "#define SQLITE_MAX_SQL_LENGTH   1000000000"
.PP
.SS "#define SQLITE_MAX_TRIGGER_DEPTH   1000"
.PP
.SS "#define SQLITE_MAX_U32   ((((\fBu64\fP)1)<<32)-1)"
.PP
.SS "#define SQLITE_MAX_VARIABLE_NUMBER   999"
.PP
.SS "#define SQLITE_MAX_VDBE_OP   25000"
.PP
.SS "#define SQLITE_MISMATCH   20"
.PP
.SS "#define SQLITE_MISUSE   21"
.PP
.SS "#define SQLITE_MISUSE_BKPT   sqlite3MisuseError(__LINE__)"
.PP
.SS "#define SQLITE_MUTEX_FAST   0"
.PP
.SS "#define SQLITE_MUTEX_NREF   0"
.PP
.SS "#define SQLITE_MUTEX_PTHREADS"
.PP
.SS "#define SQLITE_MUTEX_RECURSIVE   1"
.PP
.SS "#define SQLITE_MUTEX_STATIC_LRU   6"
.PP
.SS "#define SQLITE_MUTEX_STATIC_LRU2   7"
.PP
.SS "#define SQLITE_MUTEX_STATIC_MASTER   2"
.PP
.SS "#define SQLITE_MUTEX_STATIC_MEM   3"
.PP
.SS "#define SQLITE_MUTEX_STATIC_MEM2   4"
.PP
.SS "#define SQLITE_MUTEX_STATIC_OPEN   4"
.PP
.SS "#define SQLITE_MUTEX_STATIC_PRNG   5"
.PP
.SS "#define SQLITE_N_BTREE_META   10"
.PP
.SS "#define SQLITE_N_COLCACHE   10"
.PP
.SS "#define SQLITE_N_KEYWORD   121"
.PP
.SS "#define SQLITE_N_LIMIT   (SQLITE_LIMIT_TRIGGER_DEPTH+1)"
.PP
.SS "#define SQLITE_NOLFS   22"
.PP
.SS "#define SQLITE_NOMEM   7"
.PP
.SS "#define SQLITE_NoReadlock   0x00020000"
.PP
.SS "#define SQLITE_NOTADB   26"
.PP
.SS "#define SQLITE_NOTFOUND   12"
.PP
.SS "#define SQLITE_NULL   5"
.PP
.SS "#define SQLITE_NullCallback   0x00002000"
.PP
.SS "#define SQLITE_NULLEQ   0x80"
.PP
.SS "#define SQLITE_OK   0"
.PP
.SS "#define SQLITE_OPEN_AUTOPROXY   0x00000020"
.PP
.SS "#define SQLITE_OPEN_CREATE   0x00000004"
.PP
.SS "#define SQLITE_OPEN_DELETEONCLOSE   0x00000008"
.PP
.SS "#define SQLITE_OPEN_EXCLUSIVE   0x00000010"
.PP
.SS "#define SQLITE_OPEN_FULLMUTEX   0x00010000"
.PP
.SS "#define SQLITE_OPEN_MAIN_DB   0x00000100"
.PP
.SS "#define SQLITE_OPEN_MAIN_JOURNAL   0x00000800"
.PP
.SS "#define SQLITE_OPEN_MASTER_JOURNAL   0x00004000"
.PP
.SS "#define SQLITE_OPEN_NOMUTEX   0x00008000"
.PP
.SS "#define SQLITE_OPEN_PRIVATECACHE   0x00040000"
.PP
.SS "#define SQLITE_OPEN_READONLY   0x00000001"
.PP
.SS "#define SQLITE_OPEN_READWRITE   0x00000002"
.PP
.SS "#define SQLITE_OPEN_SHAREDCACHE   0x00020000"
.PP
.SS "#define SQLITE_OPEN_SUBJOURNAL   0x00002000"
.PP
.SS "#define SQLITE_OPEN_TEMP_DB   0x00000200"
.PP
.SS "#define SQLITE_OPEN_TEMP_JOURNAL   0x00001000"
.PP
.SS "#define SQLITE_OPEN_TRANSIENT_DB   0x00000400"
.PP
.SS "#define SQLITE_OPEN_WAL   0x00080000"
.PP
.SS "#define SQLITE_OptMask   0xff"
.PP
.SS "#define SQLITE_OS_OS2   0"
.PP
.SS "#define SQLITE_OS_OTHER   0"
.PP
.SS "#define SQLITE_OS_UNIX   1"
.PP
.SS "#define SQLITE_OS_WIN   0"
.PP
.SS "#define SQLITE_OS_WINCE   0"
.PP
.SS "#define SQLITE_PERM   3"
.PP
.SS "#define SQLITE_PRAGMA   19"
.PP
.SS "#define SQLITE_PreferBuiltin   0x10000000"
.PP
.SS "#define SQLITE_PRINT_BUF_SIZE   350"
.PP
.SS "#define SQLITE_PRIVATE   static"
.PP
.SS "#define SQLITE_PROTOCOL   15"
.PP
.SS "#define SQLITE_PTR_TO_INT(X)   ((int)(((char*)X)-(char*)0))"
.PP
.SS "#define SQLITE_QueryFlattener   0x01"
.PP
.SS "#define SQLITE_RANGE   25"
.PP
.SS "#define SQLITE_READ   20"
.PP
.SS "#define SQLITE_READONLY   8"
.PP
.SS "#define SQLITE_ReadUncommitted   0x0080000"
.PP
.SS "#define SQLITE_RecoveryMode   0x00800000"
.PP
.SS "#define SQLITE_RecTriggers   0x02000000"
.PP
.SS "#define SQLITE_REINDEX   27"
.PP
.SS "#define SQLITE_ReverseOrder   0x01000000"
.PP
.SS "#define SQLITE_ROW   100"
.PP
.SS "#define SQLITE_SAVEPOINT   32"
.PP
.SS "#define SQLITE_SCHEMA   17"
.PP
.SS "#define SQLITE_SELECT   21"
.PP
.SS "#define SQLITE_SET_LOCKPROXYFILE   3"
.PP
.SS "#define SQLITE_SHM_EXCLUSIVE   8"
.PP
.SS "#define SQLITE_SHM_LOCK   2"
.PP
.SS "#define SQLITE_SHM_NLOCK   8"
.PP
.SS "#define SQLITE_SHM_SHARED   4"
.PP
.SS "#define SQLITE_SHM_UNLOCK   1"
.PP
.SS "#define SQLITE_ShortColNames   0x00000800"
.PP
.SS "#define SQLITE_SKIP_UTF8(zIn)"
.PP
\fBValue:\fP
.PP
.nf
{                        \
  if( (*(zIn++))>=0xc0 ){                              \
    while( (*zIn & 0xc0)==0x80 ){ zIn++; }             \
  }                                                    \
}
.fi
.SS "#define SQLITE_SO_ASC   0"
.PP
.SS "#define SQLITE_SO_DESC   1"
.PP
.SS "#define SQLITE_SOURCE_ID   '2010-10-08 02:34:02 2677848087c9c090efb17c1893e77d6136a9111d'"
.PP
.SS "#define SQLITE_SqlTrace   0x00004000"
.PP
.SS "#define SQLITE_STATIC   ((\fBsqlite3_destructor_type\fP)0)"
.PP
.SS "#define SQLITE_STATUS_MALLOC_COUNT   9"
.PP
.SS "#define SQLITE_STATUS_MALLOC_SIZE   5"
.PP
.SS "#define SQLITE_STATUS_MEMORY_USED   0"
.PP
.SS "#define SQLITE_STATUS_PAGECACHE_OVERFLOW   2"
.PP
.SS "#define SQLITE_STATUS_PAGECACHE_SIZE   7"
.PP
.SS "#define SQLITE_STATUS_PAGECACHE_USED   1"
.PP
.SS "#define SQLITE_STATUS_PARSER_STACK   6"
.PP
.SS "#define SQLITE_STATUS_SCRATCH_OVERFLOW   4"
.PP
.SS "#define SQLITE_STATUS_SCRATCH_SIZE   8"
.PP
.SS "#define SQLITE_STATUS_SCRATCH_USED   3"
.PP
.SS "#define SQLITE_STMTSTATUS_AUTOINDEX   3"
.PP
.SS "#define SQLITE_STMTSTATUS_FULLSCAN_STEP   1"
.PP
.SS "#define SQLITE_STMTSTATUS_SORT   2"
.PP
.SS "#define SQLITE_STOREP2   0x10"
.PP
.SS "#define SQLITE_SYNC_DATAONLY   0x00010"
.PP
.SS "#define SQLITE_SYNC_FULL   0x00003"
.PP
.SS "#define SQLITE_SYNC_NORMAL   0x00002"
.PP
.SS "#define SQLITE_SYSTEM_MALLOC   1"
.PP
.SS "#define SQLITE_TEMP_FILE_PREFIX   'etilqs_'"
.PP
.SS "#define SQLITE_TEMP_STORE   1"
.PP
.SS "#define SQLITE_TEMPNAME_SIZE   200"
.PP
.SS "#define SQLITE_TESTCTRL_ALWAYS   13"
.PP
.SS "#define SQLITE_TESTCTRL_ASSERT   12"
.PP
.SS "#define SQLITE_TESTCTRL_BENIGN_MALLOC_HOOKS   10"
.PP
.SS "#define SQLITE_TESTCTRL_BITVEC_TEST   8"
.PP
.SS "#define SQLITE_TESTCTRL_FAULT_INSTALL   9"
.PP
.SS "#define SQLITE_TESTCTRL_FIRST   5"
.PP
.SS "#define SQLITE_TESTCTRL_ISKEYWORD   16"
.PP
.SS "#define SQLITE_TESTCTRL_LAST   18"
.PP
.SS "#define SQLITE_TESTCTRL_OPTIMIZATIONS   15"
.PP
.SS "#define SQLITE_TESTCTRL_PENDING_BYTE   11"
.PP
.SS "#define SQLITE_TESTCTRL_PGHDRSZ   17"
.PP
.SS "#define SQLITE_TESTCTRL_PRNG_RESET   7"
.PP
.SS "#define SQLITE_TESTCTRL_PRNG_RESTORE   6"
.PP
.SS "#define SQLITE_TESTCTRL_PRNG_SAVE   5"
.PP
.SS "#define SQLITE_TESTCTRL_RESERVE   14"
.PP
.SS "#define SQLITE_TESTCTRL_SCRATCHMALLOC   18"
.PP
.SS "#define SQLITE_TEXT   3"
.PP
.SS "#define SQLITE_THREADSAFE   1"
.PP
.SS "#define SQLITE_TOOBIG   18"
.PP
.SS "#define SQLITE_TRANSACTION   22"
.PP
.SS "#define SQLITE_TRANSIENT   ((\fBsqlite3_destructor_type\fP)-1)"
.PP
.SS "#define SQLITE_UNIX_THREADS   1"
.PP
.SS "#define SQLITE_UPDATE   23"
.PP
.SS "#define SQLITE_UTF16   4"
.PP
.SS "#define SQLITE_UTF16_ALIGNED   8"
.PP
.SS "#define SQLITE_UTF16BE   3"
.PP
.SS "#define SQLITE_UTF16LE   2"
.PP
.SS "#define SQLITE_UTF16NATIVE   (SQLITE_BIGENDIAN?SQLITE_UTF16BE:SQLITE_UTF16LE)"
.PP
.SS "#define SQLITE_UTF8   1"
.PP
.SS "#define SQLITE_VdbeListing   0x00008000"
.PP
.SS "#define SQLITE_VdbeTrace   0x00000100"
.PP
.SS "#define SQLITE_VERSION   '3.7.3'"
.PP
.SS "#define SQLITE_VERSION_NUMBER   3007003"
.PP
.SS "#define SQLITE_WHOLE_FILE_LOCKING   0x0001"
.PP
.SS "#define SQLITE_WriteSchema   0x00010000"
.PP
.SS "#define SQLITE_WSD"
.PP
.SS "#define sqliteHashData(E)   ((E)->data)"
.PP
.SS "#define sqliteHashFirst(H)   ((H)->first)"
.PP
.SS "#define sqliteHashNext(E)   ((E)->next)"
.PP
.SS "#define SRT_Coroutine   10"
.PP
.SS "#define SRT_Discard   4"
.PP
.SS "#define SRT_EphemTab   9"
.PP
.SS "#define SRT_Except   2"
.PP
.SS "#define SRT_Exists   3"
.PP
.SS "#define SRT_Mem   6"
.PP
.SS "#define SRT_Output   5"
.PP
.SS "#define SRT_Set   7"
.PP
.SS "#define SRT_Table   8"
.PP
.SS "#define SRT_Union   1"
.PP
.SS "#define STR_FUNCTION(zName, nArg, pArg, bNC, xFunc)"
.PP
\fBValue:\fP
.PP
.nf
{nArg, SQLITE_UTF8, bNC*SQLITE_FUNC_NEEDCOLL, \
   pArg, 0, xFunc, 0, 0, #zName, 0, 0}
.fi
.SS "#define STRICMP(x, y)"
.PP
\fBValue:\fP
.PP
.nf
(\
sqlite3UpperToLower[*(unsigned char *)(x)]==   \
sqlite3UpperToLower[*(unsigned char *)(y)]     \
&& sqlite3StrICmp((x)+1,(y)+1)==0 )
.fi
.SS "#define Stringify(P, enc)"
.PP
\fBValue:\fP
.PP
.nf
if(((P)->flags&(MEM_Str|MEM_Blob))==0 && sqlite3VdbeMemStringify(P,enc)) \
     { goto no_mem; }
.fi
.SS "#define SWAP(TYPE, A, B)   {TYPE t=A; A=B; B=t;}"
.PP
.SS "#define swapMixedEndianFloat(X)"
.PP
.SS "#define TEMP_MASTER_NAME   'sqlite_temp_master'"
.PP
.SS "#define TERM_ANDINFO   0x20"
.PP
.SS "#define TERM_CODED   0x04"
.PP
.SS "#define TERM_COPIED   0x08"
.PP
.SS "#define TERM_DYNAMIC   0x01"
.PP
.SS "#define TERM_OR_OK   0x40"
.PP
.SS "#define TERM_ORINFO   0x10"
.PP
.SS "#define TERM_VIRTUAL   0x02"
.PP
.SS "#define TESTBIT(V, I)   (V[I>>3]&(1<<(I&7)))!=0"
.PP
.SS "#define testcase(X)"
.PP
.SS "#define TESTONLY(X)"
.PP
.SS "#define TF_Autoincrement   0x08"
.PP
.SS "#define TF_Ephemeral   0x02"
.PP
.SS "#define TF_HasPrimaryKey   0x04"
.PP
.SS "#define TF_NeedMetadata   0x20"
.PP
.SS "#define TF_Readonly   0x01"
.PP
.SS "#define TF_Virtual   0x10"
.PP
.SS "#define threadid   pthread_self()"
.PP
.SS "#define TIMER_ELAPSED   ((\fBsqlite_uint64\fP)0)"
.PP
.SS "#define TIMER_END"
.PP
.SS "#define TIMER_START"
.PP
.SS "#define TK_ABORT   28"
.PP
.SS "#define TK_ACTION   29"
.PP
.SS "#define TK_ADD   140"
.PP
.SS "#define TK_AFTER   30"
.PP
.SS "#define TK_AGG_COLUMN   154"
.PP
.SS "#define TK_AGG_FUNCTION   153"
.PP
.SS "#define TK_ALL   113"
.PP
.SS "#define TK_ALTER   139"
.PP
.SS "#define TK_ANALYZE   31"
.PP
.SS "#define TK_AND   69"
.PP
.SS "#define TK_ANY   67"
.PP
.SS "#define TK_AS   24"
.PP
.SS "#define TK_ASC   32"
.PP
.SS "#define TK_ATTACH   33"
.PP
.SS "#define TK_AUTOINCR   103"
.PP
.SS "#define TK_BEFORE   34"
.PP
.SS "#define TK_BEGIN   5"
.PP
.SS "#define TK_BETWEEN   71"
.PP
.SS "#define TK_BITAND   82"
.PP
.SS "#define TK_BITNOT   93"
.PP
.SS "#define TK_BITOR   83"
.PP
.SS "#define TK_BLOB   131"
.PP
.SS "#define TK_BY   35"
.PP
.SS "#define TK_CASCADE   36"
.PP
.SS "#define TK_CASE   134"
.PP
.SS "#define TK_CAST   37"
.PP
.SS "#define TK_CHECK   101"
.PP
.SS "#define TK_COLLATE   92"
.PP
.SS "#define TK_COLUMN   152"
.PP
.SS "#define TK_COLUMNKW   38"
.PP
.SS "#define TK_COMMA   25"
.PP
.SS "#define TK_COMMIT   10"
.PP
.SS "#define TK_CONCAT   91"
.PP
.SS "#define TK_CONFLICT   39"
.PP
.SS "#define TK_CONST_FUNC   155"
.PP
.SS "#define TK_CONSTRAINT   96"
.PP
.SS "#define TK_CREATE   17"
.PP
.SS "#define TK_CTIME_KW   66"
.PP
.SS "#define TK_DATABASE   40"
.PP
.SS "#define TK_DEFAULT   97"
.PP
.SS "#define TK_DEFERRABLE   109"
.PP
.SS "#define TK_DEFERRED   7"
.PP
.SS "#define TK_DELETE   106"
.PP
.SS "#define TK_DESC   41"
.PP
.SS "#define TK_DETACH   42"
.PP
.SS "#define TK_DISTINCT   117"
.PP
.SS "#define TK_DOT   118"
.PP
.SS "#define TK_DROP   111"
.PP
.SS "#define TK_EACH   43"
.PP
.SS "#define TK_ELSE   137"
.PP
.SS "#define TK_END   11"
.PP
.SS "#define TK_END_OF_FILE   147"
.PP
.SS "#define TK_EQ   76"
.PP
.SS "#define TK_ESCAPE   81"
.PP
.SS "#define TK_EXCEPT   114"
.PP
.SS "#define TK_EXCLUSIVE   9"
.PP
.SS "#define TK_EXISTS   20"
.PP
.SS "#define TK_EXPLAIN   2"
.PP
.SS "#define TK_FAIL   44"
.PP
.SS "#define TK_FLOAT   130"
.PP
.SS "#define TK_FOR   45"
.PP
.SS "#define TK_FOREIGN   110"
.PP
.SS "#define TK_FROM   119"
.PP
.SS "#define TK_FUNCTION   151"
.PP
.SS "#define TK_GE   80"
.PP
.SS "#define TK_GROUP   123"
.PP
.SS "#define TK_GT   77"
.PP
.SS "#define TK_HAVING   124"
.PP
.SS "#define TK_ID   26"
.PP
.SS "#define TK_IF   18"
.PP
.SS "#define TK_IGNORE   46"
.PP
.SS "#define TK_ILLEGAL   148"
.PP
.SS "#define TK_IMMEDIATE   8"
.PP
.SS "#define TK_IN   72"
.PP
.SS "#define TK_INDEX   138"
.PP
.SS "#define TK_INDEXED   27"
.PP
.SS "#define TK_INITIALLY   47"
.PP
.SS "#define TK_INSERT   105"
.PP
.SS "#define TK_INSTEAD   48"
.PP
.SS "#define TK_INTEGER   129"
.PP
.SS "#define TK_INTERSECT   115"
.PP
.SS "#define TK_INTO   127"
.PP
.SS "#define TK_IS   70"
.PP
.SS "#define TK_ISNOT   146"
.PP
.SS "#define TK_ISNULL   73"
.PP
.SS "#define TK_JOIN   120"
.PP
.SS "#define TK_JOIN_KW   95"
.PP
.SS "#define TK_KEY   52"
.PP
.SS "#define TK_LE   78"
.PP
.SS "#define TK_LIKE_KW   49"
.PP
.SS "#define TK_LIMIT   125"
.PP
.SS "#define TK_LP   22"
.PP
.SS "#define TK_LSHIFT   84"
.PP
.SS "#define TK_LT   79"
.PP
.SS "#define TK_MATCH   50"
.PP
.SS "#define TK_MINUS   87"
.PP
.SS "#define TK_NE   75"
.PP
.SS "#define TK_NO   51"
.PP
.SS "#define TK_NOT   19"
.PP
.SS "#define TK_NOTNULL   74"
.PP
.SS "#define TK_NULL   98"
.PP
.SS "#define TK_OF   53"
.PP
.SS "#define TK_OFFSET   54"
.PP
.SS "#define TK_ON   104"
.PP
.SS "#define TK_OR   68"
.PP
.SS "#define TK_ORDER   122"
.PP
.SS "#define TK_PLAN   4"
.PP
.SS "#define TK_PLUS   86"
.PP
.SS "#define TK_PRAGMA   55"
.PP
.SS "#define TK_PRIMARY   99"
.PP
.SS "#define TK_QUERY   3"
.PP
.SS "#define TK_RAISE   56"
.PP
.SS "#define TK_REFERENCES   102"
.PP
.SS "#define TK_REGISTER   132"
.PP
.SS "#define TK_REINDEX   64"
.PP
.SS "#define TK_RELEASE   14"
.PP
.SS "#define TK_REM   90"
.PP
.SS "#define TK_RENAME   65"
.PP
.SS "#define TK_REPLACE   57"
.PP
.SS "#define TK_RESTRICT   58"
.PP
.SS "#define TK_ROLLBACK   12"
.PP
.SS "#define TK_ROW   59"
.PP
.SS "#define TK_RP   23"
.PP
.SS "#define TK_RSHIFT   85"
.PP
.SS "#define TK_SAVEPOINT   13"
.PP
.SS "#define TK_SELECT   116"
.PP
.SS "#define TK_SEMI   1"
.PP
.SS "#define TK_SET   108"
.PP
.SS "#define TK_SLASH   89"
.PP
.SS "#define TK_SPACE   149"
.PP
.SS "#define TK_STAR   88"
.PP
.SS "#define TK_STRING   94"
.PP
.SS "#define TK_TABLE   16"
.PP
.SS "#define TK_TEMP   21"
.PP
.SS "#define TK_THEN   136"
.PP
.SS "#define TK_TO   15"
.PP
.SS "#define TK_TO_BLOB   142"
.PP
.SS "#define TK_TO_INT   144"
.PP
.SS "#define TK_TO_NUMERIC   143"
.PP
.SS "#define TK_TO_REAL   145"
.PP
.SS "#define TK_TO_TEXT   141"
.PP
.SS "#define TK_TRANSACTION   6"
.PP
.SS "#define TK_TRIGGER   60"
.PP
.SS "#define TK_UMINUS   156"
.PP
.SS "#define TK_UNCLOSED_STRING   150"
.PP
.SS "#define TK_UNION   112"
.PP
.SS "#define TK_UNIQUE   100"
.PP
.SS "#define TK_UPDATE   107"
.PP
.SS "#define TK_UPLUS   157"
.PP
.SS "#define TK_USING   121"
.PP
.SS "#define TK_VACUUM   61"
.PP
.SS "#define TK_VALUES   128"
.PP
.SS "#define TK_VARIABLE   133"
.PP
.SS "#define TK_VIEW   62"
.PP
.SS "#define TK_VIRTUAL   63"
.PP
.SS "#define TK_WHEN   135"
.PP
.SS "#define TK_WHERE   126"
.PP
.SS "#define tkCREATE   4"
.PP
.SS "#define tkEND   7"
.PP
.SS "#define tkEXPLAIN   3"
.PP
.SS "#define tkOTHER   2"
.PP
.SS "#define tkSEMI   0"
.PP
.SS "#define tkTEMP   5"
.PP
.SS "#define tkTRIGGER   6"
.PP
.SS "#define tkWS   1"
.PP
.SS "#define TOKEN   (yyminor.yy0)"
.PP
.SS "#define TRACE(X)"
.PP
.SS "#define TRACE_IDX_INPUTS(A)"
.PP
.SS "#define TRACE_IDX_OUTPUTS(A)"
.PP
.SS "#define TRANS_NONE   0"
.PP
.SS "#define TRANS_READ   1"
.PP
.SS "#define TRANS_WRITE   2"
.PP
.SS "#define TRIGGER_AFTER   2"
.PP
.SS "#define TRIGGER_BEFORE   1"
.PP
.SS "#define UINT16_TYPE   unsigned short int"
.PP
.SS "#define UINT32_TYPE   unsigned int"
.PP
.SS "#define UINT8_TYPE   unsigned char"
.PP
.SS "#define UNIX_SHM_BASE   ((22+SQLITE_SHM_NLOCK)*4)"
.PP
.SS "#define UNIX_SHM_DMS   (UNIX_SHM_BASE+SQLITE_SHM_NLOCK)"
.PP
.SS "#define UNIXVFS(VFSNAME, FINDER)"
.PP
\fBValue:\fP
.PP
.nf
{                        \
    2,                    /* iVersion */                    \
    sizeof(unixFile),     /* szOsFile */                    \
    MAX_PATHNAME,         /* mxPathname */                  \
    0,                    /* pNext */                       \
    VFSNAME,              /* zName */                       \
    (void*)&FINDER,       /* pAppData */                    \
    unixOpen,             /* xOpen */                       \
    unixDelete,           /* xDelete */                     \
    unixAccess,           /* xAccess */                     \
    unixFullPathname,     /* xFullPathname */               \
    unixDlOpen,           /* xDlOpen */                     \
    unixDlError,          /* xDlError */                    \
    unixDlSym,            /* xDlSym */                      \
    unixDlClose,          /* xDlClose */                    \
    unixRandomness,       /* xRandomness */                 \
    unixSleep,            /* xSleep */                      \
    unixCurrentTime,      /* xCurrentTime */                \
    unixGetLastError,     /* xGetLastError */               \
    unixCurrentTimeInt64, /* xCurrentTimeInt64 */           \
  }
.fi
.SS "#define UNKNOWN_LOCK   (EXCLUSIVE_LOCK+1)"
.PP
.SS "#define unlikely(X)   !!(X)"
.PP
.SS "#define UNPACKED_IGNORE_ROWID   0x0004"
.PP
.SS "#define UNPACKED_INCRKEY   0x0008"
.PP
.SS "#define UNPACKED_NEED_DESTROY   0x0002"
.PP
.SS "#define UNPACKED_NEED_FREE   0x0001"
.PP
.SS "#define UNPACKED_PREFIX_MATCH   0x0010"
.PP
.SS "#define UNPACKED_PREFIX_SEARCH   0x0020"
.PP
.SS "#define UNUSED_PARAMETER(x)   (void)(x)"
.PP
.SS "#define UNUSED_PARAMETER2(x, y)   UNUSED_PARAMETER(x),UNUSED_PARAMETER(y)"
.PP
.SS "#define UPDATE_MAX_BLOBSIZE(P)"
.PP
.SS "#define UpperToLower   \fBsqlite3UpperToLower\fP"
.PP
.SS "#define VDBE_MAGIC_DEAD   0xb606c3c8"
.PP
.SS "#define VDBE_MAGIC_HALT   0x519c2973"
.PP
.SS "#define VDBE_MAGIC_INIT   0x26bceaa5"
.PP
.SS "#define VDBE_MAGIC_RUN   0xbdf20da3"
.PP
.SS "#define VdbeComment(X)"
.PP
.SS "#define VdbeFrameMem(p)   ((\fBMem\fP *)&((\fBu8\fP *)p)[ROUND8(sizeof(\fBVdbeFrame\fP))])"
.PP
.SS "#define VdbeNoopComment(X)"
.PP
.SS "#define \fBvfsList\fP   GLOBAL(\fBsqlite3_vfs\fP *, \fBvfsList\fP)"
.PP
.SS "#define VVA_ONLY(X)"
.PP
.SS "#define WAL_ALL_BUT_WRITE   1"
.PP
.SS "#define WAL_CKPT_LOCK   1"
.PP
.SS "#define WAL_FRAME_HDRSIZE   24"
.PP
.SS "#define WAL_HDRSIZE   32"
.PP
.SS "#define WAL_MAGIC   0x377f0682"
.PP
.SS "#define WAL_MAX_VERSION   3007000"
.PP
.SS "#define WAL_NREADER   (SQLITE_SHM_NLOCK-3)"
.PP
.SS "#define WAL_READ_LOCK(I)   (3+(I))"
.PP
.SS "#define WAL_RECOVER_LOCK   2"
.PP
.SS "#define WAL_RETRY   (-1)"
.PP
.SS "#define WAL_SAVEPOINT_NDATA   4"
.PP
.SS "#define WAL_WRITE_LOCK   0"
.PP
.SS "#define walFrameOffset(iFrame, szPage)"
.PP
\fBValue:\fP
.PP
.nf
(                               \
  WAL_HDRSIZE + ((iFrame)-1)*(i64)((szPage)+WAL_FRAME_HDRSIZE)         \
)
.fi
.SS "#define WALINDEX_HDR_SIZE   (WALINDEX_LOCK_OFFSET+WALINDEX_LOCK_RESERVED)"
.PP
.SS "#define WALINDEX_LOCK_OFFSET   (sizeof(\fBWalIndexHdr\fP)*2 + sizeof(\fBWalCkptInfo\fP))"
.PP
.SS "#define WALINDEX_LOCK_RESERVED   16"
.PP
.SS "#define WALINDEX_MAX_VERSION   3007000"
.PP
.SS "#define WALINDEX_PGSZ"
.PP
\fBValue:\fP
.PP
.nf
(                                         \
    sizeof(ht_slot)*HASHTABLE_NSLOT + HASHTABLE_NPAGE*sizeof(u32) \
)
.fi
.SS "#define WALTRACE(X)"
.PP
.SS "#define WHERE_BTM_LIMIT   0x00200000"
.PP
.SS "#define WHERE_COLUMN_EQ   0x00010000"
.PP
.SS "#define WHERE_COLUMN_IN   0x00040000"
.PP
.SS "#define WHERE_COLUMN_NULL   0x00080000"
.PP
.SS "#define WHERE_COLUMN_RANGE   0x00020000"
.PP
.SS "#define WHERE_DUPLICATES_OK   0x0008"
.PP
.SS "#define WHERE_FORCE_TABLE   0x0040"
.PP
.SS "#define WHERE_IDX_ONLY   0x00800000"
.PP
.SS "#define WHERE_IN_ABLE   0x000f1000"
.PP
.SS "#define WHERE_INDEXED   0x000f0000"
.PP
.SS "#define WHERE_MULTI_OR   0x10000000"
.PP
.SS "#define WHERE_NOT_FULLSCAN   0x000f3000"
.PP
.SS "#define WHERE_OMIT_CLOSE   0x0020"
.PP
.SS "#define WHERE_OMIT_OPEN   0x0010"
.PP
.SS "#define WHERE_ONEPASS_DESIRED   0x0004"
.PP
.SS "#define WHERE_ONETABLE_ONLY   0x0080"
.PP
.SS "#define WHERE_ORDERBY   0x01000000"
.PP
.SS "#define WHERE_ORDERBY_MAX   0x0002"
.PP
.SS "#define WHERE_ORDERBY_MIN   0x0001"
.PP
.SS "#define WHERE_ORDERBY_NORMAL   0x0000"
.PP
.SS "#define WHERE_REVERSE   0x02000000"
.PP
.SS "#define WHERE_ROWID_EQ   0x00001000"
.PP
.SS "#define WHERE_ROWID_RANGE   0x00002000"
.PP
.SS "#define WHERE_TEMP_INDEX   0x20000000"
.PP
.SS "#define WHERE_TOP_LIMIT   0x00100000"
.PP
.SS "#define WHERE_UNIQUE   0x04000000"
.PP
.SS "#define WHERE_VIRTUALTABLE   0x08000000"
.PP
.SS "#define WHERETRACE(X)"
.PP
.SS "#define WO_ALL   0xfff"
.PP
.SS "#define WO_AND   0x200"
.PP
.SS "#define WO_EQ   0x002"
.PP
.SS "#define WO_GE   (WO_EQ<<(TK_GE-TK_EQ))"
.PP
.SS "#define WO_GT   (WO_EQ<<(TK_GT-TK_EQ))"
.PP
.SS "#define WO_IN   0x001"
.PP
.SS "#define WO_ISNULL   0x080"
.PP
.SS "#define WO_LE   (WO_EQ<<(TK_LE-TK_EQ))"
.PP
.SS "#define WO_LT   (WO_EQ<<(TK_LT-TK_EQ))"
.PP
.SS "#define WO_MATCH   0x040"
.PP
.SS "#define WO_OR   0x100"
.PP
.SS "#define WO_SINGLE   0x0ff"
.PP
.SS "#define WRC_Abort   2"
.PP
.SS "#define WRC_Continue   0"
.PP
.SS "#define WRC_Prune   1"
.PP
.SS "#define WRITE_LOCK   2"
.PP
.SS "#define WRITE_UTF16BE(zOut, c)"
.PP
\fBValue:\fP
.PP
.nf
{                                    \
  if( c<=0xFFFF ){                                                  \
    *zOut++ = (u8)((c>>8)&0x00FF);                                  \
    *zOut++ = (u8)(c&0x00FF);                                       \
  }else{                                                            \
    *zOut++ = (u8)(0x00D8 + (((c-0x10000)>>18)&0x03));              \
    *zOut++ = (u8)(((c>>10)&0x003F) + (((c-0x10000)>>10)&0x00C0));  \
    *zOut++ = (u8)(0x00DC + ((c>>8)&0x03));                         \
    *zOut++ = (u8)(c&0x00FF);                                       \
  }                                                                 \
}
.fi
.SS "#define WRITE_UTF16LE(zOut, c)"
.PP
\fBValue:\fP
.PP
.nf
{                                    \
  if( c<=0xFFFF ){                                                  \
    *zOut++ = (u8)(c&0x00FF);                                       \
    *zOut++ = (u8)((c>>8)&0x00FF);                                  \
  }else{                                                            \
    *zOut++ = (u8)(((c>>10)&0x003F) + (((c-0x10000)>>10)&0x00C0));  \
    *zOut++ = (u8)(0x00D8 + (((c-0x10000)>>18)&0x03));              \
    *zOut++ = (u8)(c&0x00FF);                                       \
    *zOut++ = (u8)(0x00DC + ((c>>8)&0x03));                         \
  }                                                                 \
}
.fi
.SS "#define WRITE_UTF8(zOut, c)"
.PP
\fBValue:\fP
.PP
.nf
{                          \
  if( c<0x00080 ){                                     \
    *zOut++ = (u8)(c&0xFF);                            \
  }                                                    \
  else if( c<0x00800 ){                                \
    *zOut++ = 0xC0 + (u8)((c>>6)&0x1F);                \
    *zOut++ = 0x80 + (u8)(c & 0x3F);                   \
  }                                                    \
  else if( c<0x10000 ){                                \
    *zOut++ = 0xE0 + (u8)((c>>12)&0x0F);               \
    *zOut++ = 0x80 + (u8)((c>>6) & 0x3F);              \
    *zOut++ = 0x80 + (u8)(c & 0x3F);                   \
  }else{                                               \
    *zOut++ = 0xF0 + (u8)((c>>18) & 0x07);             \
    *zOut++ = 0x80 + (u8)((c>>12) & 0x3F);             \
    *zOut++ = 0x80 + (u8)((c>>6) & 0x3F);              \
    *zOut++ = 0x80 + (u8)(c & 0x3F);                   \
  }                                                    \
}
.fi
.SS "#define wsdAutoext   \fBsqlite3Autoext\fP"
.PP
.SS "#define wsdAutoextInit"
.PP
.SS "#define wsdHooks   \fBsqlite3Hooks\fP"
.PP
.SS "#define wsdHooksInit"
.PP
.SS "#define wsdPrng   \fBsqlite3Prng\fP"
.PP
.SS "#define wsdStat   \fBsqlite3Stat\fP"
.PP
.SS "#define wsdStatInit"
.PP
.SS "#define YY_ACCEPT_ACTION   (YYNSTATE+YYNRULE+1)"
.PP
.SS "#define YY_ACTTAB_COUNT   (1557)"
.PP
.SS "#define YY_ERROR_ACTION   (YYNSTATE+YYNRULE)"
.PP
.SS "#define YY_NO_ACTION   (YYNSTATE+YYNRULE+2)"
.PP
.SS "#define YY_REDUCE_COUNT   (312)"
.PP
.SS "#define YY_REDUCE_MAX   (1369)"
.PP
.SS "#define YY_REDUCE_MIN   (-141)"
.PP
.SS "#define YY_REDUCE_USE_DFLT   (-142)"
.PP
.SS "#define YY_SHIFT_COUNT   (418)"
.PP
.SS "#define YY_SHIFT_MAX   (1468)"
.PP
.SS "#define YY_SHIFT_MIN   (-73)"
.PP
.SS "#define YY_SHIFT_USE_DFLT   (-74)"
.PP
.SS "#define YYACTIONTYPE   unsigned short int"
.PP
.SS "#define YYCODETYPE   unsigned char"
.PP
.SS "#define YYFALLBACK   1"
.PP
.SS "#define YYNOCODE   253"
.PP
.SS "#define YYNOERRORRECOVERY   1"
.PP
.SS "#define YYNRULE   329"
.PP
.SS "#define YYNSTATE   630"
.PP
.SS "#define YYSTACKDEPTH   100"
.PP
.SS "#define yytestcase(X)   testcase(X)"
.PP
.SS "#define YYWILDCARD   67"
.PP
.SH "Typedef Documentation"
.PP 
.SS "typedef struct \fBAggInfo\fP \fBAggInfo\fP"
.PP
.SS "typedef struct \fBanalysisInfo\fP \fBanalysisInfo\fP"
.PP
.SS "typedef struct \fBAuthContext\fP \fBAuthContext\fP"
.PP
.SS "typedef struct \fBAutoincInfo\fP \fBAutoincInfo\fP"
.PP
.SS "typedef struct \fBBenignMallocHooks\fP \fBBenignMallocHooks\fP"
.PP
.SS "typedef \fBu64\fP \fBBitmask\fP"
.PP
.SS "typedef struct \fBBitvec\fP \fBBitvec\fP"
.PP
.SS "typedef unsigned char \fBBool\fP"
.PP
.SS "typedef struct \fBBtCursor\fP \fBBtCursor\fP"
.PP
.SS "typedef struct \fBBtLock\fP \fBBtLock\fP"
.PP
.SS "typedef struct \fBBtree\fP \fBBtree\fP"
.PP
.SS "typedef struct \fBBtreeMutexArray\fP \fBBtreeMutexArray\fP"
.PP
.SS "typedef struct \fBBtShared\fP \fBBtShared\fP"
.PP
.SS "typedef struct \fBBusyHandler\fP \fBBusyHandler\fP"
.PP
.SS "typedef struct \fBCellInfo\fP \fBCellInfo\fP"
.PP
.SS "typedef struct \fBCollSeq\fP \fBCollSeq\fP"
.PP
.SS "typedef struct \fBColumn\fP \fBColumn\fP"
.PP
.SS "typedef struct \fBCountCtx\fP \fBCountCtx\fP"
.PP
.SS "typedef struct \fBDateTime\fP \fBDateTime\fP"
.PP
.SS "typedef struct \fBDb\fP \fBDb\fP"
.PP
.SS "typedef struct \fBDbFixer\fP \fBDbFixer\fP"
.PP
.SS "typedef struct \fBPgHdr\fP \fBDbPage\fP"
.PP
.SS "typedef unsigned char \fBetByte\fP"
.PP
.SS "typedef struct \fBExpr\fP \fBExpr\fP"
.PP
.SS "typedef struct \fBExprList\fP \fBExprList\fP"
.PP
.SS "typedef struct \fBExprSpan\fP \fBExprSpan\fP"
.PP
.SS "typedef struct \fBFileChunk\fP \fBFileChunk\fP"
.PP
.SS "typedef struct \fBFilePoint\fP \fBFilePoint\fP"
.PP
.SS "typedef struct \fBFKey\fP \fBFKey\fP"
.PP
.SS "typedef struct \fBFuncDef\fP \fBFuncDef\fP"
.PP
.SS "typedef struct \fBFuncDefHash\fP \fBFuncDefHash\fP"
.PP
.SS "typedef struct \fBFuncDestructor\fP \fBFuncDestructor\fP"
.PP
.SS "typedef struct \fBHash\fP \fBHash\fP"
.PP
.SS "typedef struct \fBHashElem\fP \fBHashElem\fP"
.PP
.SS "typedef \fBu16\fP \fBht_slot\fP"
.PP
.SS "typedef INT16_TYPE \fBi16\fP"
.PP
.SS "typedef \fBsqlite_int64\fP \fBi64\fP"
.PP
.SS "typedef INT8_TYPE \fBi8\fP"
.PP
.SS "typedef struct \fBIdList\fP \fBIdList\fP"
.PP
.SS "typedef struct \fBIncrblob\fP \fBIncrblob\fP"
.PP
.SS "typedef struct \fBIndex\fP \fBIndex\fP"
.PP
.SS "typedef struct \fBIndexSample\fP \fBIndexSample\fP"
.PP
.SS "typedef struct \fBIntegrityCk\fP \fBIntegrityCk\fP"
.PP
.SS "typedef struct \fBKeyClass\fP \fBKeyClass\fP"
.PP
.SS "typedef struct \fBKeyInfo\fP \fBKeyInfo\fP"
.PP
.SS "typedef struct \fBLookaside\fP \fBLookaside\fP"
.PP
.SS "typedef struct \fBLookasideSlot\fP \fBLookasideSlot\fP"
.PP
.SS "typedef struct \fBMem\fP \fBMem\fP"
.PP
.SS "typedef struct \fBMemJournal\fP \fBMemJournal\fP"
.PP
.SS "typedef struct \fBMemPage\fP \fBMemPage\fP"
.PP
.SS "typedef struct \fBModule\fP \fBModule\fP"
.PP
.SS "typedef struct \fBNameContext\fP \fBNameContext\fP"
.PP
.SS "typedef struct \fBVdbeOp\fP \fBOp\fP"
.PP
.SS "typedef struct \fBPager\fP \fBPager\fP"
.PP
.SS "typedef struct \fBPagerSavepoint\fP \fBPagerSavepoint\fP"
.PP
.SS "typedef struct \fBParse\fP \fBParse\fP"
.PP
.SS "typedef struct \fBPCache\fP \fBPCache\fP"
.PP
.SS "typedef struct \fBPCache1\fP \fBPCache1\fP"
.PP
.SS "typedef struct \fBPgFreeslot\fP \fBPgFreeslot\fP"
.PP
.SS "typedef struct \fBPgHdr\fP \fBPgHdr\fP"
.PP
.SS "typedef struct \fBPgHdr1\fP \fBPgHdr1\fP"
.PP
.SS "typedef \fBu32\fP \fBPgno\fP"
.PP
.SS "typedef struct \fBRowSet\fP \fBRowSet\fP"
.PP
.SS "typedef struct \fBSavepoint\fP \fBSavepoint\fP"
.PP
.SS "typedef struct \fBSchema\fP \fBSchema\fP"
.PP
.SS "typedef struct \fBSelect\fP \fBSelect\fP"
.PP
.SS "typedef struct \fBSelectDest\fP \fBSelectDest\fP"
.PP
.SS "typedef struct \fBSet\fP \fBSet\fP"
.PP
.SS "typedef struct \fBsqlite3\fP \fBsqlite3\fP"
.PP
.SS "typedef struct \fBsqlite3_api_routines\fP \fBsqlite3_api_routines\fP"
.PP
.SS "typedef struct \fBsqlite3_backup\fP \fBsqlite3_backup\fP"
.PP
.SS "typedef struct \fBsqlite3_blob\fP \fBsqlite3_blob\fP"
.PP
.SS "typedef int(*) \fBsqlite3_callback\fP(void *, int, char **, char **)"
.PP
.SS "typedef struct \fBsqlite3_context\fP \fBsqlite3_context\fP"
.PP
.SS "typedef void(*) \fBsqlite3_destructor_type\fP(void *)"
.PP
.SS "typedef struct \fBsqlite3_file\fP \fBsqlite3_file\fP"
.PP
.SS "typedef struct \fBsqlite3_index_info\fP \fBsqlite3_index_info\fP"
.PP
.SS "typedef \fBsqlite_int64\fP \fBsqlite3_int64\fP"
.PP
.SS "typedef struct \fBsqlite3_io_methods\fP \fBsqlite3_io_methods\fP"
.PP
.SS "typedef struct \fBsqlite3_mem_methods\fP \fBsqlite3_mem_methods\fP"
.PP
.SS "typedef struct \fBsqlite3_module\fP \fBsqlite3_module\fP"
.PP
.SS "typedef struct \fBsqlite3_mutex\fP \fBsqlite3_mutex\fP"
.PP
.SS "typedef struct \fBsqlite3_mutex_methods\fP \fBsqlite3_mutex_methods\fP"
.PP
.SS "typedef struct \fBsqlite3_pcache\fP \fBsqlite3_pcache\fP"
.PP
.SS "typedef struct \fBsqlite3_pcache_methods\fP \fBsqlite3_pcache_methods\fP"
.PP
.SS "typedef struct \fBsqlite3_rtree_geometry\fP \fBsqlite3_rtree_geometry\fP"
.PP
.SS "typedef struct \fBsqlite3_stmt\fP \fBsqlite3_stmt\fP"
.PP
.SS "typedef \fBsqlite_uint64\fP \fBsqlite3_uint64\fP"
.PP
.SS "typedef struct \fBMem\fP \fBsqlite3_value\fP"
.PP
.SS "typedef struct \fBsqlite3_vfs\fP \fBsqlite3_vfs\fP"
.PP
.SS "typedef struct \fBsqlite3_vtab\fP \fBsqlite3_vtab\fP"
.PP
.SS "typedef struct \fBsqlite3_vtab_cursor\fP \fBsqlite3_vtab_cursor\fP"
.PP
.SS "typedef struct \fBsqlite3AutoExtList\fP \fBsqlite3AutoExtList\fP"
.PP
.SS "typedef struct \fBsqlite3StatType\fP \fBsqlite3StatType\fP"
.PP
.SS "typedef long long int \fBsqlite_int64\fP"
.PP
.SS "typedef unsigned long long int \fBsqlite_uint64\fP"
.PP
.SS "typedef struct \fBSrcList\fP \fBSrcList\fP"
.PP
.SS "typedef struct \fBStrAccum\fP \fBStrAccum\fP"
.PP
.SS "typedef struct \fBSubProgram\fP \fBSubProgram\fP"
.PP
.SS "typedef struct \fBSumCtx\fP \fBSumCtx\fP"
.PP
.SS "typedef struct \fBTable\fP \fBTable\fP"
.PP
.SS "typedef struct \fBTableLock\fP \fBTableLock\fP"
.PP
.SS "typedef struct \fBToken\fP \fBToken\fP"
.PP
.SS "typedef struct \fBTrigger\fP \fBTrigger\fP"
.PP
.SS "typedef struct \fBTriggerPrg\fP \fBTriggerPrg\fP"
.PP
.SS "typedef struct \fBTriggerStep\fP \fBTriggerStep\fP"
.PP
.SS "typedef UINT16_TYPE \fBu16\fP"
.PP
.SS "typedef UINT32_TYPE \fBu32\fP"
.PP
.SS "typedef \fBsqlite_uint64\fP \fBu64\fP"
.PP
.SS "typedef UINT8_TYPE \fBu8\fP"
.PP
.SS "typedef struct \fBunixFile\fP \fBunixFile\fP"
.PP
.SS "typedef struct \fBunixInodeInfo\fP \fBunixInodeInfo\fP"
.PP
.SS "typedef struct \fBunixShm\fP \fBunixShm\fP"
.PP
.SS "typedef struct \fBunixShmNode\fP \fBunixShmNode\fP"
.PP
.SS "typedef struct \fBUnixUnusedFd\fP \fBUnixUnusedFd\fP"
.PP
.SS "typedef struct \fBUnpackedRecord\fP \fBUnpackedRecord\fP"
.PP
.SS "typedef struct \fBVdbe\fP \fBVdbe\fP"
.PP
.SS "typedef struct \fBVdbeCursor\fP \fBVdbeCursor\fP"
.PP
.SS "typedef struct \fBVdbeFrame\fP \fBVdbeFrame\fP"
.PP
.SS "typedef struct \fBVdbeFunc\fP \fBVdbeFunc\fP"
.PP
.SS "typedef struct \fBVdbeOp\fP \fBVdbeOp\fP"
.PP
.SS "typedef struct \fBVdbeOpList\fP \fBVdbeOpList\fP"
.PP
.SS "typedef struct \fBVTable\fP \fBVTable\fP"
.PP
.SS "typedef struct \fBWal\fP \fBWal\fP"
.PP
.SS "typedef struct \fBWalCkptInfo\fP \fBWalCkptInfo\fP"
.PP
.SS "typedef struct \fBWalIndexHdr\fP \fBWalIndexHdr\fP"
.PP
.SS "typedef struct \fBWalIterator\fP \fBWalIterator\fP"
.PP
.SS "typedef struct \fBWalker\fP \fBWalker\fP"
.PP
.SS "typedef struct \fBWhereAndInfo\fP \fBWhereAndInfo\fP"
.PP
.SS "typedef struct \fBWhereClause\fP \fBWhereClause\fP"
.PP
.SS "typedef struct \fBWhereCost\fP \fBWhereCost\fP"
.PP
.SS "typedef struct \fBWhereInfo\fP \fBWhereInfo\fP"
.PP
.SS "typedef struct \fBWhereLevel\fP \fBWhereLevel\fP"
.PP
.SS "typedef struct \fBWhereMaskSet\fP \fBWhereMaskSet\fP"
.PP
.SS "typedef struct \fBWhereOrInfo\fP \fBWhereOrInfo\fP"
.PP
.SS "typedef struct \fBWherePlan\fP \fBWherePlan\fP"
.PP
.SS "typedef struct \fBWhereTerm\fP \fBWhereTerm\fP"
.PP
.SS "typedef \fBi16\fP \fBynVar\fP"
.PP
.SS "typedef struct \fByyParser\fP \fByyParser\fP"
.PP
.SS "typedef struct \fByyStackEntry\fP \fByyStackEntry\fP"
.PP
.SH "Function Documentation"
.PP 
.SS "static int _posixUnlock (\fBsqlite3_file\fP * id, int eFileLock, int handleNFSUnlock)\fC [static]\fP"
.PP
.SS "static void absFunc (\fBsqlite3_context\fP * context, int argc, \fBsqlite3_value\fP ** argv)\fC [static]\fP"
.PP
.SS "static int accessPayload (\fBBtCursor\fP * pCur, \fBu32\fP offset, \fBu32\fP amt, unsigned char * pBuf, int eOp)\fC [static]\fP"
.PP
.SS "static const char* actionName (\fBu8\fP action)\fC [static]\fP"
.PP
.SS "static int addAggInfoColumn (\fBsqlite3\fP * db, \fBAggInfo\fP * pInfo)\fC [static]\fP"
.PP
.SS "static int addAggInfoFunc (\fBsqlite3\fP * db, \fBAggInfo\fP * pInfo)\fC [static]\fP"
.PP
.SS "static void addArgumentToVtab (\fBParse\fP * pParse)\fC [static]\fP"
.PP
.SS "static void addModuleArgument (\fBsqlite3\fP * db, \fBTable\fP * pTable, char * zArg)\fC [static]\fP"
.PP
.SS "static int addToSavepointBitvecs (\fBPager\fP * pPager, \fBPgno\fP pgno)\fC [static]\fP"
.PP
.SS "static int addToVTrans (\fBsqlite3\fP * db, \fBVTable\fP * pVTab)\fC [static]\fP"
.PP
.SS "static void addWhereTerm (\fBParse\fP * pParse, \fBSrcList\fP * pSrc, int iLeft, int iColLeft, int iRight, int iColRight, int isOuterJoin, \fBExpr\fP ** ppWhere)\fC [static]\fP"
.PP
.SS "static int allocateBtreePage (\fBBtShared\fP *, \fBMemPage\fP **, \fBPgno\fP *, \fBPgno\fP, \fBu8\fP)\fC [static]\fP"
.PP
.SS "static \fBVdbeCursor\fP* allocateCursor (\fBVdbe\fP * p, int iCur, int nField, int iDb, int isBtreeCursor)\fC [static]\fP"
.PP
.SS "static \fBsqlite3_index_info\fP* allocateIndexInfo (\fBParse\fP * pParse, \fBWhereClause\fP * pWC, struct SrcList_item * pSrc, \fBExprList\fP * pOrderBy)\fC [static]\fP"
.PP
.SS "static int allocateSpace (\fBMemPage\fP * pPage, int nByte, int * pIdx)\fC [static]\fP"
.PP
.SS "static void allocateTempSpace (\fBBtShared\fP * pBt)\fC [static]\fP"
.PP
.SS "static void* allocSpace (void * pBuf, int nByte, \fBu8\fP ** ppFrom, \fBu8\fP * pEnd, int * pnByte)\fC [static]\fP"
.PP
.SS "static int allowedOp (int op)\fC [static]\fP"
.PP
.SS "static int allSpaces (const char * z, int n)\fC [static]\fP"
.PP
.SS "static int analysisLoader (void * pData, int argc, char ** argv, char ** NotUsed)\fC [static]\fP"
.PP
.SS "static int analyzeAggregate (\fBWalker\fP * pWalker, \fBExpr\fP * pExpr)\fC [static]\fP"
.PP
.SS "static int analyzeAggregatesInSelect (\fBWalker\fP * pWalker, \fBSelect\fP * pSelect)\fC [static]\fP"
.PP
.SS "static void analyzeDatabase (\fBParse\fP * pParse, int iDb)\fC [static]\fP"
.PP
.SS "static void analyzeOneTable (\fBParse\fP * pParse, \fBTable\fP * pTab, int iStatCur, int iMem)\fC [static]\fP"
.PP
.SS "static void analyzeTable (\fBParse\fP * pParse, \fBTable\fP * pTab)\fC [static]\fP"
.PP
.SS "static void appendSpace (\fBStrAccum\fP * pAccum, int N)\fC [static]\fP"
.PP
.SS "static void applyAffinity (\fBMem\fP * pRec, char affinity, \fBu8\fP enc)\fC [static]\fP"
.PP
.SS "static void applyNumericAffinity (\fBMem\fP * pRec)\fC [static]\fP"
.PP
.SS "static void assemblePage (\fBMemPage\fP * pPage, int nCell, \fBu8\fP ** apCell, \fBu16\fP * aSize)\fC [static]\fP"
.PP
.SS "static void attachBackupObject (\fBsqlite3_backup\fP * p)\fC [static]\fP"
.PP
.SS "static void attachFunc (\fBsqlite3_context\fP * context, int NotUsed, \fBsqlite3_value\fP ** argv)\fC [static]\fP"
.PP
.SS "static int autoIncBegin (\fBParse\fP * pParse, int iDb, \fBTable\fP * pTab)\fC [static]\fP"
.PP
.SS "static void autoIncStep (\fBParse\fP * pParse, int memId, int regRowid)\fC [static]\fP"
.PP
.SS "static int autoVacuumCommit (\fBBtShared\fP * pBt)\fC [static]\fP"
.PP
.SS "static void avgFinalize (\fBsqlite3_context\fP * context)\fC [static]\fP"
.PP
.SS "static int backupOnePage (\fBsqlite3_backup\fP * p, \fBPgno\fP iSrcPg, const \fBu8\fP * zSrcData)\fC [static]\fP"
.PP
.SS "static int backupTruncateFile (\fBsqlite3_file\fP * pFile, \fBi64\fP iSize)\fC [static]\fP"
.PP
.SS "static int balance (\fBBtCursor\fP * pCur)\fC [static]\fP"
.PP
.SS "static int balance_deeper (\fBMemPage\fP * pRoot, \fBMemPage\fP ** ppChild)\fC [static]\fP"
.PP
.SS "static int balance_nonroot (\fBMemPage\fP * pParent, int iParentIdx, \fBu8\fP * aOvflSpace, int isRoot)\fC [static]\fP"
.PP
.SS "static int balance_quick (\fBMemPage\fP * pParent, \fBMemPage\fP * pPage, \fBu8\fP * pSpace)\fC [static]\fP"
.PP
.SS "static void bestAutomaticIndex (\fBParse\fP * pParse, \fBWhereClause\fP * pWC, struct SrcList_item * pSrc, \fBBitmask\fP notReady, \fBWhereCost\fP * pCost)\fC [static]\fP"
.PP
.SS "static void bestBtreeIndex (\fBParse\fP * pParse, \fBWhereClause\fP * pWC, struct SrcList_item * pSrc, \fBBitmask\fP notReady, \fBBitmask\fP notValid, \fBExprList\fP * pOrderBy, \fBWhereCost\fP * pCost)\fC [static]\fP"
.PP
.SS "static void bestIndex (\fBParse\fP *, \fBWhereClause\fP *, struct SrcList_item *, \fBBitmask\fP, \fBBitmask\fP, \fBExprList\fP *, \fBWhereCost\fP *)\fC [static]\fP"
.PP
.SS "static void bestOrClauseIndex (\fBParse\fP * pParse, \fBWhereClause\fP * pWC, struct SrcList_item * pSrc, \fBBitmask\fP notReady, \fBBitmask\fP notValid, \fBExprList\fP * pOrderBy, \fBWhereCost\fP * pCost)\fC [static]\fP"
.PP
.SS "static void bestVirtualIndex (\fBParse\fP * pParse, \fBWhereClause\fP * pWC, struct SrcList_item * pSrc, \fBBitmask\fP notReady, \fBBitmask\fP notValid, \fBExprList\fP * pOrderBy, \fBWhereCost\fP * pCost, \fBsqlite3_index_info\fP ** ppIdxInfo)\fC [static]\fP"
.PP
.SS "static \fBu8\fP binaryCompareP5 (\fBExpr\fP * pExpr1, \fBExpr\fP * pExpr2, int jumpIfNull)\fC [static]\fP"
.PP
.SS "static void binaryToUnaryIfNull (\fBParse\fP * pParse, \fBExpr\fP * pY, \fBExpr\fP * pA, int op)\fC [static]\fP"
.PP
.SS "static int binCollFunc (void * padFlag, int nKey1, const void * pKey1, int nKey2, const void * pKey2)\fC [static]\fP"
.PP
.SS "static int bindText (\fBsqlite3_stmt\fP * pStmt, int i, const void * zData, int nData, void(*)(void *) xDel, \fBu8\fP encoding)\fC [static]\fP"
.PP
.SS "static int blobReadWrite (\fBsqlite3_blob\fP * pBlob, void * z, int n, int iOffset, int(*)(\fBBtCursor\fP *, \fBu32\fP, \fBu32\fP, void *) xCall)\fC [static]\fP"
.PP
.SS "static void btreeClearHasContent (\fBBtShared\fP * pBt)\fC [static]\fP"
.PP
.SS "static int btreeCreateTable (\fBBtree\fP * p, int * piTable, int createTabFlags)\fC [static]\fP"
.PP
.SS "static int btreeCursor (\fBBtree\fP * p, int iTable, int wrFlag, struct \fBKeyInfo\fP * pKeyInfo, \fBBtCursor\fP * pCur)\fC [static]\fP"
.PP
.SS "static int btreeDropTable (\fBBtree\fP * p, \fBPgno\fP iTable, int * piMoved)\fC [static]\fP"
.PP
.SS "static void btreeEndTransaction (\fBBtree\fP * p)\fC [static]\fP"
.PP
.SS "static int btreeGetHasContent (\fBBtShared\fP * pBt, \fBPgno\fP pgno)\fC [static]\fP"
.PP
.SS "static int btreeGetPage (\fBBtShared\fP * pBt, \fBPgno\fP pgno, \fBMemPage\fP ** ppPage, int noContent)\fC [static]\fP"
.PP
.SS "static int btreeInitPage (\fBMemPage\fP * pPage)\fC [static]\fP"
.PP
.SS "static int btreeInvokeBusyHandler (void * pArg)\fC [static]\fP"
.PP
.SS "static int btreeMoveto (\fBBtCursor\fP * pCur, const void * pKey, \fBi64\fP nKey, int bias, int * pRes)\fC [static]\fP"
.PP
.SS "static \fBPgno\fP btreePagecount (\fBBtShared\fP * pBt)\fC [static]\fP"
.PP
.SS "static \fBMemPage\fP* btreePageFromDbPage (\fBDbPage\fP * pDbPage, \fBPgno\fP pgno, \fBBtShared\fP * pBt)\fC [static]\fP"
.PP
.SS "static \fBMemPage\fP* btreePageLookup (\fBBtShared\fP * pBt, \fBPgno\fP pgno)\fC [static]\fP"
.PP
.SS "static void btreeParseCell (\fBMemPage\fP * pPage, int iCell, \fBCellInfo\fP * pInfo)\fC [static]\fP"
.PP
.SS "static void btreeParseCellPtr (\fBMemPage\fP * pPage, \fBu8\fP * pCell, \fBCellInfo\fP * pInfo)\fC [static]\fP"
.PP
.SS "static int btreeRestoreCursorPosition (\fBBtCursor\fP * pCur)\fC [static]\fP"
.PP
.SS "static int btreeSetHasContent (\fBBtShared\fP * pBt, \fBPgno\fP pgno)\fC [static]\fP"
.PP
.SS "static void cacheEntryClear (\fBParse\fP * pParse, struct yColCache * p)\fC [static]\fP"
.PP
.SS "static void callCollNeeded (\fBsqlite3\fP * db, int enc, const char * zName)\fC [static]\fP"
.PP
.SS "static void callFinaliser (\fBsqlite3\fP * db, int offset)\fC [static]\fP"
.PP
.SS "static void cdateFunc (\fBsqlite3_context\fP * context, int NotUsed, \fBsqlite3_value\fP ** NotUsed2)\fC [static]\fP"
.PP
.SS "static \fBu16\fP cellSizePtr (\fBMemPage\fP * pPage, \fBu8\fP * pCell)\fC [static]\fP"
.PP
.SS "static void changes (\fBsqlite3_context\fP * context, int NotUsed, \fBsqlite3_value\fP ** NotUsed2)\fC [static]\fP"
.PP
.SS "static int changeTempStorage (\fBParse\fP * pParse, const char * zStorageType)\fC [static]\fP"
.PP
.SS "static void checkAppendMsg (\fBIntegrityCk\fP * pCheck, char * zMsg1, const char * zFormat,  ...)\fC [static]\fP"
.PP
.SS "static int checkColumnOverlap (\fBIdList\fP * pIdList, \fBExprList\fP * pEList)\fC [static]\fP"
.PP
.SS "static int checkForMultiColumnSelectError (\fBParse\fP * pParse, \fBSelectDest\fP * pDest, int nExpr)\fC [static]\fP"
.PP
.SS "static void checkList (\fBIntegrityCk\fP * pCheck, int isFreeList, int iPage, int N, char * zContext)\fC [static]\fP"
.PP
.SS "static void checkPtrmap (\fBIntegrityCk\fP * pCheck, \fBPgno\fP iChild, \fBu8\fP eType, \fBPgno\fP iParent, char * zContext)\fC [static]\fP"
.PP
.SS "static int checkRef (\fBIntegrityCk\fP * pCheck, \fBPgno\fP iPage, char * zContext)\fC [static]\fP"
.PP
.SS "static int checkTreePage (\fBIntegrityCk\fP * pCheck, int iPage, char * zParentContext, \fBi64\fP * pnParentMinKey, \fBi64\fP * pnParentMaxKey)\fC [static]\fP"
.PP
.SS "static void Cleanup (\fBVdbe\fP * p)\fC [static]\fP"
.PP
.SS "static void clearAllSharedCacheTableLocks (\fBBtree\fP * p)\fC [static]\fP"
.PP
.SS "static int clearCell (\fBMemPage\fP * pPage, unsigned char * pCell)\fC [static]\fP"
.PP
.SS "static int clearDatabasePage (\fBBtShared\fP * pBt, \fBPgno\fP pgno, int freePageFlag, int * pnChange)\fC [static]\fP"
.PP
.SS "static void clearSelect (\fBsqlite3\fP * db, \fBSelect\fP * p)\fC [static]\fP"
.PP
.SS "static void clearYMD_HMS_TZ (\fBDateTime\fP * p)\fC [static]\fP"
.PP
.SS "static void closeAllCursors (\fBVdbe\fP * p)\fC [static]\fP"
.PP
.SS "static int closePendingFds (\fBunixFile\fP * pFile)\fC [static]\fP"
.PP
.SS "static int closeUnixFile (\fBsqlite3_file\fP * id)\fC [static]\fP"
.PP
.SS "static int codeAllEqualityTerms (\fBParse\fP * pParse, \fBWhereLevel\fP * pLevel, \fBWhereClause\fP * pWC, \fBBitmask\fP notReady, int nExtraReg, char ** pzAff)\fC [static]\fP"
.PP
.SS "static void codeApplyAffinity (\fBParse\fP * pParse, int base, int n, char * zAff)\fC [static]\fP"
.PP
.SS "static void codeAttach (\fBParse\fP * pParse, int type, \fBFuncDef\fP const * pFunc, \fBExpr\fP * pAuthArg, \fBExpr\fP * pFilename, \fBExpr\fP * pDbname, \fBExpr\fP * pKey)\fC [static]\fP"
.PP
.SS "static int codeCompare (\fBParse\fP * pParse, \fBExpr\fP * pLeft, \fBExpr\fP * pRight, int opcode, int in1, int in2, int dest, int jumpIfNull)\fC [static]\fP"
.PP
.SS "static void codeDistinct (\fBParse\fP * pParse, int iTab, int addrRepeat, int N, int iMem)\fC [static]\fP"
.PP
.SS "static int codeEqualityTerm (\fBParse\fP * pParse, \fBWhereTerm\fP * pTerm, \fBWhereLevel\fP * pLevel, int iTarget)\fC [static]\fP"
.PP
.SS "static void codeInteger (\fBParse\fP * pParse, \fBExpr\fP * pExpr, int negFlag, int iMem)\fC [static]\fP"
.PP
.SS "static void codeOffset (\fBVdbe\fP * v, \fBSelect\fP * p, int iContinue)\fC [static]\fP"
.PP
.SS "static \fBBitmask\fP codeOneLoopStart (\fBWhereInfo\fP * pWInfo, int iLevel, \fBu16\fP wctrlFlags, \fBBitmask\fP notReady)\fC [static]\fP"
.PP
.SS "static void codeReal (\fBVdbe\fP * v, const char * z, int negateFlag, int iMem)\fC [static]\fP"
.PP
.SS "static \fBTriggerPrg\fP* codeRowTrigger (\fBParse\fP * pParse, \fBTrigger\fP * pTrigger, \fBTable\fP * pTab, int orconf)\fC [static]\fP"
.PP
.SS "static void codeTableLocks (\fBParse\fP * pParse)\fC [static]\fP"
.PP
.SS "static int codeTriggerProgram (\fBParse\fP * pParse, \fBTriggerStep\fP * pStepList, int orconf)\fC [static]\fP"
.PP
.SS "static int collationMatch (const char * zColl, \fBIndex\fP * pIndex)\fC [static]\fP"
.PP
.SS "static int columnIndex (\fBTable\fP * pTab, const char * zCol)\fC [static]\fP"
.PP
.SS "static void columnMallocFailure (\fBsqlite3_stmt\fP * pStmt)\fC [static]\fP"
.PP
.SS "static \fBMem\fP* columnMem (\fBsqlite3_stmt\fP * pStmt, int i)\fC [static]\fP"
.PP
.SS "static const void* columnName (\fBsqlite3_stmt\fP * pStmt, int N, const void *(*)(\fBMem\fP *) xFunc, int useType)\fC [static]\fP"
.PP
.SS "static const char* columnType (\fBNameContext\fP * pNC, \fBExpr\fP * pExpr, const char ** pzOriginDb, const char ** pzOriginTab, const char ** pzOriginCol)\fC [static]\fP"
.PP
.SS "static int compare2pow63 (const char * zNum, int incr)\fC [static]\fP"
.PP
.SS "static char comparisonAffinity (\fBExpr\fP * pExpr)\fC [static]\fP"
.PP
.SS "static void compileoptiongetFunc (\fBsqlite3_context\fP * context, int argc, \fBsqlite3_value\fP ** argv)\fC [static]\fP"
.PP
.SS "static void compileoptionusedFunc (\fBsqlite3_context\fP * context, int argc, \fBsqlite3_value\fP ** argv)\fC [static]\fP"
.PP
.SS "static void computeHMS (\fBDateTime\fP * p)\fC [static]\fP"
.PP
.SS "static void computeJD (\fBDateTime\fP * p)\fC [static]\fP"
.PP
.SS "static void computeLimitRegisters (\fBParse\fP * pParse, \fBSelect\fP * p, int iBreak)\fC [static]\fP"
.PP
.SS "static void computeYMD (\fBDateTime\fP * p)\fC [static]\fP"
.PP
.SS "static void computeYMD_HMS (\fBDateTime\fP * p)\fC [static]\fP"
.PP
.SS "static void constructAutomaticIndex (\fBParse\fP * pParse, \fBWhereClause\fP * pWC, struct SrcList_item * pSrc, \fBBitmask\fP notReady, \fBWhereLevel\fP * pLevel)\fC [static]\fP"
.PP
.SS "static void* contextMalloc (\fBsqlite3_context\fP * context, \fBi64\fP nByte)\fC [static]\fP"
.PP
.SS "static void copyNodeContent (\fBMemPage\fP * pFrom, \fBMemPage\fP * pTo, int * pRC)\fC [static]\fP"
.PP
.SS "static int copyPayload (void * pPayload, void * pBuf, int nByte, int eOp, \fBDbPage\fP * pDbPage)\fC [static]\fP"
.PP
.SS "static void corruptSchema (\fBInitData\fP * pData, const char * zObj, const char * zExtra)\fC [static]\fP"
.PP
.SS "static void countFinalize (\fBsqlite3_context\fP * context)\fC [static]\fP"
.PP
.SS "static void countStep (\fBsqlite3_context\fP * context, int argc, \fBsqlite3_value\fP ** argv)\fC [static]\fP"
.PP
.SS "static int createCollation (\fBsqlite3\fP * db, const char * zName, \fBu8\fP enc, \fBu8\fP collType, void * pCtx, int(*)(void *, int, const void *, int, const void *) xCompare, void(*)(void *) xDel)\fC [static]\fP"
.PP
.SS "static void createMask (\fBWhereMaskSet\fP * pMaskSet, int iCursor)\fC [static]\fP"
.PP
.SS "static int createModule (\fBsqlite3\fP * db, const char * zName, const \fBsqlite3_module\fP * pModule, void * pAux, void(*)(void *) xDestroy)\fC [static]\fP"
.PP
.SS "static char* createTableStmt (\fBsqlite3\fP * db, \fBTable\fP * p)\fC [static]\fP"
.PP
.SS "static void createVarMap (\fBVdbe\fP * p)\fC [static]\fP"
.PP
.SS "static void ctimeFunc (\fBsqlite3_context\fP * context, int NotUsed, \fBsqlite3_value\fP ** NotUsed2)\fC [static]\fP"
.PP
.SS "static void ctimestampFunc (\fBsqlite3_context\fP * context, int NotUsed, \fBsqlite3_value\fP ** NotUsed2)\fC [static]\fP"
.PP
.SS "static void dateFunc (\fBsqlite3_context\fP * context, int argc, \fBsqlite3_value\fP ** argv)\fC [static]\fP"
.PP
.SS "static void datetimeFunc (\fBsqlite3_context\fP * context, int argc, \fBsqlite3_value\fP ** argv)\fC [static]\fP"
.PP
.SS "static int decodeFlags (\fBMemPage\fP * pPage, int flagByte)\fC [static]\fP"
.PP
.SS "static int defragmentPage (\fBMemPage\fP * pPage)\fC [static]\fP"
.PP
.SS "static void destroyRootPage (\fBParse\fP * pParse, int iTable, int iDb)\fC [static]\fP"
.PP
.SS "static void destroyTable (\fBParse\fP * pParse, \fBTable\fP * pTab)\fC [static]\fP"
.PP
.SS "static void detachFunc (\fBsqlite3_context\fP * context, int NotUsed, \fBsqlite3_value\fP ** argv)\fC [static]\fP"
.PP
.SS "static void disableTerm (\fBWhereLevel\fP * pLevel, \fBWhereTerm\fP * pTerm)\fC [static]\fP"
.PP
.SS "static char* displayP4 (\fBOp\fP * pOp, char * zTemp, int nTemp)\fC [static]\fP"
.PP
.SS "static int dotlockCheckReservedLock (\fBsqlite3_file\fP * id, int * pResOut)\fC [static]\fP"
.PP
.SS "static int dotlockClose (\fBsqlite3_file\fP * id)\fC [static]\fP"
.PP
.SS "static int dotlockLock (\fBsqlite3_file\fP * id, int eFileLock)\fC [static]\fP"
.PP
.SS "static int dotlockUnlock (\fBsqlite3_file\fP * id, int eFileLock)\fC [static]\fP"
.PP
.SS "static \fBi64\fP doubleToInt64 (double r)\fC [static]\fP"
.PP
.SS "static int doWalCallbacks (\fBsqlite3\fP * db)\fC [static]\fP"
.PP
.SS "static void downgradeAllSharedCacheTableLocks (\fBBtree\fP * p)\fC [static]\fP"
.PP
.SS "static void dropCell (\fBMemPage\fP * pPage, int idx, int sz, int * pRC)\fC [static]\fP"
.PP
.SS "static char* dup8bytes (\fBVdbe\fP * v, const char * in)\fC [static]\fP"
.PP
.SS "static int dupedExprNodeSize (\fBExpr\fP * p, int flags)\fC [static]\fP"
.PP
.SS "static int dupedExprSize (\fBExpr\fP * p, int flags)\fC [static]\fP"
.PP
.SS "static int dupedExprStructSize (\fBExpr\fP * p, int flags)\fC [static]\fP"
.PP
.SS "static double estLog (double N)\fC [static]\fP"
.PP
.SS "static char et_getdigit (LONGDOUBLE_TYPE * val, int * cnt)\fC [static]\fP"
.PP
.SS "static int evalConstExpr (\fBWalker\fP * pWalker, \fBExpr\fP * pExpr)\fC [static]\fP"
.PP
.SS "static int execExecSql (\fBsqlite3\fP * db, char ** pzErrMsg, const char * zSql)\fC [static]\fP"
.PP
.SS "static int execSql (\fBsqlite3\fP * db, char ** pzErrMsg, const char * zSql)\fC [static]\fP"
.PP
.SS "static void exprAnalyze (\fBSrcList\fP *, \fBWhereClause\fP *, int)\fC [static]\fP"
.PP
.SS "static void exprAnalyzeAll (\fBSrcList\fP * pTabList, \fBWhereClause\fP * pWC)\fC [static]\fP"
.PP
.SS "static void exprAnalyzeOrTerm (\fBSrcList\fP * pSrc, \fBWhereClause\fP * pWC, int idxTerm)\fC [static]\fP"
.PP
.SS "static void exprCodeBetween (\fBParse\fP * pParse, \fBExpr\fP * pExpr, int dest, int jumpIfTrue, int jumpIfNull)\fC [static]\fP"
.PP
.SS "static void exprCommute (\fBParse\fP * pParse, \fBExpr\fP * pExpr)\fC [static]\fP"
.PP
.SS "static \fBExpr\fP* exprDup (\fBsqlite3\fP * db, \fBExpr\fP * p, int flags, \fBu8\fP ** pzBuffer)\fC [static]\fP"
.PP
.SS "static int exprIsConst (\fBExpr\fP * p, int initFlag)\fC [static]\fP"
.PP
.SS "static \fBBitmask\fP exprListTableUsage (\fBWhereMaskSet\fP *, \fBExprList\fP *)\fC [static]\fP"
.PP
.SS "static int exprNodeIsConstant (\fBWalker\fP * pWalker, \fBExpr\fP * pExpr)\fC [static]\fP"
.PP
.SS "static \fBBitmask\fP exprSelectTableUsage (\fBWhereMaskSet\fP *, \fBSelect\fP *)\fC [static]\fP"
.PP
.SS "static void exprSetHeight (\fBExpr\fP * p)\fC [static]\fP"
.PP
.SS "static int exprStructSize (\fBExpr\fP * p)\fC [static]\fP"
.PP
.SS "static \fBBitmask\fP exprTableUsage (\fBWhereMaskSet\fP * pMaskSet, \fBExpr\fP * p)\fC [static]\fP"
.PP
.SS "static int exprWalkNoop (\fBWalker\fP * NotUsed, \fBExpr\fP * NotUsed2)\fC [static]\fP"
.PP
.SS "static int fcntlSizeHint (\fBunixFile\fP * pFile, \fBi64\fP nByte)\fC [static]\fP"
.PP
.SS "static const unsigned char* fetchPayload (\fBBtCursor\fP * pCur, int * pAmt, int skipKey)\fC [static]\fP"
.PP
.SS "static int fillInCell (\fBMemPage\fP * pPage, unsigned char * pCell, const void * pKey, \fBi64\fP nKey, const void * pData, int nData, int nZero, int * pnSize)\fC [static]\fP"
.PP
.SS "static void finalizeAggFunctions (\fBParse\fP * pParse, \fBAggInfo\fP * pAggInfo)\fC [static]\fP"
.PP
.SS "static \fBBtree\fP* findBtree (\fBsqlite3\fP * pErrorDb, \fBsqlite3\fP * pDb, const char * zDb)\fC [static]\fP"
.PP
.SS "static \fBCollSeq\fP* findCollSeqEntry (\fBsqlite3\fP * db, const char * zName, int create)\fC [static]\fP"
.PP
.SS "static int findCreateFileMode (const char * zPath, int flags, mode_t * pMode)\fC [static]\fP"
.PP
.SS "static \fBHashElem\fP* findElementGivenHash (const \fBHash\fP * pH, const char * pKey, int nKey, unsigned int h)\fC [static]\fP"
.PP
.SS "static int findInodeInfo (\fBunixFile\fP * pFile, \fBunixInodeInfo\fP ** ppInode)\fC [static]\fP"
.PP
.SS "static int findNextHostParameter (const char * zSql, int * pnToken)\fC [static]\fP"
.PP
.SS "static \fBu8\fP* findOverflowCell (\fBMemPage\fP * pPage, int iCell)\fC [static]\fP"
.PP
.SS "static \fBUnixUnusedFd\fP* findReusableFd (const char * zPath, int flags)\fC [static]\fP"
.PP
.SS "static \fBWhereTerm\fP* findTerm (\fBWhereClause\fP * pWC, int iCur, int iColumn, \fBBitmask\fP notReady, \fBu32\fP op, \fBIndex\fP * pIdx)\fC [static]\fP"
.PP
.SS "static \fBTrigger\fP* fkActionTrigger (\fBParse\fP * pParse, \fBTable\fP * pTab, \fBFKey\fP * pFKey, \fBExprList\fP * pChanges)\fC [static]\fP"
.PP
.SS "static void fkLookupParent (\fBParse\fP * pParse, int iDb, \fBTable\fP * pTab, \fBIndex\fP * pIdx, \fBFKey\fP * pFKey, int * aiCol, int regData, int nIncr, int isIgnore)\fC [static]\fP"
.PP
.SS "static void fkScanChildren (\fBParse\fP * pParse, \fBSrcList\fP * pSrc, \fBTable\fP * pTab, \fBIndex\fP * pIdx, \fBFKey\fP * pFKey, int * aiCol, int regData, int nIncr)\fC [static]\fP"
.PP
.SS "static void fkTriggerDelete (\fBsqlite3\fP * dbMem, \fBTrigger\fP * p)\fC [static]\fP"
.PP
.SS "static int flagPragma (\fBParse\fP * pParse, const char * zLeft, const char * zRight)\fC [static]\fP"
.PP
.SS "static int flattenSubquery (\fBParse\fP * pParse, \fBSelect\fP * p, int iFrom, int isAgg, int subqueryIsAgg)\fC [static]\fP"
.PP
.SS "static void freeEphemeralFunction (\fBsqlite3\fP * db, \fBFuncDef\fP * pDef)\fC [static]\fP"
.PP
.SS "static void freeIndex (\fBsqlite3\fP * db, \fBIndex\fP * p)\fC [static]\fP"
.PP
.SS "static void freeP4 (\fBsqlite3\fP * db, int p4type, void * p4)\fC [static]\fP"
.PP
.SS "static void freePage (\fBMemPage\fP * pPage, int * pRC)\fC [static]\fP"
.PP
.SS "static int freePage2 (\fBBtShared\fP * pBt, \fBMemPage\fP * pMemPage, \fBPgno\fP iPage)\fC [static]\fP"
.PP
.SS "static int freeSpace (\fBMemPage\fP * pPage, int start, int size)\fC [static]\fP"
.PP
.SS "static void freeTempSpace (\fBBtShared\fP * pBt)\fC [static]\fP"
.PP
.SS "static int full_fsync (int fd, int fullSync, int dataOnly)\fC [static]\fP"
.PP
.SS "static void functionDestroy (\fBsqlite3\fP * db, \fBFuncDef\fP * p)\fC [static]\fP"
.PP
.SS "static \fBFuncDef\fP* functionSearch (\fBFuncDefHash\fP * pHash, int h, const char * zFunc, int nFunc)\fC [static]\fP"
.PP
.SS "static void generateColumnNames (\fBParse\fP * pParse, \fBSrcList\fP * pTabList, \fBExprList\fP * pEList)\fC [static]\fP"
.PP
.SS "static void generateColumnTypes (\fBParse\fP * pParse, \fBSrcList\fP * pTabList, \fBExprList\fP * pEList)\fC [static]\fP"
.PP
.SS "static int generateOutputSubroutine (\fBParse\fP * pParse, \fBSelect\fP * p, \fBSelectDest\fP * pIn, \fBSelectDest\fP * pDest, int regReturn, int regPrev, \fBKeyInfo\fP * pKeyInfo, int p4type, int iBreak)\fC [static]\fP"
.PP
.SS "static void generateSortTail (\fBParse\fP * pParse, \fBSelect\fP * p, \fBVdbe\fP * v, int nColumn, \fBSelectDest\fP * pDest)\fC [static]\fP"
.PP
.SS "static int getAndInitPage (\fBBtShared\fP * pBt, \fBPgno\fP pgno, \fBMemPage\fP ** ppPage)\fC [static]\fP"
.PP
.SS "static int getAutoVacuum (const char * z)\fC [static]\fP"
.PP
.SS "static \fBu8\fP getBoolean (const char * z)\fC [static]\fP"
.PP
.SS "static int getDigits (const char * zDate,  ...)\fC [static]\fP"
.PP
.SS "static int getLockingMode (const char * z)\fC [static]\fP"
.PP
.SS "static \fBBitmask\fP getMask (\fBWhereMaskSet\fP * pMaskSet, int iCursor)\fC [static]\fP"
.PP
.SS "static int getOverflowPage (\fBBtShared\fP * pBt, \fBPgno\fP ovfl, \fBMemPage\fP ** ppPage, \fBPgno\fP * pPgnoNext)\fC [static]\fP"
.PP
.SS "static \fBTriggerPrg\fP* getRowTrigger (\fBParse\fP * pParse, \fBTrigger\fP * pTrigger, \fBTable\fP * pTab, int orconf)\fC [static]\fP"
.PP
.SS "static \fBu8\fP getSafetyLevel (const char * z)\fC [static]\fP"
.PP
.SS "static int getTempStore (const char * z)\fC [static]\fP"
.PP
.SS "static void groupConcatFinalize (\fBsqlite3_context\fP * context)\fC [static]\fP"
.PP
.SS "static void groupConcatStep (\fBsqlite3_context\fP * context, int argc, \fBsqlite3_value\fP ** argv)\fC [static]\fP"
.PP
.SS "static int growOpArray (\fBVdbe\fP * p)\fC [static]\fP"
.PP
.SS "static int hasHotJournal (\fBPager\fP * pPager, int * pExists)\fC [static]\fP"
.PP
.SS "static void heightOfExpr (\fBExpr\fP * p, int * pnHeight)\fC [static]\fP"
.PP
.SS "static void heightOfExprList (\fBExprList\fP * p, int * pnHeight)\fC [static]\fP"
.PP
.SS "static void heightOfSelect (\fBSelect\fP * p, int * pnHeight)\fC [static]\fP"
.PP
.SS "static void hexFunc (\fBsqlite3_context\fP * context, int argc, \fBsqlite3_value\fP ** argv)\fC [static]\fP"
.PP
.SS "static \fBu8\fP hexToInt (int h)\fC [static]\fP"
.PP
.SS "static int identLength (const char * z)\fC [static]\fP"
.PP
.SS "static void identPut (char * z, int * pIdx, char * zSignedIdent)\fC [static]\fP"
.PP
.SS "static void importVtabErrMsg (\fBVdbe\fP * p, \fBsqlite3_vtab\fP * pVtab)\fC [static]\fP"
.PP
.SS "static int incrVacuumStep (\fBBtShared\fP * pBt, \fBPgno\fP nFin, \fBPgno\fP iLastPg)\fC [static]\fP"
.PP
.SS "static void insertCell (\fBMemPage\fP * pPage, int i, \fBu8\fP * pCell, int sz, \fBu8\fP * pTemp, \fBPgno\fP iChild, int * pRC)\fC [static]\fP"
.PP
.SS "static void insertElement (\fBHash\fP * pH, struct _ht * pEntry, \fBHashElem\fP * pNew)\fC [static]\fP"
.PP
.SS "static void invalidateAllOverflowCache (\fBBtShared\fP * pBt)\fC [static]\fP"
.PP
.SS "static void invalidateCursorsOnModifiedBtrees (\fBsqlite3\fP * db)\fC [static]\fP"
.PP
.SS "static void invalidateIncrblobCursors (\fBBtree\fP * pBtree, \fBi64\fP iRow, int isClearTable)\fC [static]\fP"
.PP
.SS "static void invalidateOverflowCache (\fBBtCursor\fP * pCur)\fC [static]\fP"
.PP
.SS "static int invalidateTempStorage (\fBParse\fP * pParse)\fC [static]\fP"
.PP
.SS "IOMETHODS (posixIoFinder, posixIoMethods, 2, unixClose, unixLock, unixUnlock, unixCheckReservedLock)"
.PP
.SS "static int isAppropriateForFactoring (\fBExpr\fP * p)\fC [static]\fP"
.PP
.SS "static int isCandidateForInOpt (\fBSelect\fP * p)\fC [static]\fP"
.PP
.SS "static int isDate (\fBsqlite3_context\fP * context, int argc, \fBsqlite3_value\fP ** argv, \fBDateTime\fP * p)\fC [static]\fP"
.PP
.SS "static int isFatalError (int rc)\fC [static]\fP"
.PP
.SS "static int isLikeOrGlob (\fBParse\fP * pParse, \fBExpr\fP * pExpr, \fBExpr\fP ** ppPrefix, int * pisComplete, int * pnoCase)\fC [static]\fP"
.PP
.SS "static int isLookaside (\fBsqlite3\fP * db, void * p)\fC [static]\fP"
.PP
.SS "static int isMatchOfColumn (\fBExpr\fP * pExpr)\fC [static]\fP"
.PP
.SS "static \fBTable\fP* isSimpleCount (\fBSelect\fP * p, \fBAggInfo\fP * pAggInfo)\fC [static]\fP"
.PP
.SS "static int isSortingIndex (\fBParse\fP * pParse, \fBWhereMaskSet\fP * pMaskSet, \fBIndex\fP * pIdx, int base, \fBExprList\fP * pOrderBy, int nEqCol, int * pbRev)\fC [static]\fP"
.PP
.SS "static \fBi64\fP journalHdrOffset (\fBPager\fP * pPager)\fC [static]\fP"
.PP
.SS "static void juliandayFunc (\fBsqlite3_context\fP * context, int argc, \fBsqlite3_value\fP ** argv)\fC [static]\fP"
.PP
.SS "static \fBKeyInfo\fP* keyInfoFromExprList (\fBParse\fP * pParse, \fBExprList\fP * pList)\fC [static]\fP"
.PP
.SS "static int keywordCode (const char * z, int n)\fC [static]\fP"
.PP
.SS "static void last_insert_rowid (\fBsqlite3_context\fP * context, int NotUsed, \fBsqlite3_value\fP ** NotUsed2)\fC [static]\fP"
.PP
.SS "static void lengthFunc (\fBsqlite3_context\fP * context, int argc, \fBsqlite3_value\fP ** argv)\fC [static]\fP"
.PP
.SS "static void likeFunc (\fBsqlite3_context\fP * context, int argc, \fBsqlite3_value\fP ** argv)\fC [static]\fP"
.PP
.SS "static void loadAnalysis (\fBParse\fP * pParse, int iDb)\fC [static]\fP"
.PP
.SS "static void loadExt (\fBsqlite3_context\fP * context, int argc, \fBsqlite3_value\fP ** argv)\fC [static]\fP"
.PP
.SS "static \fBsqlite3_int64\fP localtimeOffset (\fBDateTime\fP * p)\fC [static]\fP"
.PP
.SS "static int locateFkeyIndex (\fBParse\fP * pParse, \fBTable\fP * pParent, \fBFKey\fP * pFKey, \fBIndex\fP ** ppIdx, int ** paiCol)\fC [static]\fP"
.PP
.SS "static int lockBtree (\fBBtShared\fP * pBt)\fC [static]\fP"
.PP
.SS "static void lockBtreeMutex (\fBBtree\fP * p)\fC [static]\fP"
.PP
.SS "static void logBadConnection (const char * zType)\fC [static]\fP"
.PP
.SS "static int lookupName (\fBParse\fP * pParse, const char * zDb, const char * zTab, const char * zCol, \fBNameContext\fP * pNC, \fBExpr\fP * pExpr)\fC [static]\fP"
.PP
.SS "static void lowerFunc (\fBsqlite3_context\fP * context, int argc, \fBsqlite3_value\fP ** argv)\fC [static]\fP"
.PP
.SS "static int mallocWithAlarm (int n, void ** pp)\fC [static]\fP"
.PP
.SS "static int matchQuality (\fBFuncDef\fP * p, int nArg, \fBu8\fP enc)\fC [static]\fP"
.PP
.SS "static int memjrnlClose (\fBsqlite3_file\fP * pJfd)\fC [static]\fP"
.PP
.SS "static int memjrnlFileSize (\fBsqlite3_file\fP * pJfd, \fBsqlite_int64\fP * pSize)\fC [static]\fP"
.PP
.SS "static int memjrnlRead (\fBsqlite3_file\fP * pJfd, void * zBuf, int iAmt, \fBsqlite_int64\fP iOfst)\fC [static]\fP"
.PP
.SS "static int memjrnlSync (\fBsqlite3_file\fP * NotUsed, int NotUsed2)\fC [static]\fP"
.PP
.SS "static int memjrnlTruncate (\fBsqlite3_file\fP * pJfd, \fBsqlite_int64\fP size)\fC [static]\fP"
.PP
.SS "static int memjrnlWrite (\fBsqlite3_file\fP * pJfd, const void * zBuf, int iAmt, \fBsqlite_int64\fP iOfst)\fC [static]\fP"
.PP
.SS "static void minMaxFinalize (\fBsqlite3_context\fP * context)\fC [static]\fP"
.PP
.SS "static void minmaxFunc (\fBsqlite3_context\fP * context, int argc, \fBsqlite3_value\fP ** argv)\fC [static]\fP"
.PP
.SS "static \fBu8\fP minMaxQuery (\fBSelect\fP * p)\fC [static]\fP"
.PP
.SS "static void minmaxStep (\fBsqlite3_context\fP * context, int NotUsed, \fBsqlite3_value\fP ** argv)\fC [static]\fP"
.PP
.SS "static int modifyPagePointer (\fBMemPage\fP * pPage, \fBPgno\fP iFrom, \fBPgno\fP iTo, \fBu8\fP eType)\fC [static]\fP"
.PP
.SS "static int moveToChild (\fBBtCursor\fP * pCur, \fBu32\fP newPgno)\fC [static]\fP"
.PP
.SS "static int moveToLeftmost (\fBBtCursor\fP * pCur)\fC [static]\fP"
.PP
.SS "static void moveToParent (\fBBtCursor\fP * pCur)\fC [static]\fP"
.PP
.SS "static int moveToRightmost (\fBBtCursor\fP * pCur)\fC [static]\fP"
.PP
.SS "static int moveToRoot (\fBBtCursor\fP * pCur)\fC [static]\fP"
.PP
.SS "static int multiSelect (\fBParse\fP * pParse, \fBSelect\fP * p, \fBSelectDest\fP * pDest)\fC [static]\fP"
.PP
.SS "static \fBCollSeq\fP* multiSelectCollSeq (\fBParse\fP * pParse, \fBSelect\fP * p, int iCol)\fC [static]\fP"
.PP
.SS "static int multiSelectOrderBy (\fBParse\fP * pParse, \fBSelect\fP * p, \fBSelectDest\fP * pDest)\fC [static]\fP"
.PP
.SS "static int newDatabase (\fBBtShared\fP * pBt)\fC [static]\fP"
.PP
.SS "static int nocaseCollatingFunc (void * NotUsed, int nKey1, const void * pKey1, int nKey2, const void * pKey2)\fC [static]\fP"
.PP
.SS "static int nolockCheckReservedLock (\fBsqlite3_file\fP * NotUsed, int * pResOut)\fC [static]\fP"
.PP
.SS "static int nolockClose (\fBsqlite3_file\fP * id)\fC [static]\fP"
.PP
.SS "static int nolockLock (\fBsqlite3_file\fP * NotUsed, int NotUsed2)\fC [static]\fP"
.PP
.SS "static int nolockUnlock (\fBsqlite3_file\fP * NotUsed, int NotUsed2)\fC [static]\fP"
.PP
.SS "static \fBsqlite3_mutex\fP* noopMutexAlloc (int id)\fC [static]\fP"
.PP
.SS "static int noopMutexEnd (void)\fC [static]\fP"
.PP
.SS "static void noopMutexEnter (\fBsqlite3_mutex\fP * p)\fC [static]\fP"
.PP
.SS "static void noopMutexFree (\fBsqlite3_mutex\fP * p)\fC [static]\fP"
.PP
.SS "static int noopMutexInit (void)\fC [static]\fP"
.PP
.SS "static void noopMutexLeave (\fBsqlite3_mutex\fP * p)\fC [static]\fP"
.PP
.SS "static int noopMutexTry (\fBsqlite3_mutex\fP * p)\fC [static]\fP"
.PP
.SS "static void nullifFunc (\fBsqlite3_context\fP * context, int NotUsed, \fBsqlite3_value\fP ** argv)\fC [static]\fP"
.PP
.SS "static int openDatabase (const char * zFilename, \fBsqlite3\fP ** ppDb, unsigned flags, const char * zVfs)\fC [static]\fP"
.PP
.SS "static int openDirectory (const char * zFilename, int * pFd)\fC [static]\fP"
.PP
.SS "static void openStatTable (\fBParse\fP * pParse, int iDb, int iStatCur, const char * zWhere)\fC [static]\fP"
.PP
.SS "static int openSubJournal (\fBPager\fP * pPager)\fC [static]\fP"
.PP
.SS "static \fBu16\fP operatorMask (int op)\fC [static]\fP"
.PP
.SS "static int pageInJournal (\fBPgHdr\fP * pPg)\fC [static]\fP"
.PP
.SS "static \fBu32\fP pager_cksum (\fBPager\fP * pPager, const \fBu8\fP * aData)\fC [static]\fP"
.PP
.SS "static int pager_delmaster (\fBPager\fP * pPager, const char * zMaster)\fC [static]\fP"
.PP
.SS "static int pager_end_transaction (\fBPager\fP * pPager, int hasMaster)\fC [static]\fP"
.PP
.SS "static int pager_error (\fBPager\fP * pPager, int rc)\fC [static]\fP"
.PP
.SS "static int pager_incr_changecounter (\fBPager\fP * pPager, int isDirectMode)\fC [static]\fP"
.PP
.SS "static \fBPgHdr\fP* pager_lookup (\fBPager\fP * pPager, \fBPgno\fP pgno)\fC [static]\fP"
.PP
.SS "static int pager_open_journal (\fBPager\fP * pPager)\fC [static]\fP"
.PP
.SS "static int pager_playback (\fBPager\fP * pPager, int isHot)\fC [static]\fP"
.PP
.SS "static int pager_playback_one_page (\fBPager\fP * pPager, \fBi64\fP * pOffset, \fBBitvec\fP * pDone, int isMainJrnl, int isSavepnt)\fC [static]\fP"
.PP
.SS "static void pager_reset (\fBPager\fP * pPager)\fC [static]\fP"
.PP
.SS "static int pager_truncate (\fBPager\fP * pPager, \fBPgno\fP nPage)\fC [static]\fP"
.PP
.SS "static void pager_unlock (\fBPager\fP * pPager)\fC [static]\fP"
.PP
.SS "static int pager_wait_on_lock (\fBPager\fP * pPager, int locktype)\fC [static]\fP"
.PP
.SS "static int pager_write (\fBPgHdr\fP * pPg)\fC [static]\fP"
.PP
.SS "static int pager_write_pagelist (\fBPager\fP * pPager, \fBPgHdr\fP * pList)\fC [static]\fP"
.PP
.SS "static int pagerBeginReadTransaction (\fBPager\fP * pPager)\fC [static]\fP"
.PP
.SS "static void pageReinit (\fBDbPage\fP * pData)\fC [static]\fP"
.PP
.SS "static int pagerLockDb (\fBPager\fP * pPager, int eLock)\fC [static]\fP"
.PP
.SS "static int pagerOpentemp (\fBPager\fP * pPager, \fBsqlite3_file\fP * pFile, int vfsFlags)\fC [static]\fP"
.PP
.SS "static int pagerOpenWalIfPresent (\fBPager\fP * pPager)\fC [static]\fP"
.PP
.SS "static int pagerPagecount (\fBPager\fP * pPager, \fBPgno\fP * pnPage)\fC [static]\fP"
.PP
.SS "static int pagerPlaybackSavepoint (\fBPager\fP * pPager, \fBPagerSavepoint\fP * pSavepoint)\fC [static]\fP"
.PP
.SS "static int pagerRollbackWal (\fBPager\fP * pPager)\fC [static]\fP"
.PP
.SS "static int pagerStress (void * p, \fBPgHdr\fP * pPg)\fC [static]\fP"
.PP
.SS "static int pagerSyncHotJournal (\fBPager\fP * pPager)\fC [static]\fP"
.PP
.SS "static int pagerUndoCallback (void * pCtx, \fBPgno\fP iPg)\fC [static]\fP"
.PP
.SS "static void pagerUnlockAndRollback (\fBPager\fP * pPager)\fC [static]\fP"
.PP
.SS "static int pagerUnlockDb (\fBPager\fP * pPager, int eLock)\fC [static]\fP"
.PP
.SS "static void pagerUnlockIfUnused (\fBPager\fP * pPager)\fC [static]\fP"
.PP
.SS "static int pagerUseWal (\fBPager\fP * pPager)\fC [static]\fP"
.PP
.SS "static int pagerWalFrames (\fBPager\fP * pPager, \fBPgHdr\fP * pList, \fBPgno\fP nTruncate, int isCommit, int sync_flags)\fC [static]\fP"
.PP
.SS "static int parseDateOrTime (\fBsqlite3_context\fP * context, const char * zDate, \fBDateTime\fP * p)\fC [static]\fP"
.PP
.SS "static int parseHhMmSs (const char * zDate, \fBDateTime\fP * p)\fC [static]\fP"
.PP
.SS "static int parseModifier (const char * zMod, \fBDateTime\fP * p)\fC [static]\fP"
.PP
.SS "static int parseTimezone (const char * zDate, \fBDateTime\fP * p)\fC [static]\fP"
.PP
.SS "static int parseYyyyMmDd (const char * zDate, \fBDateTime\fP * p)\fC [static]\fP"
.PP
.SS "static int patternCompare (const \fBu8\fP * zPattern, const \fBu8\fP * zString, const struct \fBcompareInfo\fP * pInfo, const int esc)\fC [static]\fP"
.PP
.SS "static void* pcache1Alloc (int nByte)\fC [static]\fP"
.PP
.SS "static \fBPgHdr1\fP* pcache1AllocPage (\fBPCache1\fP * pCache)\fC [static]\fP"
.PP
.SS "static void pcache1Cachesize (\fBsqlite3_pcache\fP * p, int nMax)\fC [static]\fP"
.PP
.SS "static \fBsqlite3_pcache\fP* pcache1Create (int szPage, int bPurgeable)\fC [static]\fP"
.PP
.SS "static void pcache1Destroy (\fBsqlite3_pcache\fP * p)\fC [static]\fP"
.PP
.SS "static void pcache1EnforceMaxPage (void)\fC [static]\fP"
.PP
.SS "static void* pcache1Fetch (\fBsqlite3_pcache\fP * p, unsigned int iKey, int createFlag)\fC [static]\fP"
.PP
.SS "static void pcache1Free (void * p)\fC [static]\fP"
.PP
.SS "static void pcache1FreePage (\fBPgHdr1\fP * p)\fC [static]\fP"
.PP
.SS "static int pcache1Init (void * NotUsed)\fC [static]\fP"
.PP
.SS "static int pcache1Pagecount (\fBsqlite3_pcache\fP * p)\fC [static]\fP"
.PP
.SS "static void pcache1PinPage (\fBPgHdr1\fP * pPage)\fC [static]\fP"
.PP
.SS "static void pcache1Rekey (\fBsqlite3_pcache\fP * p, void * pPg, unsigned int iOld, unsigned int iNew)\fC [static]\fP"
.PP
.SS "static void pcache1RemoveFromHash (\fBPgHdr1\fP * pPage)\fC [static]\fP"
.PP
.SS "static int pcache1ResizeHash (\fBPCache1\fP * p)\fC [static]\fP"
.PP
.SS "static void pcache1Shutdown (void * NotUsed)\fC [static]\fP"
.PP
.SS "static void pcache1Truncate (\fBsqlite3_pcache\fP * p, unsigned int iLimit)\fC [static]\fP"
.PP
.SS "static void pcache1TruncateUnsafe (\fBPCache1\fP * pCache, unsigned int iLimit)\fC [static]\fP"
.PP
.SS "static int pcache1UnderMemoryPressure (\fBPCache1\fP * pCache)\fC [static]\fP"
.PP
.SS "static void pcache1Unpin (\fBsqlite3_pcache\fP * p, void * pPg, int reuseUnlikely)\fC [static]\fP"
.PP
.SS "static void pcacheAddToDirtyList (\fBPgHdr\fP * pPage)\fC [static]\fP"
.PP
.SS "static \fBPgHdr\fP* pcacheMergeDirtyList (\fBPgHdr\fP * pA, \fBPgHdr\fP * pB)\fC [static]\fP"
.PP
.SS "static void pcacheRemoveFromDirtyList (\fBPgHdr\fP * pPage)\fC [static]\fP"
.PP
.SS "static \fBPgHdr\fP* pcacheSortDirtyList (\fBPgHdr\fP * pIn)\fC [static]\fP"
.PP
.SS "static void pcacheUnpin (\fBPgHdr\fP * p)\fC [static]\fP"
.PP
.SS "static \fBsqlite3_mutex\fP* pthreadMutexAlloc (int iType)\fC [static]\fP"
.PP
.SS "static int pthreadMutexEnd (void)\fC [static]\fP"
.PP
.SS "static void pthreadMutexEnter (\fBsqlite3_mutex\fP * p)\fC [static]\fP"
.PP
.SS "static void pthreadMutexFree (\fBsqlite3_mutex\fP * p)\fC [static]\fP"
.PP
.SS "static int pthreadMutexInit (void)\fC [static]\fP"
.PP
.SS "static void pthreadMutexLeave (\fBsqlite3_mutex\fP * p)\fC [static]\fP"
.PP
.SS "static int pthreadMutexTry (\fBsqlite3_mutex\fP * p)\fC [static]\fP"
.PP
.SS "static int ptrmapGet (\fBBtShared\fP * pBt, \fBPgno\fP key, \fBu8\fP * pEType, \fBPgno\fP * pPgno)\fC [static]\fP"
.PP
.SS "static \fBPgno\fP ptrmapPageno (\fBBtShared\fP * pBt, \fBPgno\fP pgno)\fC [static]\fP"
.PP
.SS "static void ptrmapPut (\fBBtShared\fP * pBt, \fBPgno\fP key, \fBu8\fP eType, \fBPgno\fP parent, int * pRC)\fC [static]\fP"
.PP
.SS "static void ptrmapPutOvflPtr (\fBMemPage\fP * pPage, \fBu8\fP * pCell, int * pRC)\fC [static]\fP"
.PP
.SS "static void pushOntoSorter (\fBParse\fP * pParse, \fBExprList\fP * pOrderBy, \fBSelect\fP * pSelect, int regData)\fC [static]\fP"
.PP
.SS "static int querySharedCacheTableLock (\fBBtree\fP * p, \fBPgno\fP iTab, \fBu8\fP eLock)\fC [static]\fP"
.PP
.SS "static void quoteFunc (\fBsqlite3_context\fP * context, int argc, \fBsqlite3_value\fP ** argv)\fC [static]\fP"
.PP
.SS "static void randomBlob (\fBsqlite3_context\fP * context, int argc, \fBsqlite3_value\fP ** argv)\fC [static]\fP"
.PP
.SS "static \fBu8\fP randomByte (void)\fC [static]\fP"
.PP
.SS "static void randomFunc (\fBsqlite3_context\fP * context, int NotUsed, \fBsqlite3_value\fP ** NotUsed2)\fC [static]\fP"
.PP
.SS "static int read32bits (\fBsqlite3_file\fP * fd, \fBi64\fP offset, \fBu32\fP * pRes)\fC [static]\fP"
.PP
.SS "static int readDbPage (\fBPgHdr\fP * pPg)\fC [static]\fP"
.PP
.SS "static int readJournalHdr (\fBPager\fP * pPager, int isHot, \fBi64\fP journalSize, \fBu32\fP * pNRec, \fBu32\fP * pDbSize)\fC [static]\fP"
.PP
.SS "static int readMasterJournal (\fBsqlite3_file\fP * pJrnl, char * zMaster, \fBu32\fP nMaster)\fC [static]\fP"
.PP
.SS "static int readsTable (\fBParse\fP * p, int iStartAddr, int iDb, \fBTable\fP * pTab)\fC [static]\fP"
.PP
.SS "static int referencesOtherTables (\fBExprList\fP * pList, \fBWhereMaskSet\fP * pMaskSet, int iFirst, int iBase)\fC [static]\fP"
.PP
.SS "static int rehash (\fBHash\fP * pH, unsigned int new_size)\fC [static]\fP"
.PP
.SS "static void reindexDatabases (\fBParse\fP * pParse, char const * zColl)\fC [static]\fP"
.PP
.SS "static void reindexTable (\fBParse\fP * pParse, \fBTable\fP * pTab, char const * zColl)\fC [static]\fP"
.PP
.SS "static void releaseAllSavepoints (\fBPager\fP * pPager)\fC [static]\fP"
.PP
.SS "static void releaseInodeInfo (\fBunixFile\fP * pFile)\fC [static]\fP"
.PP
.SS "static void releaseMemArray (\fBMem\fP * p, int N)\fC [static]\fP"
.PP
.SS "static void releasePage (\fBMemPage\fP * pPage)\fC [static]\fP"
.PP
.SS "static void reloadTableSchema (\fBParse\fP * pParse, \fBTable\fP * pTab, const char * zName)\fC [static]\fP"
.PP
.SS "static int relocatePage (\fBBtShared\fP * pBt, \fBMemPage\fP * pDbPage, \fBu8\fP eType, \fBPgno\fP iPtrPage, \fBPgno\fP iFreePage, int isCommit)\fC [static]\fP"
.PP
.SS "static void removeElementGivenHash (\fBHash\fP * pH, \fBHashElem\fP * elem, unsigned int h)\fC [static]\fP"
.PP
.SS "static int removeFromSharingList (\fBBtShared\fP * pBt)\fC [static]\fP"
.PP
.SS "static void renameParentFunc (\fBsqlite3_context\fP * context, int NotUsed, \fBsqlite3_value\fP ** argv)\fC [static]\fP"
.PP
.SS "static void renameTableFunc (\fBsqlite3_context\fP * context, int NotUsed, \fBsqlite3_value\fP ** argv)\fC [static]\fP"
.PP
.SS "static void renameTriggerFunc (\fBsqlite3_context\fP * context, int NotUsed, \fBsqlite3_value\fP ** argv)\fC [static]\fP"
.PP
.SS "static void renderLogMsg (int iErrCode, const char * zFormat, va_list ap)\fC [static]\fP"
.PP
.SS "static void replaceFunc (\fBsqlite3_context\fP * context, int argc, \fBsqlite3_value\fP ** argv)\fC [static]\fP"
.PP
.SS "static void resetAccumulator (\fBParse\fP * pParse, \fBAggInfo\fP * pAggInfo)\fC [static]\fP"
.PP
.SS "static void resolveAlias (\fBParse\fP * pParse, \fBExprList\fP * pEList, int iCol, \fBExpr\fP * pExpr, const char * zType)\fC [static]\fP"
.PP
.SS "static int resolveAsName (\fBParse\fP * pParse, \fBExprList\fP * pEList, \fBExpr\fP * pE)\fC [static]\fP"
.PP
.SS "static int resolveAttachExpr (\fBNameContext\fP * pName, \fBExpr\fP * pExpr)\fC [static]\fP"
.PP
.SS "static int resolveCompoundOrderBy (\fBParse\fP * pParse, \fBSelect\fP * pSelect)\fC [static]\fP"
.PP
.SS "static int resolveExprStep (\fBWalker\fP * pWalker, \fBExpr\fP * pExpr)\fC [static]\fP"
.PP
.SS "static int resolveOrderByTermToExprList (\fBParse\fP * pParse, \fBSelect\fP * pSelect, \fBExpr\fP * pE)\fC [static]\fP"
.PP
.SS "static int resolveOrderGroupBy (\fBNameContext\fP * pNC, \fBSelect\fP * pSelect, \fBExprList\fP * pOrderBy, const char * zType)\fC [static]\fP"
.PP
.SS "static void resolveOutOfRangeError (\fBParse\fP * pParse, const char * zType, int i, int mx)\fC [static]\fP"
.PP
.SS "static void resolveP2Values (\fBVdbe\fP * p, int * pMaxFuncArgs)\fC [static]\fP"
.PP
.SS "static int resolveSelectStep (\fBWalker\fP * pWalker, \fBSelect\fP * p)\fC [static]\fP"
.PP
.SS "static void returnSingleInt (\fBParse\fP * pParse, const char * zLabel, \fBi64\fP value)\fC [static]\fP"
.PP
.SS "static void roundFunc (\fBsqlite3_context\fP * context, int argc, \fBsqlite3_value\fP ** argv)\fC [static]\fP"
.PP
.SS "static struct \fBRowSetEntry\fP* rowSetListToTree (struct \fBRowSetEntry\fP * pList)\fC [static]\fP"
.PP
.SS "static struct \fBRowSetEntry\fP* rowSetMerge (struct \fBRowSetEntry\fP * pA, struct \fBRowSetEntry\fP * pB)\fC [static]\fP"
.PP
.SS "static struct \fBRowSetEntry\fP* rowSetNDeepTree (struct \fBRowSetEntry\fP ** ppList, int iDepth)\fC [static]\fP"
.PP
.SS "static void rowSetSort (\fBRowSet\fP * p)\fC [static]\fP"
.PP
.SS "static void rowSetToList (\fBRowSet\fP * p)\fC [static]\fP"
.PP
.SS "static void rowSetTreeToList (struct \fBRowSetEntry\fP * pIn, struct \fBRowSetEntry\fP ** ppFirst, struct \fBRowSetEntry\fP ** ppLast)\fC [static]\fP"
.PP
.SS "static int saveAllCursors (\fBBtShared\fP * pBt, \fBPgno\fP iRoot, \fBBtCursor\fP * pExcept)\fC [static]\fP"
.PP
.SS "static int saveCursorPosition (\fBBtCursor\fP * pCur)\fC [static]\fP"
.PP
.SS "static void schemaIsValid (\fBParse\fP * pParse)\fC [static]\fP"
.PP
.SS "static int seekAndRead (\fBunixFile\fP * id, \fBsqlite3_int64\fP offset, void * pBuf, int cnt)\fC [static]\fP"
.PP
.SS "static int seekAndWrite (\fBunixFile\fP * id, \fBi64\fP offset, const void * pBuf, int cnt)\fC [static]\fP"
.PP
.SS "static void selectAddColumnTypeAndCollation (\fBParse\fP * pParse, int nCol, \fBColumn\fP * aCol, \fBSelect\fP * pSelect)\fC [static]\fP"
.PP
.SS "static int selectAddSubqueryTypeInfo (\fBWalker\fP * pWalker, \fBSelect\fP * p)\fC [static]\fP"
.PP
.SS "static int selectColumnsFromExprList (\fBParse\fP * pParse, \fBExprList\fP * pEList, int * pnCol, \fBColumn\fP ** paCol)\fC [static]\fP"
.PP
.SS "static int selectExpander (\fBWalker\fP * pWalker, \fBSelect\fP * p)\fC [static]\fP"
.PP
.SS "static void selectInnerLoop (\fBParse\fP * pParse, \fBSelect\fP * p, \fBExprList\fP * pEList, int srcTab, int nColumn, \fBExprList\fP * pOrderBy, int distinct, \fBSelectDest\fP * pDest, int iContinue, int iBreak)\fC [static]\fP"
.PP
.SS "static int selectNodeIsConstant (\fBWalker\fP * pWalker, \fBSelect\fP * NotUsed)\fC [static]\fP"
.PP
.SS "static const char* selectOpName (int id)\fC [static]\fP"
.PP
.SS "static int setChildPtrmaps (\fBMemPage\fP * pPage)\fC [static]\fP"
.PP
.SS "static void setDateTimeToCurrent (\fBsqlite3_context\fP * context, \fBDateTime\fP * p)\fC [static]\fP"
.PP
.SS "static void setJoinExpr (\fBExpr\fP * p, int iTable)\fC [static]\fP"
.PP
.SS "static void setLikeOptFlag (\fBsqlite3\fP * db, const char * zName, \fBu8\fP flagVal)\fC [static]\fP"
.PP
.SS "static void setPendingFd (\fBunixFile\fP * pFile)\fC [static]\fP"
.PP
.SS "static void setResultStrOrError (\fBsqlite3_context\fP * pCtx, const char * z, int n, \fBu8\fP enc, void(*)(void *) xDel)\fC [static]\fP"
.PP
.SS "static void setSectorSize (\fBPager\fP * pPager)\fC [static]\fP"
.PP
.SS "static int setSharedCacheTableLock (\fBBtree\fP * p, \fBPgno\fP iTable, \fBu8\fP eLock)\fC [static]\fP"
.PP
.SS "static int setupLookaside (\fBsqlite3\fP * db, void * pBuf, int sz, int cnt)\fC [static]\fP"
.PP
.SS "static void softHeapLimitEnforcer (void * NotUsed, \fBsqlite3_int64\fP NotUsed2, int allocSize)\fC [static]\fP"
.PP
.SS "static void sourceidFunc (\fBsqlite3_context\fP * context, int NotUsed, \fBsqlite3_value\fP ** NotUsed2)\fC [static]\fP"
.PP
.SS "static void spanBinaryExpr (\fBExprSpan\fP * pOut, \fBParse\fP * pParse, int op, \fBExprSpan\fP * pLeft, \fBExprSpan\fP * pRight)\fC [static]\fP"
.PP
.SS "static void spanExpr (\fBExprSpan\fP * pOut, \fBParse\fP * pParse, int op, \fBToken\fP * pValue)\fC [static]\fP"
.PP
.SS "static void spanSet (\fBExprSpan\fP * pOut, \fBToken\fP * pStart, \fBToken\fP * pEnd)\fC [static]\fP"
.PP
.SS "static void spanUnaryPostfix (\fBExprSpan\fP * pOut, \fBParse\fP * pParse, int op, \fBExprSpan\fP * pOperand, \fBToken\fP * pPostOp)\fC [static]\fP"
.PP
.SS "static void spanUnaryPrefix (\fBExprSpan\fP * pOut, \fBParse\fP * pParse, int op, \fBExprSpan\fP * pOperand, \fBToken\fP * pPreOp)\fC [static]\fP"
.PP
.SS "int sqlite2BtreeKeyCompare (\fBBtCursor\fP *, const void *, int, int, int *)"
.PP
.SS "SQLITE_API void* sqlite3_aggregate_context (\fBsqlite3_context\fP *, int nBytes)"
.PP
.SS "SQLITE_API SQLITE_DEPRECATED int sqlite3_aggregate_count (\fBsqlite3_context\fP *)"
.PP
.SS "SQLITE_API int sqlite3_auto_extension (void(*)(void) xEntryPoint)"
.PP
.SS "SQLITE_API int sqlite3_backup_finish (\fBsqlite3_backup\fP * p)"
.PP
.SS "SQLITE_API \fBsqlite3_backup\fP* sqlite3_backup_init (\fBsqlite3\fP * pDest, const char * zDestName, \fBsqlite3\fP * pSource, const char * zSourceName)"
.PP
.SS "SQLITE_API int sqlite3_backup_pagecount (\fBsqlite3_backup\fP * p)"
.PP
.SS "SQLITE_API int sqlite3_backup_remaining (\fBsqlite3_backup\fP * p)"
.PP
.SS "SQLITE_API int sqlite3_backup_step (\fBsqlite3_backup\fP * p, int nPage)"
.PP
.SS "SQLITE_API int sqlite3_bind_blob (\fBsqlite3_stmt\fP *, int, const void *, int n, void(*)(void *))"
.PP
.SS "SQLITE_API int sqlite3_bind_double (\fBsqlite3_stmt\fP *, int, double)"
.PP
.SS "SQLITE_API int sqlite3_bind_int (\fBsqlite3_stmt\fP *, int, int)"
.PP
.SS "SQLITE_API int sqlite3_bind_int64 (\fBsqlite3_stmt\fP * pStmt, int i, \fBsqlite_int64\fP iValue)"
.PP
.SS "SQLITE_API int sqlite3_bind_int64 (\fBsqlite3_stmt\fP *, int, \fBsqlite3_int64\fP)"
.PP
.SS "SQLITE_API int sqlite3_bind_null (\fBsqlite3_stmt\fP *, int)"
.PP
.SS "SQLITE_API int sqlite3_bind_parameter_count (\fBsqlite3_stmt\fP *)"
.PP
.SS "SQLITE_API int sqlite3_bind_parameter_index (\fBsqlite3_stmt\fP *, const char * zName)"
.PP
.SS "SQLITE_API const char* sqlite3_bind_parameter_name (\fBsqlite3_stmt\fP *, int)"
.PP
.SS "SQLITE_API int sqlite3_bind_text (\fBsqlite3_stmt\fP *, int, const char *, int n, void(*)(void *))"
.PP
.SS "SQLITE_API int sqlite3_bind_text16 (\fBsqlite3_stmt\fP *, int, const void *, int, void(*)(void *))"
.PP
.SS "SQLITE_API int sqlite3_bind_value (\fBsqlite3_stmt\fP *, int, const \fBsqlite3_value\fP *)"
.PP
.SS "SQLITE_API int sqlite3_bind_zeroblob (\fBsqlite3_stmt\fP *, int, int n)"
.PP
.SS "SQLITE_API int sqlite3_blob_bytes (\fBsqlite3_blob\fP *)"
.PP
.SS "SQLITE_API int sqlite3_blob_close (\fBsqlite3_blob\fP *)"
.PP
.SS "SQLITE_API int sqlite3_blob_open (\fBsqlite3\fP * db, const char * zDb, const char * zTable, const char * zColumn, \fBsqlite_int64\fP iRow, int flags, \fBsqlite3_blob\fP ** ppBlob)"
.PP
.SS "SQLITE_API int sqlite3_blob_open (\fBsqlite3\fP *, const char * zDb, const char * zTable, const char * zColumn, \fBsqlite3_int64\fP iRow, int flags, \fBsqlite3_blob\fP ** ppBlob)"
.PP
.SS "SQLITE_API int sqlite3_blob_read (\fBsqlite3_blob\fP *, void * Z, int N, int iOffset)"
.PP
.SS "SQLITE_API int sqlite3_blob_write (\fBsqlite3_blob\fP *, const void * z, int n, int iOffset)"
.PP
.SS "SQLITE_API int sqlite3_busy_handler (\fBsqlite3\fP *, int(*)(void *, int), void *)"
.PP
.SS "SQLITE_API int sqlite3_busy_timeout (\fBsqlite3\fP *, int ms)"
.PP
.SS "SQLITE_API int sqlite3_changes (\fBsqlite3\fP *)"
.PP
.SS "SQLITE_API int sqlite3_clear_bindings (\fBsqlite3_stmt\fP *)"
.PP
.SS "SQLITE_API int sqlite3_close (\fBsqlite3\fP *)"
.PP
.SS "SQLITE_API int sqlite3_collation_needed (\fBsqlite3\fP *, void *, void(*)(void *, \fBsqlite3\fP *, int eTextRep, const char *))"
.PP
.SS "SQLITE_API int sqlite3_collation_needed16 (\fBsqlite3\fP *, void *, void(*)(void *, \fBsqlite3\fP *, int eTextRep, const void *))"
.PP
.SS "SQLITE_API const void* sqlite3_column_blob (\fBsqlite3_stmt\fP *, int iCol)"
.PP
.SS "SQLITE_API int sqlite3_column_bytes (\fBsqlite3_stmt\fP *, int iCol)"
.PP
.SS "SQLITE_API int sqlite3_column_bytes16 (\fBsqlite3_stmt\fP *, int iCol)"
.PP
.SS "SQLITE_API int sqlite3_column_count (\fBsqlite3_stmt\fP * pStmt)"
.PP
.SS "SQLITE_API const char* sqlite3_column_database_name (\fBsqlite3_stmt\fP *, int)"
.PP
.SS "SQLITE_API const void* sqlite3_column_database_name16 (\fBsqlite3_stmt\fP *, int)"
.PP
.SS "SQLITE_API const char* sqlite3_column_decltype (\fBsqlite3_stmt\fP *, int)"
.PP
.SS "SQLITE_API const void* sqlite3_column_decltype16 (\fBsqlite3_stmt\fP *, int)"
.PP
.SS "SQLITE_API double sqlite3_column_double (\fBsqlite3_stmt\fP *, int iCol)"
.PP
.SS "SQLITE_API int sqlite3_column_int (\fBsqlite3_stmt\fP *, int iCol)"
.PP
.SS "SQLITE_API \fBsqlite3_int64\fP sqlite3_column_int64 (\fBsqlite3_stmt\fP *, int iCol)"
.PP
.SS "SQLITE_API const char* sqlite3_column_name (\fBsqlite3_stmt\fP *, int N)"
.PP
.SS "SQLITE_API const void* sqlite3_column_name16 (\fBsqlite3_stmt\fP *, int N)"
.PP
.SS "SQLITE_API const char* sqlite3_column_origin_name (\fBsqlite3_stmt\fP *, int)"
.PP
.SS "SQLITE_API const void* sqlite3_column_origin_name16 (\fBsqlite3_stmt\fP *, int)"
.PP
.SS "SQLITE_API const char* sqlite3_column_table_name (\fBsqlite3_stmt\fP *, int)"
.PP
.SS "SQLITE_API const void* sqlite3_column_table_name16 (\fBsqlite3_stmt\fP *, int)"
.PP
.SS "SQLITE_API const unsigned char* sqlite3_column_text (\fBsqlite3_stmt\fP *, int iCol)"
.PP
.SS "SQLITE_API const void* sqlite3_column_text16 (\fBsqlite3_stmt\fP *, int iCol)"
.PP
.SS "SQLITE_API int sqlite3_column_type (\fBsqlite3_stmt\fP *, int iCol)"
.PP
.SS "SQLITE_API \fBsqlite3_value\fP* sqlite3_column_value (\fBsqlite3_stmt\fP *, int iCol)"
.PP
.SS "SQLITE_API void* sqlite3_commit_hook (\fBsqlite3\fP *, int(*)(void *), void *)"
.PP
.SS "SQLITE_API const char* sqlite3_compileoption_get (int N)"
.PP
.SS "SQLITE_API int sqlite3_compileoption_used (const char * zOptName)"
.PP
.SS "SQLITE_API int sqlite3_complete (const char * sql)"
.PP
.SS "SQLITE_API int sqlite3_complete16 (const void * sql)"
.PP
.SS "SQLITE_API int sqlite3_config (int,  ...)"
.PP
.SS "SQLITE_API \fBsqlite3\fP* sqlite3_context_db_handle (\fBsqlite3_context\fP *)"
.PP
.SS "SQLITE_API int sqlite3_create_collation (\fBsqlite3\fP *, const char * zName, int eTextRep, void * pArg, int(*)(void *, int, const void *, int, const void *) xCompare)"
.PP
.SS "SQLITE_API int sqlite3_create_collation16 (\fBsqlite3\fP *, const void * zName, int eTextRep, void * pArg, int(*)(void *, int, const void *, int, const void *) xCompare)"
.PP
.SS "SQLITE_API int sqlite3_create_collation_v2 (\fBsqlite3\fP *, const char * zName, int eTextRep, void * pArg, int(*)(void *, int, const void *, int, const void *) xCompare, void(*)(void *) xDestroy)"
.PP
.SS "SQLITE_API int sqlite3_create_function (\fBsqlite3\fP * db, const char * zFunctionName, int nArg, int eTextRep, void * pApp, void(*)(\fBsqlite3_context\fP *, int, \fBsqlite3_value\fP **) xFunc, void(*)(\fBsqlite3_context\fP *, int, \fBsqlite3_value\fP **) xStep, void(*)(\fBsqlite3_context\fP *) xFinal)"
.PP
.SS "SQLITE_API int sqlite3_create_function16 (\fBsqlite3\fP * db, const void * zFunctionName, int nArg, int eTextRep, void * pApp, void(*)(\fBsqlite3_context\fP *, int, \fBsqlite3_value\fP **) xFunc, void(*)(\fBsqlite3_context\fP *, int, \fBsqlite3_value\fP **) xStep, void(*)(\fBsqlite3_context\fP *) xFinal)"
.PP
.SS "SQLITE_API int sqlite3_create_function_v2 (\fBsqlite3\fP * db, const char * zFunctionName, int nArg, int eTextRep, void * pApp, void(*)(\fBsqlite3_context\fP *, int, \fBsqlite3_value\fP **) xFunc, void(*)(\fBsqlite3_context\fP *, int, \fBsqlite3_value\fP **) xStep, void(*)(\fBsqlite3_context\fP *) xFinal, void(*)(void *) xDestroy)"
.PP
.SS "SQLITE_API int sqlite3_create_module (\fBsqlite3\fP * db, const char * zName, const \fBsqlite3_module\fP * p, void * pClientData)"
.PP
.SS "SQLITE_API int sqlite3_create_module_v2 (\fBsqlite3\fP * db, const char * zName, const \fBsqlite3_module\fP * p, void * pClientData, void(*)(void *) xDestroy)"
.PP
.SS "SQLITE_API int sqlite3_data_count (\fBsqlite3_stmt\fP * pStmt)"
.PP
.SS "SQLITE_API int sqlite3_db_config (\fBsqlite3\fP *, int op,  ...)"
.PP
.SS "SQLITE_API \fBsqlite3\fP* sqlite3_db_handle (\fBsqlite3_stmt\fP *)"
.PP
.SS "SQLITE_API \fBsqlite3_mutex\fP* sqlite3_db_mutex (\fBsqlite3\fP *)"
.PP
.SS "SQLITE_API int sqlite3_db_status (\fBsqlite3\fP *, int op, int * pCur, int * pHiwtr, int resetFlg)"
.PP
.SS "SQLITE_API int sqlite3_declare_vtab (\fBsqlite3\fP *, const char * zSQL)"
.PP
.SS "SQLITE_API int sqlite3_enable_load_extension (\fBsqlite3\fP * db, int onoff)"
.PP
.SS "SQLITE_API int sqlite3_enable_shared_cache (int)"
.PP
.SS "SQLITE_API int sqlite3_errcode (\fBsqlite3\fP * db)"
.PP
.SS "SQLITE_API const char* sqlite3_errmsg (\fBsqlite3\fP *)"
.PP
.SS "SQLITE_API const void* sqlite3_errmsg16 (\fBsqlite3\fP *)"
.PP
.SS "SQLITE_API int sqlite3_exec (\fBsqlite3\fP * db, const char * zSql, \fBsqlite3_callback\fP xCallback, void * pArg, char ** pzErrMsg)"
.PP
.SS "SQLITE_API int sqlite3_exec (\fBsqlite3\fP *, const char * sql, int(*)(void *, int, char **, char **) callback, void *, char ** errmsg)"
.PP
.SS "SQLITE_API SQLITE_DEPRECATED int sqlite3_expired (\fBsqlite3_stmt\fP *)"
.PP
.SS "SQLITE_API int sqlite3_extended_errcode (\fBsqlite3\fP * db)"
.PP
.SS "SQLITE_API int sqlite3_extended_result_codes (\fBsqlite3\fP *, int onoff)"
.PP
.SS "SQLITE_API int sqlite3_file_control (\fBsqlite3\fP *, const char * zDbName, int op, void *)"
.PP
.SS "SQLITE_API int sqlite3_finalize (\fBsqlite3_stmt\fP * pStmt)"
.PP
.SS "SQLITE_API void sqlite3_free (void *)"
.PP
.SS "SQLITE_API void sqlite3_free_table (char ** result)"
.PP
.SS "SQLITE_API int sqlite3_get_autocommit (\fBsqlite3\fP *)"
.PP
.SS "SQLITE_API void* sqlite3_get_auxdata (\fBsqlite3_context\fP *, int N)"
.PP
.SS "SQLITE_API int sqlite3_get_table (\fBsqlite3\fP * db, const char * zSql, char *** pazResult, int * pnRow, int * pnColumn, char ** pzErrmsg)"
.PP
.SS "static int sqlite3_get_table_cb (void * pArg, int nCol, char ** argv, char ** colv)\fC [static]\fP"
.PP
.SS "SQLITE_API SQLITE_DEPRECATED int sqlite3_global_recover (void)"
.PP
.SS "SQLITE_API int sqlite3_initialize (void)"
.PP
.SS "SQLITE_API void sqlite3_interrupt (\fBsqlite3\fP *)"
.PP
.SS "SQLITE_API \fBsqlite3_int64\fP sqlite3_last_insert_rowid (\fBsqlite3\fP *)"
.PP
.SS "SQLITE_API const char* sqlite3_libversion (void)"
.PP
.SS "SQLITE_API int sqlite3_libversion_number (void)"
.PP
.SS "SQLITE_API int sqlite3_limit (\fBsqlite3\fP *, int id, int newVal)"
.PP
.SS "SQLITE_API int sqlite3_load_extension (\fBsqlite3\fP * db, const char * zFile, const char * zProc, char ** pzErrMsg)"
.PP
.SS "SQLITE_API void sqlite3_log (int iErrCode, const char * zFormat,  ...)"
.PP
.SS "SQLITE_API void* sqlite3_malloc (int)"
.PP
.SS "SQLITE_API int sqlite3_memory_alarm (void(*)(void *pArg, \fBsqlite3_int64\fP used, int N) xCallback, void * pArg, \fBsqlite3_int64\fP iThreshold)"
.PP
.SS "SQLITE_API SQLITE_DEPRECATED int sqlite3_memory_alarm (void(*)(void *, \fBsqlite3_int64\fP, int), void *, \fBsqlite3_int64\fP)"
.PP
.SS "SQLITE_API \fBsqlite3_int64\fP sqlite3_memory_highwater (int resetFlag)"
.PP
.SS "SQLITE_API \fBsqlite3_int64\fP sqlite3_memory_used (void)"
.PP
.SS "SQLITE_API char* sqlite3_mprintf (const char *,  ...)"
.PP
.SS "SQLITE_API \fBsqlite3_mutex\fP* sqlite3_mutex_alloc (int)"
.PP
.SS "SQLITE_API void sqlite3_mutex_enter (\fBsqlite3_mutex\fP *)"
.PP
.SS "SQLITE_API void sqlite3_mutex_free (\fBsqlite3_mutex\fP *)"
.PP
.SS "SQLITE_API void sqlite3_mutex_leave (\fBsqlite3_mutex\fP *)"
.PP
.SS "SQLITE_API int sqlite3_mutex_try (\fBsqlite3_mutex\fP *)"
.PP
.SS "SQLITE_API \fBsqlite3_stmt\fP* sqlite3_next_stmt (\fBsqlite3\fP * pDb, \fBsqlite3_stmt\fP * pStmt)"
.PP
.SS "SQLITE_API int sqlite3_open (const char * filename, \fBsqlite3\fP ** ppDb)"
.PP
.SS "SQLITE_API int sqlite3_open16 (const void * filename, \fBsqlite3\fP ** ppDb)"
.PP
.SS "SQLITE_API int sqlite3_open_v2 (const char * filename, \fBsqlite3\fP ** ppDb, int flags, const char * zVfs)"
.PP
.SS "SQLITE_API int sqlite3_os_end (void)"
.PP
.SS "SQLITE_API int sqlite3_os_init (void)"
.PP
.SS "SQLITE_API int sqlite3_overload_function (\fBsqlite3\fP *, const char * zFuncName, int nArg)"
.PP
.SS "SQLITE_API int sqlite3_prepare (\fBsqlite3\fP * db, const char * zSql, int nByte, \fBsqlite3_stmt\fP ** ppStmt, const char ** pzTail)"
.PP
.SS "SQLITE_API int sqlite3_prepare16 (\fBsqlite3\fP * db, const void * zSql, int nByte, \fBsqlite3_stmt\fP ** ppStmt, const void ** pzTail)"
.PP
.SS "SQLITE_API int sqlite3_prepare16_v2 (\fBsqlite3\fP * db, const void * zSql, int nByte, \fBsqlite3_stmt\fP ** ppStmt, const void ** pzTail)"
.PP
.SS "SQLITE_API int sqlite3_prepare_v2 (\fBsqlite3\fP * db, const char * zSql, int nByte, \fBsqlite3_stmt\fP ** ppStmt, const char ** pzTail)"
.PP
.SS "SQLITE_API void* sqlite3_profile (\fBsqlite3\fP * db, void(*)(void *, const char *, \fBsqlite_uint64\fP) xProfile, void * pArg)"
.PP
.SS "SQLITE_API SQLITE_EXPERIMENTAL void* sqlite3_profile (\fBsqlite3\fP *, void(*)(void *, const char *, \fBsqlite3_uint64\fP) xProfile, void *)"
.PP
.SS "SQLITE_API void sqlite3_progress_handler (\fBsqlite3\fP *, int, int(*)(void *), void *)"
.PP
.SS "SQLITE_API void sqlite3_randomness (int N, void * P)"
.PP
.SS "SQLITE_API void* sqlite3_realloc (void *, int)"
.PP
.SS "SQLITE_API int sqlite3_release_memory (int)"
.PP
.SS "SQLITE_API int sqlite3_reset (\fBsqlite3_stmt\fP * pStmt)"
.PP
.SS "SQLITE_API void sqlite3_reset_auto_extension (void)"
.PP
.SS "SQLITE_API void sqlite3_result_blob (\fBsqlite3_context\fP *, const void *, int, void(*)(void *))"
.PP
.SS "SQLITE_API void sqlite3_result_double (\fBsqlite3_context\fP *, double)"
.PP
.SS "SQLITE_API void sqlite3_result_error (\fBsqlite3_context\fP *, const char *, int)"
.PP
.SS "SQLITE_API void sqlite3_result_error16 (\fBsqlite3_context\fP *, const void *, int)"
.PP
.SS "SQLITE_API void sqlite3_result_error_code (\fBsqlite3_context\fP *, int)"
.PP
.SS "SQLITE_API void sqlite3_result_error_nomem (\fBsqlite3_context\fP *)"
.PP
.SS "SQLITE_API void sqlite3_result_error_toobig (\fBsqlite3_context\fP *)"
.PP
.SS "SQLITE_API void sqlite3_result_int (\fBsqlite3_context\fP *, int)"
.PP
.SS "SQLITE_API void sqlite3_result_int64 (\fBsqlite3_context\fP *, \fBsqlite3_int64\fP)"
.PP
.SS "SQLITE_API void sqlite3_result_null (\fBsqlite3_context\fP *)"
.PP
.SS "SQLITE_API void sqlite3_result_text (\fBsqlite3_context\fP *, const char *, int, void(*)(void *))"
.PP
.SS "SQLITE_API void sqlite3_result_text16 (\fBsqlite3_context\fP *, const void *, int, void(*)(void *))"
.PP
.SS "SQLITE_API void sqlite3_result_text16be (\fBsqlite3_context\fP *, const void *, int, void(*)(void *))"
.PP
.SS "SQLITE_API void sqlite3_result_text16le (\fBsqlite3_context\fP *, const void *, int, void(*)(void *))"
.PP
.SS "SQLITE_API void sqlite3_result_value (\fBsqlite3_context\fP *, \fBsqlite3_value\fP *)"
.PP
.SS "SQLITE_API void sqlite3_result_zeroblob (\fBsqlite3_context\fP *, int n)"
.PP
.SS "SQLITE_API void* sqlite3_rollback_hook (\fBsqlite3\fP *, void(*)(void *), void *)"
.PP
.SS "SQLITE_API int sqlite3_rtree_geometry_callback (\fBsqlite3\fP * db, const char * zGeom, int(*)(\fBsqlite3_rtree_geometry\fP *, int nCoord, double *aCoord, int *pRes) xGeom, void * pContext)"
.PP
.SS "SQLITE_API int sqlite3_set_authorizer (\fBsqlite3\fP *, int(*)(void *, int, const char *, const char *, const char *, const char *) xAuth, void * pUserData)"
.PP
.SS "SQLITE_API void sqlite3_set_auxdata (\fBsqlite3_context\fP *, int N, void *, void(*)(void *))"
.PP
.SS "SQLITE_API int sqlite3_shutdown (void)"
.PP
.SS "SQLITE_API int sqlite3_sleep (int)"
.PP
.SS "SQLITE_API char* sqlite3_snprintf (int, char *, const char *,  ...)"
.PP
.SS "SQLITE_API SQLITE_DEPRECATED void sqlite3_soft_heap_limit (int N)"
.PP
.SS "SQLITE_API \fBsqlite3_int64\fP sqlite3_soft_heap_limit64 (\fBsqlite3_int64\fP N)"
.PP
.SS "SQLITE_API const char* sqlite3_sourceid (void)"
.PP
.SS "SQLITE_API const char* sqlite3_sql (\fBsqlite3_stmt\fP * pStmt)"
.PP
.SS "SQLITE_API int sqlite3_status (int op, int * pCurrent, int * pHighwater, int resetFlag)"
.PP
.SS "SQLITE_API int sqlite3_step (\fBsqlite3_stmt\fP *)"
.PP
.SS "SQLITE_API int sqlite3_stmt_status (\fBsqlite3_stmt\fP *, int op, int resetFlg)"
.PP
.SS "SQLITE_API int sqlite3_strnicmp (const char *, const char *, int)"
.PP
.SS "SQLITE_API int sqlite3_table_column_metadata (\fBsqlite3\fP * db, const char * zDbName, const char * zTableName, const char * zColumnName, char const ** pzDataType, char const ** pzCollSeq, int * pNotNull, int * pPrimaryKey, int * pAutoinc)"
.PP
.SS "SQLITE_API int sqlite3_test_control (int op,  ...)"
.PP
.SS "SQLITE_API SQLITE_DEPRECATED void sqlite3_thread_cleanup (void)"
.PP
.SS "SQLITE_API int sqlite3_threadsafe (void)"
.PP
.SS "SQLITE_API int sqlite3_total_changes (\fBsqlite3\fP *)"
.PP
.SS "SQLITE_API void* sqlite3_trace (\fBsqlite3\fP *, void(*)(void *, const char *) xTrace, void *)"
.PP
.SS "SQLITE_API SQLITE_DEPRECATED int sqlite3_transfer_bindings (\fBsqlite3_stmt\fP *, \fBsqlite3_stmt\fP *)"
.PP
.SS "SQLITE_API int sqlite3_unlock_notify (\fBsqlite3\fP * pBlocked, void(*)(void **apArg, int nArg) xNotify, void * pNotifyArg)"
.PP
.SS "SQLITE_API void* sqlite3_update_hook (\fBsqlite3\fP * db, void(*)(void *, int, char const *, char const *, \fBsqlite_int64\fP) xCallback, void * pArg)"
.PP
.SS "SQLITE_API void* sqlite3_update_hook (\fBsqlite3\fP *, void(*)(void *, int, char const *, char const *, \fBsqlite3_int64\fP), void *)"
.PP
.SS "SQLITE_API void* sqlite3_user_data (\fBsqlite3_context\fP *)"
.PP
.SS "SQLITE_API const void* sqlite3_value_blob (\fBsqlite3_value\fP *)"
.PP
.SS "SQLITE_API int sqlite3_value_bytes (\fBsqlite3_value\fP *)"
.PP
.SS "SQLITE_API int sqlite3_value_bytes16 (\fBsqlite3_value\fP *)"
.PP
.SS "SQLITE_API double sqlite3_value_double (\fBsqlite3_value\fP *)"
.PP
.SS "SQLITE_API int sqlite3_value_int (\fBsqlite3_value\fP *)"
.PP
.SS "SQLITE_API \fBsqlite3_int64\fP sqlite3_value_int64 (\fBsqlite3_value\fP *)"
.PP
.SS "SQLITE_API int sqlite3_value_numeric_type (\fBsqlite3_value\fP *)"
.PP
.SS "SQLITE_API const unsigned char* sqlite3_value_text (\fBsqlite3_value\fP *)"
.PP
.SS "SQLITE_API const void* sqlite3_value_text16 (\fBsqlite3_value\fP *)"
.PP
.SS "SQLITE_API const void* sqlite3_value_text16be (\fBsqlite3_value\fP *)"
.PP
.SS "SQLITE_API const void* sqlite3_value_text16le (\fBsqlite3_value\fP *)"
.PP
.SS "SQLITE_API int sqlite3_value_type (\fBsqlite3_value\fP *)"
.PP
.SS "SQLITE_API \fBsqlite3_vfs\fP* sqlite3_vfs_find (const char * zVfsName)"
.PP
.SS "SQLITE_API int sqlite3_vfs_register (\fBsqlite3_vfs\fP *, int makeDflt)"
.PP
.SS "SQLITE_API int sqlite3_vfs_unregister (\fBsqlite3_vfs\fP *)"
.PP
.SS "SQLITE_API char* sqlite3_vmprintf (const char *, va_list)"
.PP
.SS "SQLITE_API int sqlite3_wal_autocheckpoint (\fBsqlite3\fP * db, int N)"
.PP
.SS "SQLITE_API int sqlite3_wal_checkpoint (\fBsqlite3\fP * db, const char * zDb)"
.PP
.SS "SQLITE_API void* sqlite3_wal_hook (\fBsqlite3\fP *, int(*)(void *, \fBsqlite3\fP *, const char *, int), void *)"
.PP
.SS "SQLITE_PRIVATE void sqlite3AddCheckConstraint (\fBParse\fP *, \fBExpr\fP *)"
.PP
.SS "SQLITE_PRIVATE void sqlite3AddCollateType (\fBParse\fP *, \fBToken\fP *)"
.PP
.SS "SQLITE_PRIVATE void sqlite3AddColumn (\fBParse\fP *, \fBToken\fP *)"
.PP
.SS "SQLITE_PRIVATE void sqlite3AddColumnType (\fBParse\fP *, \fBToken\fP *)"
.PP
.SS "SQLITE_PRIVATE void sqlite3AddDefaultValue (\fBParse\fP *, \fBExprSpan\fP *)"
.PP
.SS "SQLITE_PRIVATE void sqlite3AddNotNull (\fBParse\fP *, int)"
.PP
.SS "SQLITE_PRIVATE void sqlite3AddPrimaryKey (\fBParse\fP *, \fBExprList\fP *, int, int, int)"
.PP
.SS "SQLITE_PRIVATE char sqlite3AffinityType (const char *)"
.PP
.SS "SQLITE_PRIVATE void sqlite3AlterBeginAddColumn (\fBParse\fP *, \fBSrcList\fP *)"
.PP
.SS "SQLITE_PRIVATE void sqlite3AlterFinishAddColumn (\fBParse\fP *, \fBToken\fP *)"
.PP
.SS "SQLITE_PRIVATE void sqlite3AlterFunctions (void)"
.PP
.SS "SQLITE_PRIVATE void sqlite3AlterRenameTable (\fBParse\fP *, \fBSrcList\fP *, \fBToken\fP *)"
.PP
.SS "SQLITE_PRIVATE int sqlite3AnalysisLoad (\fBsqlite3\fP *, int iDB)"
.PP
.SS "SQLITE_PRIVATE void sqlite3Analyze (\fBParse\fP *, \fBToken\fP *, \fBToken\fP *)"
.PP
.SS "SQLITE_PRIVATE int sqlite3ApiExit (\fBsqlite3\fP * db, int)"
.PP
.SS "SQLITE_PRIVATE void* sqlite3ArrayAllocate (\fBsqlite3\fP *, void *, int, int, int *, int *, int *)"
.PP
.SS "SQLITE_PRIVATE int sqlite3AtoF (const char * z, double *, int, \fBu8\fP)"
.PP
.SS "SQLITE_PRIVATE int sqlite3Atoi64 (const char *, \fBi64\fP *, int, \fBu8\fP)"
.PP
.SS "SQLITE_PRIVATE void sqlite3Attach (\fBParse\fP *, \fBExpr\fP *, \fBExpr\fP *, \fBExpr\fP *)"
.PP
.SS "SQLITE_PRIVATE int sqlite3AuthCheck (\fBParse\fP *, int, const char *, const char *, const char *)"
.PP
.SS "SQLITE_PRIVATE void sqlite3AuthContextPop (\fBAuthContext\fP *)"
.PP
.SS "SQLITE_PRIVATE void sqlite3AuthContextPush (\fBParse\fP *, \fBAuthContext\fP *, const char *)"
.PP
.SS "SQLITE_PRIVATE void sqlite3AuthRead (\fBParse\fP *, \fBExpr\fP *, \fBSchema\fP *, \fBSrcList\fP *)"
.PP
.SS "SQLITE_PRIVATE int sqlite3AuthReadCol (\fBParse\fP *, const char *, const char *, int)"
.PP
.SS "SQLITE_PRIVATE void sqlite3AutoincrementBegin (\fBParse\fP * pParse)"
.PP
.SS "SQLITE_PRIVATE void sqlite3AutoincrementEnd (\fBParse\fP * pParse)"
.PP
.SS "SQLITE_PRIVATE void sqlite3AutoLoadExtensions (\fBsqlite3\fP *)"
.PP
.SS "SQLITE_PRIVATE void sqlite3BackupRestart (\fBsqlite3_backup\fP *)"
.PP
.SS "SQLITE_PRIVATE void sqlite3BackupUpdate (\fBsqlite3_backup\fP *, \fBPgno\fP, const \fBu8\fP *)"
.PP
.SS "SQLITE_PRIVATE void sqlite3BeginBenignMalloc (void)"
.PP
.SS "SQLITE_PRIVATE void sqlite3BeginParse (\fBParse\fP *, int)"
.PP
.SS "SQLITE_PRIVATE void sqlite3BeginTransaction (\fBParse\fP *, int)"
.PP
.SS "SQLITE_PRIVATE void sqlite3BeginTrigger (\fBParse\fP *, \fBToken\fP *, \fBToken\fP *, int, int, \fBIdList\fP *, \fBSrcList\fP *, \fBExpr\fP *, int, int)"
.PP
.SS "SQLITE_PRIVATE void sqlite3BeginWriteOperation (\fBParse\fP *, int, int)"
.PP
.SS "SQLITE_PRIVATE void sqlite3BenignMallocHooks (void(*)(void), void(*)(void))"
.PP
.SS "SQLITE_PRIVATE \fBCollSeq\fP* sqlite3BinaryCompareCollSeq (\fBParse\fP *, \fBExpr\fP *, \fBExpr\fP *)"
.PP
.SS "SQLITE_PRIVATE int sqlite3BitvecBuiltinTest (int, int *)"
.PP
.SS "SQLITE_PRIVATE void sqlite3BitvecClear (\fBBitvec\fP *, \fBu32\fP, void *)"
.PP
.SS "SQLITE_PRIVATE \fBBitvec\fP* sqlite3BitvecCreate (\fBu32\fP)"
.PP
.SS "SQLITE_PRIVATE void sqlite3BitvecDestroy (\fBBitvec\fP *)"
.PP
.SS "SQLITE_PRIVATE int sqlite3BitvecSet (\fBBitvec\fP *, \fBu32\fP)"
.PP
.SS "SQLITE_PRIVATE \fBu32\fP sqlite3BitvecSize (\fBBitvec\fP *)"
.PP
.SS "SQLITE_PRIVATE int sqlite3BitvecTest (\fBBitvec\fP *, \fBu32\fP)"
.PP
.SS "SQLITE_PRIVATE int sqlite3BtreeBeginStmt (\fBBtree\fP *, int)"
.PP
.SS "SQLITE_PRIVATE int sqlite3BtreeBeginTrans (\fBBtree\fP *, int)"
.PP
.SS "SQLITE_PRIVATE void sqlite3BtreeCacheOverflow (\fBBtCursor\fP *)"
.PP
.SS "SQLITE_PRIVATE int sqlite3BtreeCheckpoint (\fBBtree\fP *)"
.PP
.SS "SQLITE_PRIVATE void sqlite3BtreeClearCursor (\fBBtCursor\fP *)"
.PP
.SS "SQLITE_PRIVATE int sqlite3BtreeClearTable (\fBBtree\fP *, int, int *)"
.PP
.SS "SQLITE_PRIVATE int sqlite3BtreeClose (\fBBtree\fP *)"
.PP
.SS "SQLITE_PRIVATE int sqlite3BtreeCloseCursor (\fBBtCursor\fP *)"
.PP
.SS "SQLITE_PRIVATE int sqlite3BtreeCommit (\fBBtree\fP *)"
.PP
.SS "SQLITE_PRIVATE int sqlite3BtreeCommitPhaseOne (\fBBtree\fP *, const char * zMaster)"
.PP
.SS "SQLITE_PRIVATE int sqlite3BtreeCommitPhaseTwo (\fBBtree\fP *)"
.PP
.SS "SQLITE_PRIVATE int sqlite3BtreeCopyFile (\fBBtree\fP *, \fBBtree\fP *)"
.PP
.SS "SQLITE_PRIVATE int sqlite3BtreeCount (\fBBtCursor\fP *, \fBi64\fP *)"
.PP
.SS "SQLITE_PRIVATE int sqlite3BtreeCreateTable (\fBBtree\fP *, int *, int flags)"
.PP
.SS "SQLITE_PRIVATE int sqlite3BtreeCursor (\fBBtree\fP *, int iTable, int wrFlag, struct \fBKeyInfo\fP *, \fBBtCursor\fP * pCursor)"
.PP
.SS "SQLITE_PRIVATE int sqlite3BtreeCursorHasMoved (\fBBtCursor\fP *, int *)"
.PP
.SS "SQLITE_PRIVATE int sqlite3BtreeCursorSize (void)"
.PP
.SS "SQLITE_PRIVATE void sqlite3BtreeCursorZero (\fBBtCursor\fP *)"
.PP
.SS "SQLITE_PRIVATE int sqlite3BtreeData (\fBBtCursor\fP *, \fBu32\fP offset, \fBu32\fP amt, void *)"
.PP
.SS "SQLITE_PRIVATE const void* sqlite3BtreeDataFetch (\fBBtCursor\fP *, int * pAmt)"
.PP
.SS "SQLITE_PRIVATE int sqlite3BtreeDataSize (\fBBtCursor\fP *, \fBu32\fP * pSize)"
.PP
.SS "SQLITE_PRIVATE int sqlite3BtreeDelete (\fBBtCursor\fP *)"
.PP
.SS "SQLITE_PRIVATE int sqlite3BtreeDropTable (\fBBtree\fP *, int, int *)"
.PP
.SS "SQLITE_PRIVATE void sqlite3BtreeEnter (\fBBtree\fP *)"
.PP
.SS "SQLITE_PRIVATE void sqlite3BtreeEnterAll (\fBsqlite3\fP *)"
.PP
.SS "SQLITE_PRIVATE void sqlite3BtreeEnterCursor (\fBBtCursor\fP *)"
.PP
.SS "SQLITE_PRIVATE int sqlite3BtreeEof (\fBBtCursor\fP *)"
.PP
.SS "SQLITE_PRIVATE int sqlite3BtreeFirst (\fBBtCursor\fP *, int * pRes)"
.PP
.SS "SQLITE_PRIVATE int sqlite3BtreeGetAutoVacuum (\fBBtree\fP *)"
.PP
.SS "SQLITE_PRIVATE \fBsqlite3_int64\fP sqlite3BtreeGetCachedRowid (\fBBtCursor\fP *)"
.PP
.SS "SQLITE_PRIVATE const char* sqlite3BtreeGetFilename (\fBBtree\fP *)"
.PP
.SS "SQLITE_PRIVATE const char* sqlite3BtreeGetJournalname (\fBBtree\fP *)"
.PP
.SS "SQLITE_PRIVATE void sqlite3BtreeGetMeta (\fBBtree\fP * pBtree, int idx, \fBu32\fP * pValue)"
.PP
.SS "SQLITE_PRIVATE int sqlite3BtreeGetPageSize (\fBBtree\fP *)"
.PP
.SS "SQLITE_PRIVATE int sqlite3BtreeGetReserve (\fBBtree\fP *)"
.PP
.SS "SQLITE_PRIVATE int sqlite3BtreeIncrVacuum (\fBBtree\fP *)"
.PP
.SS "SQLITE_PRIVATE int sqlite3BtreeInsert (\fBBtCursor\fP *, const void * pKey, \fBi64\fP nKey, const void * pData, int nData, int nZero, int bias, int seekResult)"
.PP
.SS "SQLITE_PRIVATE char* sqlite3BtreeIntegrityCheck (\fBBtree\fP *, int * aRoot, int nRoot, int, int *)"
.PP
.SS "SQLITE_PRIVATE int sqlite3BtreeIsInBackup (\fBBtree\fP *)"
.PP
.SS "SQLITE_PRIVATE int sqlite3BtreeIsInReadTrans (\fBBtree\fP *)"
.PP
.SS "SQLITE_PRIVATE int sqlite3BtreeIsInTrans (\fBBtree\fP *)"
.PP
.SS "SQLITE_PRIVATE int sqlite3BtreeKey (\fBBtCursor\fP *, \fBu32\fP offset, \fBu32\fP amt, void *)"
.PP
.SS "SQLITE_PRIVATE const void* sqlite3BtreeKeyFetch (\fBBtCursor\fP *, int * pAmt)"
.PP
.SS "SQLITE_PRIVATE int sqlite3BtreeKeySize (\fBBtCursor\fP *, \fBi64\fP * pSize)"
.PP
.SS "SQLITE_PRIVATE int sqlite3BtreeLast (\fBBtCursor\fP *, int * pRes)"
.PP
.SS "SQLITE_PRIVATE \fBu32\fP sqlite3BtreeLastPage (\fBBtree\fP *)"
.PP
.SS "SQLITE_PRIVATE void sqlite3BtreeLeave (\fBBtree\fP *)"
.PP
.SS "SQLITE_PRIVATE void sqlite3BtreeLeaveAll (\fBsqlite3\fP *)"
.PP
.SS "SQLITE_PRIVATE void sqlite3BtreeLeaveCursor (\fBBtCursor\fP *)"
.PP
.SS "SQLITE_PRIVATE int sqlite3BtreeLockTable (\fBBtree\fP * pBtree, int iTab, \fBu8\fP isWriteLock)"
.PP
.SS "SQLITE_PRIVATE int sqlite3BtreeMaxPageCount (\fBBtree\fP *, int)"
.PP
.SS "SQLITE_PRIVATE int sqlite3BtreeMovetoUnpacked (\fBBtCursor\fP *, \fBUnpackedRecord\fP * pUnKey, \fBi64\fP intKey, int bias, int * pRes)"
.PP
.SS "SQLITE_PRIVATE void sqlite3BtreeMutexArrayEnter (\fBBtreeMutexArray\fP *)"
.PP
.SS "SQLITE_PRIVATE void sqlite3BtreeMutexArrayInsert (\fBBtreeMutexArray\fP *, \fBBtree\fP *)"
.PP
.SS "SQLITE_PRIVATE void sqlite3BtreeMutexArrayLeave (\fBBtreeMutexArray\fP *)"
.PP
.SS "SQLITE_PRIVATE int sqlite3BtreeNext (\fBBtCursor\fP *, int * pRes)"
.PP
.SS "SQLITE_PRIVATE int sqlite3BtreeOpen (const char * zFilename, \fBsqlite3\fP * db, \fBBtree\fP ** ppBtree, int flags, int vfsFlags)"
.PP
.SS "SQLITE_PRIVATE struct \fBPager\fP* sqlite3BtreePager (\fBBtree\fP *)"
.PP
.SS "SQLITE_PRIVATE int sqlite3BtreePrevious (\fBBtCursor\fP *, int * pRes)"
.PP
.SS "SQLITE_PRIVATE int sqlite3BtreePutData (\fBBtCursor\fP *, \fBu32\fP offset, \fBu32\fP amt, void *)"
.PP
.SS "SQLITE_PRIVATE int sqlite3BtreeRollback (\fBBtree\fP *)"
.PP
.SS "SQLITE_PRIVATE int sqlite3BtreeSavepoint (\fBBtree\fP *, int, int)"
.PP
.SS "SQLITE_PRIVATE void* sqlite3BtreeSchema (\fBBtree\fP *, int, void(*)(void *))"
.PP
.SS "SQLITE_PRIVATE int sqlite3BtreeSchemaLocked (\fBBtree\fP * pBtree)"
.PP
.SS "SQLITE_PRIVATE int sqlite3BtreeSecureDelete (\fBBtree\fP *, int)"
.PP
.SS "SQLITE_PRIVATE int sqlite3BtreeSetAutoVacuum (\fBBtree\fP *, int)"
.PP
.SS "SQLITE_PRIVATE void sqlite3BtreeSetCachedRowid (\fBBtCursor\fP *, \fBsqlite3_int64\fP)"
.PP
.SS "SQLITE_PRIVATE int sqlite3BtreeSetCacheSize (\fBBtree\fP *, int)"
.PP
.SS "SQLITE_PRIVATE int sqlite3BtreeSetPageSize (\fBBtree\fP * p, int nPagesize, int nReserve, int eFix)"
.PP
.SS "SQLITE_PRIVATE int sqlite3BtreeSetSafetyLevel (\fBBtree\fP *, int, int)"
.PP
.SS "SQLITE_PRIVATE int sqlite3BtreeSetVersion (\fBBtree\fP * pBt, int iVersion)"
.PP
.SS "SQLITE_PRIVATE int sqlite3BtreeSyncDisabled (\fBBtree\fP *)"
.PP
.SS "SQLITE_PRIVATE void sqlite3BtreeTripAllCursors (\fBBtree\fP *, int)"
.PP
.SS "SQLITE_PRIVATE int sqlite3BtreeUpdateMeta (\fBBtree\fP *, int idx, \fBu32\fP value)"
.PP
.SS "SQLITE_PRIVATE int sqlite3CantopenError (int)"
.PP
.SS "SQLITE_PRIVATE void sqlite3ChangeCookie (\fBParse\fP *, int)"
.PP
.SS "SQLITE_PRIVATE int sqlite3CheckCollSeq (\fBParse\fP *, \fBCollSeq\fP *)"
.PP
.SS "SQLITE_PRIVATE int sqlite3CheckObjectName (\fBParse\fP *, const char *)"
.PP
.SS "SQLITE_PRIVATE int sqlite3Checkpoint (\fBsqlite3\fP *, int)"
.PP
.SS "SQLITE_PRIVATE void sqlite3CloseExtensions (\fBsqlite3\fP *)"
.PP
.SS "SQLITE_PRIVATE void sqlite3CloseSavepoints (\fBsqlite3\fP *)"
.PP
.SS "SQLITE_PRIVATE void sqlite3CodeRowTrigger (\fBParse\fP *, \fBTrigger\fP *, int, \fBExprList\fP *, int, \fBTable\fP *, int, int, int)"
.PP
.SS "SQLITE_PRIVATE void sqlite3CodeRowTriggerDirect (\fBParse\fP *, \fBTrigger\fP *, \fBTable\fP *, int, int, int)"
.PP
.SS "SQLITE_PRIVATE int sqlite3CodeSubselect (\fBParse\fP *, \fBExpr\fP *, int, int)"
.PP
.SS "SQLITE_PRIVATE void sqlite3CodeVerifySchema (\fBParse\fP *, int)"
.PP
.SS "SQLITE_PRIVATE void sqlite3ColumnDefault (\fBVdbe\fP *, \fBTable\fP *, int, int)"
.PP
.SS "SQLITE_PRIVATE void sqlite3CommitInternalChanges (\fBsqlite3\fP *)"
.PP
.SS "SQLITE_PRIVATE void sqlite3CommitTransaction (\fBParse\fP *)"
.PP
.SS "SQLITE_PRIVATE char sqlite3CompareAffinity (\fBExpr\fP * pExpr, char aff2)"
.PP
.SS "SQLITE_PRIVATE void sqlite3CompleteInsertion (\fBParse\fP *, \fBTable\fP *, int, int, int *, int, int, int)"
.PP
.SS "SQLITE_PRIVATE int sqlite3CorruptError (int)"
.PP
.SS "SQLITE_PRIVATE \fBExpr\fP* sqlite3CreateColumnExpr (\fBsqlite3\fP *, \fBSrcList\fP *, int, int)"
.PP
.SS "SQLITE_PRIVATE void sqlite3CreateForeignKey (\fBParse\fP *, \fBExprList\fP *, \fBToken\fP *, \fBExprList\fP *, int)"
.PP
.SS "SQLITE_PRIVATE int sqlite3CreateFunc (\fBsqlite3\fP *, const char *, int, int, void *, void(*)(\fBsqlite3_context\fP *, int, \fBsqlite3_value\fP **), void(*)(\fBsqlite3_context\fP *, int, \fBsqlite3_value\fP **), void(*)(\fBsqlite3_context\fP *), \fBFuncDestructor\fP * pDestructor)"
.PP
.SS "SQLITE_PRIVATE \fBIndex\fP* sqlite3CreateIndex (\fBParse\fP *, \fBToken\fP *, \fBToken\fP *, \fBSrcList\fP *, \fBExprList\fP *, int, \fBToken\fP *, \fBToken\fP *, int, int)"
.PP
.SS "SQLITE_PRIVATE void sqlite3CreateView (\fBParse\fP *, \fBToken\fP *, \fBToken\fP *, \fBToken\fP *, \fBSelect\fP *, int, int)"
.PP
.SS "SQLITE_PRIVATE void sqlite3DbFree (\fBsqlite3\fP *, void *)"
.PP
.SS "SQLITE_PRIVATE void* sqlite3DbMallocRaw (\fBsqlite3\fP *, int)"
.PP
.SS "SQLITE_PRIVATE int sqlite3DbMallocSize (\fBsqlite3\fP *, void *)"
.PP
.SS "SQLITE_PRIVATE void* sqlite3DbMallocZero (\fBsqlite3\fP *, int)"
.PP
.SS "SQLITE_PRIVATE void* sqlite3DbRealloc (\fBsqlite3\fP *, void *, int)"
.PP
.SS "SQLITE_PRIVATE void* sqlite3DbReallocOrFree (\fBsqlite3\fP *, void *, int)"
.PP
.SS "SQLITE_PRIVATE char* sqlite3DbStrDup (\fBsqlite3\fP *, const char *)"
.PP
.SS "SQLITE_PRIVATE char* sqlite3DbStrNDup (\fBsqlite3\fP *, const char *, int)"
.PP
.SS "SQLITE_PRIVATE \fBsqlite3_mutex_methods\fP const* sqlite3DefaultMutex (void)"
.PP
.SS "SQLITE_PRIVATE void sqlite3DefaultRowEst (\fBIndex\fP *)"
.PP
.SS "SQLITE_PRIVATE void sqlite3DeferForeignKey (\fBParse\fP *, int)"
.PP
.SS "SQLITE_PRIVATE void sqlite3DeleteFrom (\fBParse\fP *, \fBSrcList\fP *, \fBExpr\fP *)"
.PP
.SS "SQLITE_PRIVATE void sqlite3DeleteIndexSamples (\fBsqlite3\fP *, \fBIndex\fP *)"
.PP
.SS "SQLITE_PRIVATE void sqlite3DeleteTable (\fBsqlite3\fP *, \fBTable\fP *)"
.PP
.SS "SQLITE_PRIVATE void sqlite3DeleteTrigger (\fBsqlite3\fP *, \fBTrigger\fP *)"
.PP
.SS "SQLITE_PRIVATE void sqlite3DeleteTriggerStep (\fBsqlite3\fP *, \fBTriggerStep\fP *)"
.PP
.SS "SQLITE_PRIVATE int sqlite3Dequote (char *)"
.PP
.SS "SQLITE_PRIVATE void sqlite3Detach (\fBParse\fP *, \fBExpr\fP *)"
.PP
.SS "SQLITE_PRIVATE void sqlite3DropIndex (\fBParse\fP *, \fBSrcList\fP *, int)"
.PP
.SS "SQLITE_PRIVATE void sqlite3DropTable (\fBParse\fP *, \fBSrcList\fP *, int, int)"
.PP
.SS "SQLITE_PRIVATE void sqlite3DropTrigger (\fBParse\fP *, \fBSrcList\fP *, int)"
.PP
.SS "SQLITE_PRIVATE void sqlite3DropTriggerPtr (\fBParse\fP *, \fBTrigger\fP *)"
.PP
.SS "SQLITE_PRIVATE void sqlite3EndBenignMalloc (void)"
.PP
.SS "SQLITE_PRIVATE void sqlite3EndTable (\fBParse\fP *, \fBToken\fP *, \fBToken\fP *, \fBSelect\fP *)"
.PP
.SS "SQLITE_PRIVATE void sqlite3Error (\fBsqlite3\fP *, int, const char *,  ...)"
.PP
.SS "SQLITE_PRIVATE void sqlite3ErrorMsg (\fBParse\fP *, const char *,  ...)"
.PP
.SS "SQLITE_PRIVATE const char* sqlite3ErrStr (int)"
.PP
.SS "SQLITE_PRIVATE void sqlite3ExpirePreparedStatements (\fBsqlite3\fP *)"
.PP
.SS "SQLITE_PRIVATE \fBExpr\fP* sqlite3Expr (\fBsqlite3\fP *, int, const char *)"
.PP
.SS "SQLITE_PRIVATE char sqlite3ExprAffinity (\fBExpr\fP * pExpr)"
.PP
.SS "SQLITE_PRIVATE \fBExpr\fP* sqlite3ExprAlloc (\fBsqlite3\fP *, int, const \fBToken\fP *, int)"
.PP
.SS "SQLITE_PRIVATE void sqlite3ExprAnalyzeAggList (\fBNameContext\fP *, \fBExprList\fP *)"
.PP
.SS "SQLITE_PRIVATE void sqlite3ExprAnalyzeAggregates (\fBNameContext\fP *, \fBExpr\fP *)"
.PP
.SS "SQLITE_PRIVATE \fBExpr\fP* sqlite3ExprAnd (\fBsqlite3\fP *, \fBExpr\fP *, \fBExpr\fP *)"
.PP
.SS "SQLITE_PRIVATE void sqlite3ExprAssignVarNumber (\fBParse\fP *, \fBExpr\fP *)"
.PP
.SS "SQLITE_PRIVATE void sqlite3ExprAttachSubtrees (\fBsqlite3\fP *, \fBExpr\fP *, \fBExpr\fP *, \fBExpr\fP *)"
.PP
.SS "SQLITE_PRIVATE void sqlite3ExprCacheAffinityChange (\fBParse\fP *, int, int)"
.PP
.SS "SQLITE_PRIVATE void sqlite3ExprCacheClear (\fBParse\fP *)"
.PP
.SS "static void sqlite3ExprCachePinRegister (\fBParse\fP * pParse, int iReg)\fC [static]\fP"
.PP
.SS "SQLITE_PRIVATE void sqlite3ExprCachePop (\fBParse\fP *, int)"
.PP
.SS "SQLITE_PRIVATE void sqlite3ExprCachePush (\fBParse\fP *)"
.PP
.SS "SQLITE_PRIVATE void sqlite3ExprCacheRemove (\fBParse\fP *, int, int)"
.PP
.SS "SQLITE_PRIVATE void sqlite3ExprCacheStore (\fBParse\fP *, int, int, int)"
.PP
.SS "SQLITE_PRIVATE int sqlite3ExprCanBeNull (const \fBExpr\fP *)"
.PP
.SS "SQLITE_PRIVATE int sqlite3ExprCheckHeight (\fBParse\fP *, int)"
.PP
.SS "SQLITE_PRIVATE int sqlite3ExprCode (\fBParse\fP *, \fBExpr\fP *, int)"
.PP
.SS "SQLITE_PRIVATE int sqlite3ExprCodeAndCache (\fBParse\fP *, \fBExpr\fP *, int)"
.PP
.SS "SQLITE_PRIVATE void sqlite3ExprCodeConstants (\fBParse\fP *, \fBExpr\fP *)"
.PP
.SS "SQLITE_PRIVATE void sqlite3ExprCodeCopy (\fBParse\fP *, int, int, int)"
.PP
.SS "SQLITE_PRIVATE int sqlite3ExprCodeExprList (\fBParse\fP *, \fBExprList\fP *, int, int)"
.PP
.SS "SQLITE_PRIVATE int sqlite3ExprCodeGetColumn (\fBParse\fP *, \fBTable\fP *, int, int, int)"
.PP
.SS "SQLITE_PRIVATE void sqlite3ExprCodeGetColumnOfTable (\fBVdbe\fP *, \fBTable\fP *, int, int, int)"
.PP
.SS "static void sqlite3ExprCodeIN (\fBParse\fP * pParse, \fBExpr\fP * pExpr, int destIfFalse, int destIfNull)\fC [static]\fP"
.PP
.SS "SQLITE_PRIVATE void sqlite3ExprCodeIsNullJump (\fBVdbe\fP *, const \fBExpr\fP *, int, int)"
.PP
.SS "SQLITE_PRIVATE void sqlite3ExprCodeMove (\fBParse\fP *, int, int, int)"
.PP
.SS "SQLITE_PRIVATE int sqlite3ExprCodeTarget (\fBParse\fP *, \fBExpr\fP *, int)"
.PP
.SS "SQLITE_PRIVATE int sqlite3ExprCodeTemp (\fBParse\fP *, \fBExpr\fP *, int *)"
.PP
.SS "SQLITE_PRIVATE \fBCollSeq\fP* sqlite3ExprCollSeq (\fBParse\fP * pParse, \fBExpr\fP * pExpr)"
.PP
.SS "SQLITE_PRIVATE int sqlite3ExprCompare (\fBExpr\fP *, \fBExpr\fP *)"
.PP
.SS "SQLITE_PRIVATE void sqlite3ExprDelete (\fBsqlite3\fP *, \fBExpr\fP *)"
.PP
.SS "SQLITE_PRIVATE \fBExpr\fP* sqlite3ExprDup (\fBsqlite3\fP *, \fBExpr\fP *, int)"
.PP
.SS "SQLITE_PRIVATE \fBExpr\fP* sqlite3ExprFunction (\fBParse\fP *, \fBExprList\fP *, \fBToken\fP *)"
.PP
.SS "SQLITE_PRIVATE void sqlite3ExprIfFalse (\fBParse\fP *, \fBExpr\fP *, int, int)"
.PP
.SS "SQLITE_PRIVATE void sqlite3ExprIfTrue (\fBParse\fP *, \fBExpr\fP *, int, int)"
.PP
.SS "SQLITE_PRIVATE int sqlite3ExprIsConstant (\fBExpr\fP *)"
.PP
.SS "SQLITE_PRIVATE int sqlite3ExprIsConstantNotJoin (\fBExpr\fP *)"
.PP
.SS "SQLITE_PRIVATE int sqlite3ExprIsConstantOrFunction (\fBExpr\fP *)"
.PP
.SS "SQLITE_PRIVATE int sqlite3ExprIsInteger (\fBExpr\fP *, int *)"
.PP
.SS "SQLITE_PRIVATE \fBExprList\fP* sqlite3ExprListAppend (\fBParse\fP *, \fBExprList\fP *, \fBExpr\fP *)"
.PP
.SS "SQLITE_PRIVATE void sqlite3ExprListCheckLength (\fBParse\fP *, \fBExprList\fP *, const char *)"
.PP
.SS "SQLITE_PRIVATE int sqlite3ExprListCompare (\fBExprList\fP *, \fBExprList\fP *)"
.PP
.SS "SQLITE_PRIVATE void sqlite3ExprListDelete (\fBsqlite3\fP *, \fBExprList\fP *)"
.PP
.SS "SQLITE_PRIVATE \fBExprList\fP* sqlite3ExprListDup (\fBsqlite3\fP *, \fBExprList\fP *, int)"
.PP
.SS "SQLITE_PRIVATE void sqlite3ExprListSetName (\fBParse\fP *, \fBExprList\fP *, \fBToken\fP *, int)"
.PP
.SS "SQLITE_PRIVATE void sqlite3ExprListSetSpan (\fBParse\fP *, \fBExprList\fP *, \fBExprSpan\fP *)"
.PP
.SS "SQLITE_PRIVATE int sqlite3ExprNeedsNoAffinityChange (const \fBExpr\fP *, char)"
.PP
.SS "SQLITE_PRIVATE \fBExpr\fP* sqlite3ExprSetColl (\fBExpr\fP *, \fBCollSeq\fP *)"
.PP
.SS "SQLITE_PRIVATE \fBExpr\fP* sqlite3ExprSetCollByToken (\fBParse\fP * pParse, \fBExpr\fP *, \fBToken\fP *)"
.PP
.SS "SQLITE_PRIVATE void sqlite3ExprSetHeight (\fBParse\fP * pParse, \fBExpr\fP * p)"
.PP
.SS "SQLITE_PRIVATE \fBCollSeq\fP* sqlite3FindCollSeq (\fBsqlite3\fP *, \fBu8\fP enc, const char *, int)"
.PP
.SS "SQLITE_PRIVATE int sqlite3FindDb (\fBsqlite3\fP *, \fBToken\fP *)"
.PP
.SS "SQLITE_PRIVATE int sqlite3FindDbName (\fBsqlite3\fP *, const char *)"
.PP
.SS "SQLITE_PRIVATE \fBFuncDef\fP* sqlite3FindFunction (\fBsqlite3\fP *, const char *, int, int, \fBu8\fP, int)"
.PP
.SS "SQLITE_PRIVATE \fBIndex\fP* sqlite3FindIndex (\fBsqlite3\fP *, const char *, const char *)"
.PP
.SS "SQLITE_PRIVATE int sqlite3FindInIndex (\fBParse\fP *, \fBExpr\fP *, int *)"
.PP
.SS "SQLITE_PRIVATE \fBTable\fP* sqlite3FindTable (\fBsqlite3\fP *, const char *, const char *)"
.PP
.SS "SQLITE_PRIVATE void sqlite3FinishCoding (\fBParse\fP *)"
.PP
.SS "SQLITE_PRIVATE void sqlite3FinishTrigger (\fBParse\fP *, \fBTriggerStep\fP *, \fBToken\fP *)"
.PP
.SS "SQLITE_PRIVATE int sqlite3FixExpr (\fBDbFixer\fP *, \fBExpr\fP *)"
.PP
.SS "SQLITE_PRIVATE int sqlite3FixExprList (\fBDbFixer\fP *, \fBExprList\fP *)"
.PP
.SS "SQLITE_PRIVATE int sqlite3FixInit (\fBDbFixer\fP *, \fBParse\fP *, int, const char *, const \fBToken\fP *)"
.PP
.SS "SQLITE_PRIVATE int sqlite3FixSelect (\fBDbFixer\fP *, \fBSelect\fP *)"
.PP
.SS "SQLITE_PRIVATE int sqlite3FixSrcList (\fBDbFixer\fP *, \fBSrcList\fP *)"
.PP
.SS "SQLITE_PRIVATE int sqlite3FixTriggerStep (\fBDbFixer\fP *, \fBTriggerStep\fP *)"
.PP
.SS "SQLITE_PRIVATE void sqlite3FkActions (\fBParse\fP *, \fBTable\fP *, \fBExprList\fP *, int)"
.PP
.SS "SQLITE_PRIVATE void sqlite3FkCheck (\fBParse\fP *, \fBTable\fP *, int, int)"
.PP
.SS "SQLITE_PRIVATE void sqlite3FkDelete (\fBsqlite3\fP *, \fBTable\fP *)"
.PP
.SS "SQLITE_PRIVATE void sqlite3FkDropTable (\fBParse\fP *, \fBSrcList\fP *, \fBTable\fP *)"
.PP
.SS "SQLITE_PRIVATE \fBu32\fP sqlite3FkOldmask (\fBParse\fP *, \fBTable\fP *)"
.PP
.SS "SQLITE_PRIVATE \fBFKey\fP* sqlite3FkReferences (\fBTable\fP *)"
.PP
.SS "SQLITE_PRIVATE int sqlite3FkRequired (\fBParse\fP *, \fBTable\fP *, int *, int)"
.PP
.SS "SQLITE_PRIVATE void sqlite3FuncDefInsert (\fBFuncDefHash\fP *, \fBFuncDef\fP *)"
.PP
.SS "SQLITE_PRIVATE void sqlite3GenerateConstraintChecks (\fBParse\fP *, \fBTable\fP *, int, int, int *, int, int, int, int, int *)"
.PP
.SS "SQLITE_PRIVATE int sqlite3GenerateIndexKey (\fBParse\fP *, \fBIndex\fP *, int, int, int)"
.PP
.SS "SQLITE_PRIVATE void sqlite3GenerateRowDelete (\fBParse\fP *, \fBTable\fP *, int, int, int, \fBTrigger\fP *, int)"
.PP
.SS "SQLITE_PRIVATE void sqlite3GenerateRowIndexDelete (\fBParse\fP *, \fBTable\fP *, int, int *)"
.PP
.SS "SQLITE_PRIVATE \fBu32\fP sqlite3Get4byte (const \fBu8\fP *)"
.PP
.SS "SQLITE_PRIVATE \fBCollSeq\fP* sqlite3GetCollSeq (\fBsqlite3\fP *, \fBu8\fP, \fBCollSeq\fP *, const char *)"
.PP
.SS "static \fBCollSeq\fP* sqlite3GetFuncCollSeq (\fBsqlite3_context\fP * context)\fC [static]\fP"
.PP
.SS "SQLITE_PRIVATE int sqlite3GetInt32 (const char *, int *)"
.PP
.SS "SQLITE_PRIVATE int sqlite3GetTempRange (\fBParse\fP *, int)"
.PP
.SS "SQLITE_PRIVATE int sqlite3GetTempReg (\fBParse\fP *)"
.PP
.SS "SQLITE_PRIVATE int sqlite3GetToken (const unsigned char *, int *)"
.PP
.SS "SQLITE_PRIVATE \fBu8\fP sqlite3GetVarint (const unsigned char *, \fBu64\fP *)"
.PP
.SS "SQLITE_PRIVATE \fBu8\fP sqlite3GetVarint32 (const unsigned char *, \fBu32\fP *)"
.PP
.SS "SQLITE_PRIVATE \fBVdbe\fP* sqlite3GetVdbe (\fBParse\fP *)"
.PP
.SS "SQLITE_PRIVATE \fBVTable\fP* sqlite3GetVTable (\fBsqlite3\fP *, \fBTable\fP *)"
.PP
.SS "SQLITE_PRIVATE void sqlite3HaltConstraint (\fBParse\fP *, int, char *, int)"
.PP
.SS "SQLITE_PRIVATE void sqlite3HashClear (\fBHash\fP *)"
.PP
.SS "SQLITE_PRIVATE void* sqlite3HashFind (const \fBHash\fP *, const char * pKey, int nKey)"
.PP
.SS "SQLITE_PRIVATE void sqlite3HashInit (\fBHash\fP *)"
.PP
.SS "SQLITE_PRIVATE void* sqlite3HashInsert (\fBHash\fP *, const char * pKey, int nKey, void * pData)"
.PP
.SS "SQLITE_PRIVATE int sqlite3HeapNearlyFull (void)"
.PP
.SS "SQLITE_PRIVATE void* sqlite3HexToBlob (\fBsqlite3\fP *, const char * z, int n)"
.PP
.SS "SQLITE_PRIVATE \fBIdList\fP* sqlite3IdListAppend (\fBsqlite3\fP *, \fBIdList\fP *, \fBToken\fP *)"
.PP
.SS "SQLITE_PRIVATE void sqlite3IdListDelete (\fBsqlite3\fP *, \fBIdList\fP *)"
.PP
.SS "SQLITE_PRIVATE \fBIdList\fP* sqlite3IdListDup (\fBsqlite3\fP *, \fBIdList\fP *)"
.PP
.SS "SQLITE_PRIVATE int sqlite3IdListIndex (\fBIdList\fP *, const char *)"
.PP
.SS "SQLITE_PRIVATE int sqlite3IndexAffinityOk (\fBExpr\fP * pExpr, char idx_affinity)"
.PP
.SS "SQLITE_PRIVATE const char* sqlite3IndexAffinityStr (\fBVdbe\fP *, \fBIndex\fP *)"
.PP
.SS "SQLITE_PRIVATE int sqlite3IndexedByLookup (\fBParse\fP *, struct SrcList_item *)"
.PP
.SS "SQLITE_PRIVATE \fBKeyInfo\fP* sqlite3IndexKeyinfo (\fBParse\fP *, \fBIndex\fP *)"
.PP
.SS "SQLITE_PRIVATE int sqlite3Init (\fBsqlite3\fP *, char **)"
.PP
.SS "SQLITE_PRIVATE int sqlite3InitCallback (void *, int, char **, char **)"
.PP
.SS "static int sqlite3InitOne (\fBsqlite3\fP * db, int iDb, char ** pzErrMsg)\fC [static]\fP"
.PP
.SS "SQLITE_PRIVATE void sqlite3Insert (\fBParse\fP *, \fBSrcList\fP *, \fBExprList\fP *, \fBSelect\fP *, \fBIdList\fP *, int)"
.PP
.SS "SQLITE_PRIVATE void sqlite3InvalidFunction (\fBsqlite3_context\fP *, int, \fBsqlite3_value\fP **)"
.PP
.SS "SQLITE_PRIVATE int sqlite3InvokeBusyHandler (\fBBusyHandler\fP *)"
.PP
.SS "SQLITE_PRIVATE int sqlite3IsLikeFunction (\fBsqlite3\fP *, \fBExpr\fP *, int *, char *)"
.PP
.SS "SQLITE_PRIVATE int sqlite3IsMemJournal (\fBsqlite3_file\fP *)"
.PP
.SS "SQLITE_PRIVATE int sqlite3IsNaN (double)"
.PP
.SS "SQLITE_PRIVATE int sqlite3IsReadOnly (\fBParse\fP *, \fBTable\fP *, int)"
.PP
.SS "SQLITE_PRIVATE int sqlite3IsRowid (const char *)"
.PP
.SS "SQLITE_PRIVATE int sqlite3JoinType (\fBParse\fP *, \fBToken\fP *, \fBToken\fP *, \fBToken\fP *)"
.PP
.SS "SQLITE_PRIVATE const char* sqlite3JournalModename (int)"
.PP
.SS "SQLITE_PRIVATE int sqlite3KeywordCode (const unsigned char *, int)"
.PP
.SS "static int sqlite3LoadExtension (\fBsqlite3\fP * db, const char * zFile, const char * zProc, char ** pzErrMsg)\fC [static]\fP"
.PP
.SS "SQLITE_PRIVATE \fBCollSeq\fP* sqlite3LocateCollSeq (\fBParse\fP * pParse, const char * zName)"
.PP
.SS "SQLITE_PRIVATE \fBTable\fP* sqlite3LocateTable (\fBParse\fP *, int isView, const char *, const char *)"
.PP
.SS "static int sqlite3LockAndPrepare (\fBsqlite3\fP * db, const char * zSql, int nBytes, int saveSqlFlag, \fBVdbe\fP * pOld, \fBsqlite3_stmt\fP ** ppStmt, const char ** pzTail)\fC [static]\fP"
.PP
.SS "SQLITE_PRIVATE void* sqlite3Malloc (int)"
.PP
.SS "static void sqlite3MallocAlarm (int nByte)\fC [static]\fP"
.PP
.SS "SQLITE_PRIVATE void sqlite3MallocEnd (void)"
.PP
.SS "SQLITE_PRIVATE int sqlite3MallocInit (void)"
.PP
.SS "SQLITE_PRIVATE int sqlite3MallocSize (void *)"
.PP
.SS "SQLITE_PRIVATE void* sqlite3MallocZero (int)"
.PP
.SS "SQLITE_PRIVATE char* sqlite3MAppendf (\fBsqlite3\fP *, char *, const char *,  ...)"
.PP
.SS "SQLITE_PRIVATE void sqlite3MaterializeView (\fBParse\fP *, \fBTable\fP *, \fBExpr\fP *, int)"
.PP
.SS "SQLITE_PRIVATE void sqlite3MayAbort (\fBParse\fP *)"
.PP
.SS "SQLITE_PRIVATE int sqlite3MemCompare (const \fBMem\fP *, const \fBMem\fP *, const \fBCollSeq\fP *)"
.PP
.SS "static void sqlite3MemFree (void * pPrior)\fC [static]\fP"
.PP
.SS "static int sqlite3MemInit (void * NotUsed)\fC [static]\fP"
.PP
.SS "SQLITE_PRIVATE void sqlite3MemJournalOpen (\fBsqlite3_file\fP *)"
.PP
.SS "SQLITE_PRIVATE int sqlite3MemJournalSize (void)"
.PP
.SS "static void* sqlite3MemMalloc (int nByte)\fC [static]\fP"
.PP
.SS "static int sqlite3MemoryAlarm (void(*)(void *pArg, \fBsqlite3_int64\fP used, int N) xCallback, void * pArg, \fBsqlite3_int64\fP iThreshold)\fC [static]\fP"
.PP
.SS "static void* sqlite3MemRealloc (void * pPrior, int nByte)\fC [static]\fP"
.PP
.SS "static int sqlite3MemRoundup (int n)\fC [static]\fP"
.PP
.SS "SQLITE_PRIVATE void sqlite3MemSetDefault (void)"
.PP
.SS "static void sqlite3MemShutdown (void * NotUsed)\fC [static]\fP"
.PP
.SS "static int sqlite3MemSize (void * pPrior)\fC [static]\fP"
.PP
.SS "SQLITE_PRIVATE void sqlite3MinimumFileFormat (\fBParse\fP *, int, int)"
.PP
.SS "SQLITE_PRIVATE int sqlite3MisuseError (int)"
.PP
.SS "SQLITE_PRIVATE char* sqlite3MPrintf (\fBsqlite3\fP *, const char *,  ...)"
.PP
.SS "SQLITE_PRIVATE void sqlite3MultiWrite (\fBParse\fP *)"
.PP
.SS "SQLITE_PRIVATE \fBsqlite3_mutex\fP* sqlite3MutexAlloc (int)"
.PP
.SS "SQLITE_PRIVATE int sqlite3MutexEnd (void)"
.PP
.SS "SQLITE_PRIVATE int sqlite3MutexInit (void)"
.PP
.SS "SQLITE_PRIVATE char* sqlite3NameFromToken (\fBsqlite3\fP *, \fBToken\fP *)"
.PP
.SS "SQLITE_PRIVATE void sqlite3NestedParse (\fBParse\fP *, const char *,  ...)"
.PP
.SS "SQLITE_PRIVATE \fBsqlite3_mutex_methods\fP const* sqlite3NoopMutex (void)"
.PP
.SS "SQLITE_PRIVATE const char* sqlite3OpcodeName (int)"
.PP
.SS "SQLITE_PRIVATE void sqlite3OpenMasterTable (\fBParse\fP *, int)"
.PP
.SS "SQLITE_PRIVATE void sqlite3OpenTable (\fBParse\fP *, int iCur, int iDb, \fBTable\fP *, int)"
.PP
.SS "SQLITE_PRIVATE int sqlite3OpenTableAndIndices (\fBParse\fP *, \fBTable\fP *, int, int)"
.PP
.SS "SQLITE_PRIVATE int sqlite3OpenTempDatabase (\fBParse\fP *)"
.PP
.SS "SQLITE_PRIVATE int sqlite3OsAccess (\fBsqlite3_vfs\fP *, const char *, int, int * pResOut)"
.PP
.SS "SQLITE_PRIVATE int sqlite3OsCheckReservedLock (\fBsqlite3_file\fP * id, int * pResOut)"
.PP
.SS "SQLITE_PRIVATE int sqlite3OsClose (\fBsqlite3_file\fP *)"
.PP
.SS "SQLITE_PRIVATE int sqlite3OsCloseFree (\fBsqlite3_file\fP *)"
.PP
.SS "SQLITE_PRIVATE int sqlite3OsCurrentTimeInt64 (\fBsqlite3_vfs\fP *, \fBsqlite3_int64\fP *)"
.PP
.SS "SQLITE_PRIVATE int sqlite3OsDelete (\fBsqlite3_vfs\fP *, const char *, int)"
.PP
.SS "SQLITE_PRIVATE int sqlite3OsDeviceCharacteristics (\fBsqlite3_file\fP * id)"
.PP
.SS "SQLITE_PRIVATE void sqlite3OsDlClose (\fBsqlite3_vfs\fP *, void *)"
.PP
.SS "SQLITE_PRIVATE void sqlite3OsDlError (\fBsqlite3_vfs\fP *, int, char *)"
.PP
.SS "SQLITE_PRIVATE void* sqlite3OsDlOpen (\fBsqlite3_vfs\fP *, const char *)"
.PP
.SS "SQLITE_PRIVATE void(*)(void) sqlite3OsDlSym ()"
.PP
.SS "SQLITE_PRIVATE int sqlite3OsFileControl (\fBsqlite3_file\fP *, int, void *)"
.PP
.SS "SQLITE_PRIVATE int sqlite3OsFileSize (\fBsqlite3_file\fP *, \fBi64\fP * pSize)"
.PP
.SS "SQLITE_PRIVATE int sqlite3OsFullPathname (\fBsqlite3_vfs\fP *, const char *, int, char *)"
.PP
.SS "SQLITE_PRIVATE int sqlite3OsInit (void)"
.PP
.SS "SQLITE_PRIVATE int sqlite3OsLock (\fBsqlite3_file\fP *, int)"
.PP
.SS "SQLITE_PRIVATE int sqlite3OsOpen (\fBsqlite3_vfs\fP *, const char *, \fBsqlite3_file\fP *, int, int *)"
.PP
.SS "SQLITE_PRIVATE int sqlite3OsOpenMalloc (\fBsqlite3_vfs\fP *, const char *, \fBsqlite3_file\fP **, int, int *)"
.PP
.SS "SQLITE_PRIVATE int sqlite3OsRandomness (\fBsqlite3_vfs\fP *, int, char *)"
.PP
.SS "SQLITE_PRIVATE int sqlite3OsRead (\fBsqlite3_file\fP *, void *, int amt, \fBi64\fP offset)"
.PP
.SS "SQLITE_PRIVATE int sqlite3OsSectorSize (\fBsqlite3_file\fP * id)"
.PP
.SS "SQLITE_PRIVATE void sqlite3OsShmBarrier (\fBsqlite3_file\fP * id)"
.PP
.SS "SQLITE_PRIVATE int sqlite3OsShmLock (\fBsqlite3_file\fP * id, int, int, int)"
.PP
.SS "SQLITE_PRIVATE int sqlite3OsShmMap (\fBsqlite3_file\fP *, int, int, int, void volatile **)"
.PP
.SS "SQLITE_PRIVATE int sqlite3OsShmUnmap (\fBsqlite3_file\fP * id, int)"
.PP
.SS "SQLITE_PRIVATE int sqlite3OsSleep (\fBsqlite3_vfs\fP *, int)"
.PP
.SS "SQLITE_PRIVATE int sqlite3OsSync (\fBsqlite3_file\fP *, int)"
.PP
.SS "SQLITE_PRIVATE int sqlite3OsTruncate (\fBsqlite3_file\fP *, \fBi64\fP size)"
.PP
.SS "SQLITE_PRIVATE int sqlite3OsUnlock (\fBsqlite3_file\fP *, int)"
.PP
.SS "SQLITE_PRIVATE int sqlite3OsWrite (\fBsqlite3_file\fP *, const void *, int amt, \fBi64\fP offset)"
.PP
.SS "SQLITE_PRIVATE void sqlite3PageFree (void *)"
.PP
.SS "SQLITE_PRIVATE void* sqlite3PageMalloc (int)"
.PP
.SS "SQLITE_PRIVATE int sqlite3PagerAcquire (\fBPager\fP * pPager, \fBPgno\fP pgno, \fBDbPage\fP ** ppPage, int clrFlag)"
.PP
.SS "SQLITE_PRIVATE \fBsqlite3_backup\fP** sqlite3PagerBackupPtr (\fBPager\fP *)"
.PP
.SS "SQLITE_PRIVATE int sqlite3PagerBegin (\fBPager\fP *, int exFlag, int)"
.PP
.SS "SQLITE_PRIVATE int sqlite3PagerCheckpoint (\fBPager\fP * pPager)"
.PP
.SS "SQLITE_PRIVATE int sqlite3PagerClose (\fBPager\fP * pPager)"
.PP
.SS "SQLITE_PRIVATE int sqlite3PagerCloseWal (\fBPager\fP * pPager)"
.PP
.SS "SQLITE_PRIVATE int sqlite3PagerCommitPhaseOne (\fBPager\fP *, const char * zMaster, int)"
.PP
.SS "SQLITE_PRIVATE int sqlite3PagerCommitPhaseTwo (\fBPager\fP *)"
.PP
.SS "SQLITE_PRIVATE void sqlite3PagerDontWrite (\fBDbPage\fP *)"
.PP
.SS "SQLITE_PRIVATE int sqlite3PagerExclusiveLock (\fBPager\fP *)"
.PP
.SS "SQLITE_PRIVATE \fBsqlite3_file\fP* sqlite3PagerFile (\fBPager\fP *)"
.PP
.SS "SQLITE_PRIVATE const char* sqlite3PagerFilename (\fBPager\fP *)"
.PP
.SS "SQLITE_PRIVATE void* sqlite3PagerGetData (\fBDbPage\fP *)"
.PP
.SS "SQLITE_PRIVATE void* sqlite3PagerGetExtra (\fBDbPage\fP *)"
.PP
.SS "SQLITE_PRIVATE int sqlite3PagerGetJournalMode (\fBPager\fP *)"
.PP
.SS "SQLITE_PRIVATE int sqlite3PagerIsMemdb (\fBPager\fP *)"
.PP
.SS "SQLITE_PRIVATE \fBu8\fP sqlite3PagerIsreadonly (\fBPager\fP *)"
.PP
.SS "SQLITE_PRIVATE const char* sqlite3PagerJournalname (\fBPager\fP *)"
.PP
.SS "SQLITE_PRIVATE \fBi64\fP sqlite3PagerJournalSizeLimit (\fBPager\fP *, \fBi64\fP)"
.PP
.SS "SQLITE_PRIVATE int sqlite3PagerLockingMode (\fBPager\fP *, int)"
.PP
.SS "SQLITE_PRIVATE \fBDbPage\fP* sqlite3PagerLookup (\fBPager\fP * pPager, \fBPgno\fP pgno)"
.PP
.SS "SQLITE_PRIVATE int sqlite3PagerMaxPageCount (\fBPager\fP *, int)"
.PP
.SS "SQLITE_PRIVATE int sqlite3PagerMemUsed (\fBPager\fP *)"
.PP
.SS "SQLITE_PRIVATE int sqlite3PagerMovepage (\fBPager\fP *, \fBDbPage\fP *, \fBPgno\fP, int)"
.PP
.SS "SQLITE_PRIVATE int sqlite3PagerNosync (\fBPager\fP *)"
.PP
.SS "SQLITE_PRIVATE int sqlite3PagerOkToChangeJournalMode (\fBPager\fP *)"
.PP
.SS "SQLITE_PRIVATE int sqlite3PagerOpen (\fBsqlite3_vfs\fP *, \fBPager\fP ** ppPager, const char *, int, int, int, void(*)(\fBDbPage\fP *))"
.PP
.SS "SQLITE_PRIVATE int sqlite3PagerOpenSavepoint (\fBPager\fP * pPager, int n)"
.PP
.SS "SQLITE_PRIVATE int sqlite3PagerOpenWal (\fBPager\fP * pPager, int * pisOpen)"
.PP
.SS "SQLITE_PRIVATE void sqlite3PagerPagecount (\fBPager\fP *, int *)"
.PP
.SS "SQLITE_PRIVATE int sqlite3PagerPageRefcount (\fBDbPage\fP *)"
.PP
.SS "SQLITE_PRIVATE int sqlite3PagerReadFileheader (\fBPager\fP *, int, unsigned char *)"
.PP
.SS "SQLITE_PRIVATE void sqlite3PagerRef (\fBDbPage\fP *)"
.PP
.SS "SQLITE_PRIVATE int sqlite3PagerRefcount (\fBPager\fP *)"
.PP
.SS "SQLITE_PRIVATE int sqlite3PagerRollback (\fBPager\fP *)"
.PP
.SS "SQLITE_PRIVATE int sqlite3PagerSavepoint (\fBPager\fP * pPager, int op, int iSavepoint)"
.PP
.SS "SQLITE_PRIVATE void sqlite3PagerSetBusyhandler (\fBPager\fP *, int(*)(void *), void *)"
.PP
.SS "SQLITE_PRIVATE void sqlite3PagerSetCachesize (\fBPager\fP *, int)"
.PP
.SS "SQLITE_PRIVATE int sqlite3PagerSetJournalMode (\fBPager\fP *, int)"
.PP
.SS "SQLITE_PRIVATE int sqlite3PagerSetPagesize (\fBPager\fP *, \fBu32\fP *, int)"
.PP
.SS "SQLITE_PRIVATE void sqlite3PagerSetSafetyLevel (\fBPager\fP *, int, int)"
.PP
.SS "SQLITE_PRIVATE int sqlite3PagerSharedLock (\fBPager\fP * pPager)"
.PP
.SS "SQLITE_PRIVATE int sqlite3PagerSync (\fBPager\fP * pPager)"
.PP
.SS "SQLITE_PRIVATE void* sqlite3PagerTempSpace (\fBPager\fP *)"
.PP
.SS "SQLITE_PRIVATE void sqlite3PagerTruncateImage (\fBPager\fP *, \fBPgno\fP)"
.PP
.SS "SQLITE_PRIVATE void sqlite3PagerUnref (\fBDbPage\fP *)"
.PP
.SS "SQLITE_PRIVATE const \fBsqlite3_vfs\fP* sqlite3PagerVfs (\fBPager\fP *)"
.PP
.SS "SQLITE_PRIVATE int sqlite3PagerWalCallback (\fBPager\fP * pPager)"
.PP
.SS "SQLITE_PRIVATE int sqlite3PagerWalSupported (\fBPager\fP * pPager)"
.PP
.SS "SQLITE_PRIVATE int sqlite3PagerWrite (\fBDbPage\fP *)"
.PP
.SS "SQLITE_PRIVATE void sqlite3Parser (void * yyp, int yymajor, sqlite3ParserTOKENTYPE yyminor sqlite3ParserARG_PDECL)"
.PP
.SS "SQLITE_PRIVATE void sqlite3Parser (void *, int, \fBToken\fP, \fBParse\fP *)"
.PP
.SS "SQLITE_PRIVATE void* sqlite3ParserAlloc (void *(*)(size_t) mallocProc)"
.PP
.SS "SQLITE_PRIVATE void* sqlite3ParserAlloc (void *(*)(size_t))"
.PP
.SS "SQLITE_PRIVATE void sqlite3ParserFree (void *, void(*)(void *))"
.PP
.SS "SQLITE_PRIVATE void sqlite3PCacheBufferSetup (void *, int sz, int n)"
.PP
.SS "SQLITE_PRIVATE void sqlite3PcacheCleanAll (\fBPCache\fP *)"
.PP
.SS "SQLITE_PRIVATE void sqlite3PcacheClear (\fBPCache\fP *)"
.PP
.SS "SQLITE_PRIVATE void sqlite3PcacheClearSyncFlags (\fBPCache\fP *)"
.PP
.SS "SQLITE_PRIVATE void sqlite3PcacheClose (\fBPCache\fP *)"
.PP
.SS "SQLITE_PRIVATE \fBPgHdr\fP* sqlite3PcacheDirtyList (\fBPCache\fP *)"
.PP
.SS "SQLITE_PRIVATE void sqlite3PcacheDrop (\fBPgHdr\fP *)"
.PP
.SS "SQLITE_PRIVATE int sqlite3PcacheFetch (\fBPCache\fP *, \fBPgno\fP, int createFlag, \fBPgHdr\fP **)"
.PP
.SS "SQLITE_PRIVATE int sqlite3PcacheInitialize (void)"
.PP
.SS "SQLITE_PRIVATE void sqlite3PcacheMakeClean (\fBPgHdr\fP *)"
.PP
.SS "SQLITE_PRIVATE void sqlite3PcacheMakeDirty (\fBPgHdr\fP *)"
.PP
.SS "SQLITE_PRIVATE void sqlite3PcacheMove (\fBPgHdr\fP *, \fBPgno\fP)"
.PP
.SS "SQLITE_PRIVATE void sqlite3PcacheOpen (int szPage, int szExtra, int bPurgeable, int(*)(void *, \fBPgHdr\fP *) xStress, void * pStress, \fBPCache\fP * pToInit)"
.PP
.SS "SQLITE_PRIVATE int sqlite3PcachePagecount (\fBPCache\fP *)"
.PP
.SS "SQLITE_PRIVATE int sqlite3PcachePageRefcount (\fBPgHdr\fP *)"
.PP
.SS "SQLITE_PRIVATE void sqlite3PcacheRef (\fBPgHdr\fP *)"
.PP
.SS "SQLITE_PRIVATE int sqlite3PcacheRefCount (\fBPCache\fP *)"
.PP
.SS "SQLITE_PRIVATE void sqlite3PcacheRelease (\fBPgHdr\fP *)"
.PP
.SS "SQLITE_PRIVATE void sqlite3PcacheSetCachesize (\fBPCache\fP *, int)"
.PP
.SS "SQLITE_PRIVATE void sqlite3PCacheSetDefault (void)"
.PP
.SS "SQLITE_PRIVATE void sqlite3PcacheSetPageSize (\fBPCache\fP *, int)"
.PP
.SS "SQLITE_PRIVATE void sqlite3PcacheShutdown (void)"
.PP
.SS "SQLITE_PRIVATE int sqlite3PcacheSize (void)"
.PP
.SS "SQLITE_PRIVATE void sqlite3PcacheTruncate (\fBPCache\fP *, \fBPgno\fP x)"
.PP
.SS "SQLITE_PRIVATE \fBExpr\fP* sqlite3PExpr (\fBParse\fP *, int, \fBExpr\fP *, \fBExpr\fP *, const \fBToken\fP *)"
.PP
.SS "SQLITE_PRIVATE void sqlite3Pragma (\fBParse\fP *, \fBToken\fP *, \fBToken\fP *, \fBToken\fP *, int)"
.PP
.SS "static int sqlite3Prepare (\fBsqlite3\fP * db, const char * zSql, int nBytes, int saveSqlFlag, \fBVdbe\fP * pReprepare, \fBsqlite3_stmt\fP ** ppStmt, const char ** pzTail)\fC [static]\fP"
.PP
.SS "static int sqlite3Prepare16 (\fBsqlite3\fP * db, const void * zSql, int nBytes, int saveSqlFlag, \fBsqlite3_stmt\fP ** ppStmt, const void ** pzTail)\fC [static]\fP"
.PP
.SS "SQLITE_PRIVATE void sqlite3PrngResetState (void)"
.PP
.SS "SQLITE_PRIVATE void sqlite3PrngRestoreState (void)"
.PP
.SS "SQLITE_PRIVATE void sqlite3PrngSaveState (void)"
.PP
.SS "SQLITE_PRIVATE void sqlite3Put4byte (unsigned char * p, \fBu32\fP v)"
.PP
.SS "SQLITE_PRIVATE void sqlite3Put4byte (\fBu8\fP *, \fBu32\fP)"
.PP
.SS "SQLITE_PRIVATE int sqlite3PutVarint (unsigned char *, \fBu64\fP)"
.PP
.SS "SQLITE_PRIVATE int sqlite3PutVarint32 (unsigned char *, \fBu32\fP)"
.PP
.SS "SQLITE_PRIVATE int sqlite3ReadSchema (\fBParse\fP * pParse)"
.PP
.SS "SQLITE_PRIVATE void* sqlite3Realloc (void *, int)"
.PP
.SS "static void sqlite3RefillIndex (\fBParse\fP * pParse, \fBIndex\fP * pIndex, int memRootPage)\fC [static]\fP"
.PP
.SS "SQLITE_PRIVATE void sqlite3RegisterBuiltinFunctions (\fBsqlite3\fP *)"
.PP
.SS "SQLITE_PRIVATE void sqlite3RegisterDateTimeFunctions (void)"
.PP
.SS "SQLITE_PRIVATE void sqlite3RegisterGlobalFunctions (void)"
.PP
.SS "SQLITE_PRIVATE void sqlite3RegisterLikeFunctions (\fBsqlite3\fP *, int)"
.PP
.SS "SQLITE_PRIVATE void sqlite3Reindex (\fBParse\fP *, \fBToken\fP *, \fBToken\fP *)"
.PP
.SS "SQLITE_PRIVATE void sqlite3ReleaseTempRange (\fBParse\fP *, int, int)"
.PP
.SS "SQLITE_PRIVATE void sqlite3ReleaseTempReg (\fBParse\fP *, int)"
.PP
.SS "SQLITE_PRIVATE int sqlite3Reprepare (\fBVdbe\fP *)"
.PP
.SS "SQLITE_PRIVATE void sqlite3ResetInternalSchema (\fBsqlite3\fP *, int)"
.PP
.SS "SQLITE_PRIVATE int sqlite3ResolveExprNames (\fBNameContext\fP *, \fBExpr\fP *)"
.PP
.SS "SQLITE_PRIVATE int sqlite3ResolveOrderGroupBy (\fBParse\fP *, \fBSelect\fP *, \fBExprList\fP *, const char *)"
.PP
.SS "SQLITE_PRIVATE void sqlite3ResolveSelectNames (\fBParse\fP *, \fBSelect\fP *, \fBNameContext\fP *)"
.PP
.SS "SQLITE_PRIVATE \fBTable\fP* sqlite3ResultSetOfSelect (\fBParse\fP *, \fBSelect\fP *)"
.PP
.SS "SQLITE_PRIVATE void sqlite3RollbackAll (\fBsqlite3\fP *)"
.PP
.SS "SQLITE_PRIVATE void sqlite3RollbackTransaction (\fBParse\fP *)"
.PP
.SS "SQLITE_PRIVATE void sqlite3RootPageMoved (\fBDb\fP *, int, int)"
.PP
.SS "SQLITE_PRIVATE void sqlite3RowSetClear (\fBRowSet\fP *)"
.PP
.SS "SQLITE_PRIVATE \fBRowSet\fP* sqlite3RowSetInit (\fBsqlite3\fP *, void *, unsigned int)"
.PP
.SS "SQLITE_PRIVATE void sqlite3RowSetInsert (\fBRowSet\fP *, \fBi64\fP)"
.PP
.SS "SQLITE_PRIVATE int sqlite3RowSetNext (\fBRowSet\fP *, \fBi64\fP *)"
.PP
.SS "SQLITE_PRIVATE int sqlite3RowSetTest (\fBRowSet\fP *, \fBu8\fP iBatch, \fBi64\fP)"
.PP
.SS "SQLITE_PRIVATE int sqlite3RunParser (\fBParse\fP *, const char *, char **)"
.PP
.SS "SQLITE_PRIVATE int sqlite3RunVacuum (char **, \fBsqlite3\fP *)"
.PP
.SS "SQLITE_PRIVATE int sqlite3SafetyCheckOk (\fBsqlite3\fP *)"
.PP
.SS "SQLITE_PRIVATE int sqlite3SafetyCheckSickOrOk (\fBsqlite3\fP *)"
.PP
.SS "SQLITE_PRIVATE void sqlite3Savepoint (\fBParse\fP *, int, \fBToken\fP *)"
.PP
.SS "SQLITE_PRIVATE void sqlite3SchemaFree (void *)"
.PP
.SS "SQLITE_PRIVATE \fBSchema\fP* sqlite3SchemaGet (\fBsqlite3\fP *, \fBBtree\fP *)"
.PP
.SS "SQLITE_PRIVATE int sqlite3SchemaToIndex (\fBsqlite3\fP * db, \fBSchema\fP *)"
.PP
.SS "SQLITE_PRIVATE void sqlite3ScratchFree (void *)"
.PP
.SS "SQLITE_PRIVATE void* sqlite3ScratchMalloc (int)"
.PP
.SS "SQLITE_PRIVATE int sqlite3Select (\fBParse\fP *, \fBSelect\fP *, \fBSelectDest\fP *)"
.PP
.SS "static void sqlite3SelectAddTypeInfo (\fBParse\fP * pParse, \fBSelect\fP * pSelect)\fC [static]\fP"
.PP
.SS "SQLITE_PRIVATE void sqlite3SelectDelete (\fBsqlite3\fP *, \fBSelect\fP *)"
.PP
.SS "SQLITE_PRIVATE void sqlite3SelectDestInit (\fBSelectDest\fP *, int, int)"
.PP
.SS "SQLITE_PRIVATE \fBSelect\fP* sqlite3SelectDup (\fBsqlite3\fP *, \fBSelect\fP *, int)"
.PP
.SS "static void sqlite3SelectExpand (\fBParse\fP * pParse, \fBSelect\fP * pSelect)\fC [static]\fP"
.PP
.SS "SQLITE_PRIVATE int sqlite3SelectExprHeight (\fBSelect\fP *)"
.PP
.SS "SQLITE_PRIVATE \fBSelect\fP* sqlite3SelectNew (\fBParse\fP *, \fBExprList\fP *, \fBSrcList\fP *, \fBExpr\fP *, \fBExprList\fP *, \fBExpr\fP *, \fBExprList\fP *, int, \fBExpr\fP *, \fBExpr\fP *)"
.PP
.SS "SQLITE_PRIVATE void sqlite3SelectPrep (\fBParse\fP *, \fBSelect\fP *, \fBNameContext\fP *)"
.PP
.SS "SQLITE_PRIVATE void sqlite3SetString (char **, \fBsqlite3\fP *, const char *,  ...)"
.PP
.SS "SQLITE_PRIVATE \fBSrcList\fP* sqlite3SrcListAppend (\fBsqlite3\fP *, \fBSrcList\fP *, \fBToken\fP *, \fBToken\fP *)"
.PP
.SS "SQLITE_PRIVATE \fBSrcList\fP* sqlite3SrcListAppendFromTerm (\fBParse\fP *, \fBSrcList\fP *, \fBToken\fP *, \fBToken\fP *, \fBToken\fP *, \fBSelect\fP *, \fBExpr\fP *, \fBIdList\fP *)"
.PP
.SS "SQLITE_PRIVATE void sqlite3SrcListAssignCursors (\fBParse\fP *, \fBSrcList\fP *)"
.PP
.SS "SQLITE_PRIVATE void sqlite3SrcListDelete (\fBsqlite3\fP *, \fBSrcList\fP *)"
.PP
.SS "SQLITE_PRIVATE \fBSrcList\fP* sqlite3SrcListDup (\fBsqlite3\fP *, \fBSrcList\fP *, int)"
.PP
.SS "SQLITE_PRIVATE \fBSrcList\fP* sqlite3SrcListEnlarge (\fBsqlite3\fP *, \fBSrcList\fP *, int, int)"
.PP
.SS "SQLITE_PRIVATE void sqlite3SrcListIndexedBy (\fBParse\fP *, \fBSrcList\fP *, \fBToken\fP *)"
.PP
.SS "SQLITE_PRIVATE \fBTable\fP* sqlite3SrcListLookup (\fBParse\fP *, \fBSrcList\fP *)"
.PP
.SS "SQLITE_PRIVATE void sqlite3SrcListShiftJoinType (\fBSrcList\fP *)"
.PP
.SS "SQLITE_PRIVATE void sqlite3StartTable (\fBParse\fP *, \fBToken\fP *, \fBToken\fP *, int, int, int, int)"
.PP
.SS "SQLITE_PRIVATE void sqlite3StatusAdd (int, int)"
.PP
.SS "SQLITE_PRIVATE void sqlite3StatusSet (int, int)"
.PP
.SS "SQLITE_PRIVATE int sqlite3StatusValue (int)"
.PP
.SS "static int sqlite3Step (\fBVdbe\fP * p)\fC [static]\fP"
.PP
.SS "SQLITE_PRIVATE void sqlite3StrAccumAppend (\fBStrAccum\fP *, const char *, int)"
.PP
.SS "SQLITE_PRIVATE char* sqlite3StrAccumFinish (\fBStrAccum\fP *)"
.PP
.SS "SQLITE_PRIVATE void sqlite3StrAccumInit (\fBStrAccum\fP *, char *, int, int)"
.PP
.SS "SQLITE_PRIVATE void sqlite3StrAccumReset (\fBStrAccum\fP *)"
.PP
.SS "SQLITE_PRIVATE int sqlite3StrICmp (const char *, const char *)"
.PP
.SS "SQLITE_PRIVATE int sqlite3Strlen30 (const char *)"
.PP
.SS "SQLITE_PRIVATE void sqlite3TableAffinityStr (\fBVdbe\fP *, \fBTable\fP *)"
.PP
.SS "SQLITE_PRIVATE void sqlite3TableLock (\fBParse\fP *, int, int, \fBu8\fP, const char *)"
.PP
.SS "SQLITE_PRIVATE int sqlite3TempInMemory (const \fBsqlite3\fP *)"
.PP
.SS "SQLITE_PRIVATE int sqlite3TransferBindings (\fBsqlite3_stmt\fP *, \fBsqlite3_stmt\fP *)"
.PP
.SS "SQLITE_PRIVATE \fBu32\fP sqlite3TriggerColmask (\fBParse\fP *, \fBTrigger\fP *, \fBExprList\fP *, int, int, \fBTable\fP *, int)"
.PP
.SS "SQLITE_PRIVATE \fBTriggerStep\fP* sqlite3TriggerDeleteStep (\fBsqlite3\fP *, \fBToken\fP *, \fBExpr\fP *)"
.PP
.SS "SQLITE_PRIVATE \fBTriggerStep\fP* sqlite3TriggerInsertStep (\fBsqlite3\fP *, \fBToken\fP *, \fBIdList\fP *, \fBExprList\fP *, \fBSelect\fP *, \fBu8\fP)"
.PP
.SS "SQLITE_PRIVATE \fBTrigger\fP* sqlite3TriggerList (\fBParse\fP *, \fBTable\fP *)"
.PP
.SS "SQLITE_PRIVATE \fBTriggerStep\fP* sqlite3TriggerSelectStep (\fBsqlite3\fP *, \fBSelect\fP *)"
.PP
.SS "SQLITE_PRIVATE \fBTrigger\fP* sqlite3TriggersExist (\fBParse\fP *, \fBTable\fP *, int, \fBExprList\fP *, int * pMask)"
.PP
.SS "SQLITE_PRIVATE \fBTriggerStep\fP* sqlite3TriggerUpdateStep (\fBsqlite3\fP *, \fBToken\fP *, \fBExprList\fP *, \fBExpr\fP *, \fBu8\fP)"
.PP
.SS "SQLITE_PRIVATE int sqlite3TwoPartName (\fBParse\fP *, \fBToken\fP *, \fBToken\fP *, \fBToken\fP **)"
.PP
.SS "SQLITE_PRIVATE void sqlite3UnlinkAndDeleteIndex (\fBsqlite3\fP *, int, const char *)"
.PP
.SS "SQLITE_PRIVATE void sqlite3UnlinkAndDeleteTable (\fBsqlite3\fP *, int, const char *)"
.PP
.SS "SQLITE_PRIVATE void sqlite3UnlinkAndDeleteTrigger (\fBsqlite3\fP *, int, const char *)"
.PP
.SS "SQLITE_PRIVATE void sqlite3Update (\fBParse\fP *, \fBSrcList\fP *, \fBExprList\fP *, \fBExpr\fP *, int)"
.PP
.SS "SQLITE_PRIVATE int sqlite3Utf16ByteLen (const void * pData, int nChar)"
.PP
.SS "SQLITE_PRIVATE char* sqlite3Utf16to8 (\fBsqlite3\fP *, const void *, int, \fBu8\fP)"
.PP
.SS "SQLITE_PRIVATE int sqlite3Utf8CharLen (const char * pData, int nByte)"
.PP
.SS "SQLITE_PRIVATE int sqlite3Utf8Read (const unsigned char * zIn, const unsigned char ** pzNext)"
.PP
.SS "SQLITE_PRIVATE int sqlite3Utf8Read (const \fBu8\fP *, const \fBu8\fP **)"
.PP
.SS "SQLITE_PRIVATE void sqlite3Vacuum (\fBParse\fP *)"
.PP
.SS "SQLITE_PRIVATE void sqlite3ValueApplyAffinity (\fBsqlite3_value\fP *, \fBu8\fP, \fBu8\fP)"
.PP
.SS "SQLITE_PRIVATE int sqlite3ValueBytes (\fBsqlite3_value\fP *, \fBu8\fP)"
.PP
.SS "SQLITE_PRIVATE void sqlite3ValueFree (\fBsqlite3_value\fP *)"
.PP
.SS "SQLITE_PRIVATE int sqlite3ValueFromExpr (\fBsqlite3\fP *, \fBExpr\fP *, \fBu8\fP, \fBu8\fP, \fBsqlite3_value\fP **)"
.PP
.SS "SQLITE_PRIVATE \fBsqlite3_value\fP* sqlite3ValueNew (\fBsqlite3\fP *)"
.PP
.SS "SQLITE_PRIVATE void sqlite3ValueSetStr (\fBsqlite3_value\fP *, int, const void *, \fBu8\fP, void(*)(void *))"
.PP
.SS "SQLITE_PRIVATE const void* sqlite3ValueText (\fBsqlite3_value\fP *, \fBu8\fP)"
.PP
.SS "SQLITE_PRIVATE int sqlite3VarintLen (\fBu64\fP v)"
.PP
.SS "SQLITE_PRIVATE int sqlite3VdbeAddOp0 (\fBVdbe\fP *, int)"
.PP
.SS "SQLITE_PRIVATE int sqlite3VdbeAddOp1 (\fBVdbe\fP *, int, int)"
.PP
.SS "SQLITE_PRIVATE int sqlite3VdbeAddOp2 (\fBVdbe\fP *, int, int, int)"
.PP
.SS "SQLITE_PRIVATE int sqlite3VdbeAddOp3 (\fBVdbe\fP *, int, int, int, int)"
.PP
.SS "SQLITE_PRIVATE int sqlite3VdbeAddOp4 (\fBVdbe\fP *, int, int, int, int, const char * zP4, int)"
.PP
.SS "SQLITE_PRIVATE int sqlite3VdbeAddOp4Int (\fBVdbe\fP *, int, int, int, int, int)"
.PP
.SS "SQLITE_PRIVATE int sqlite3VdbeAddOpList (\fBVdbe\fP *, int nOp, \fBVdbeOpList\fP const * aOp)"
.PP
.SS "SQLITE_PRIVATE int sqlite3VdbeChangeEncoding (\fBMem\fP *, int)"
.PP
.SS "SQLITE_PRIVATE void sqlite3VdbeChangeP1 (\fBVdbe\fP *, int addr, int P1)"
.PP
.SS "SQLITE_PRIVATE void sqlite3VdbeChangeP2 (\fBVdbe\fP *, int addr, int P2)"
.PP
.SS "SQLITE_PRIVATE void sqlite3VdbeChangeP3 (\fBVdbe\fP *, int addr, int P3)"
.PP
.SS "SQLITE_PRIVATE void sqlite3VdbeChangeP4 (\fBVdbe\fP *, int addr, const char * zP4, int N)"
.PP
.SS "SQLITE_PRIVATE void sqlite3VdbeChangeP5 (\fBVdbe\fP *, \fBu8\fP P5)"
.PP
.SS "SQLITE_PRIVATE void sqlite3VdbeChangeToNoop (\fBVdbe\fP *, int addr, int N)"
.PP
.SS "SQLITE_PRIVATE int sqlite3VdbeCheckFk (\fBVdbe\fP *, int)"
.PP
.SS "SQLITE_PRIVATE int sqlite3VdbeCloseStatement (\fBVdbe\fP *, int)"
.PP
.SS "SQLITE_PRIVATE void sqlite3VdbeCountChanges (\fBVdbe\fP *)"
.PP
.SS "SQLITE_PRIVATE \fBVdbe\fP* sqlite3VdbeCreate (\fBsqlite3\fP *)"
.PP
.SS "SQLITE_PRIVATE int sqlite3VdbeCurrentAddr (\fBVdbe\fP *)"
.PP
.SS "SQLITE_PRIVATE int sqlite3VdbeCursorMoveto (\fBVdbeCursor\fP *)"
.PP
.SS "SQLITE_PRIVATE \fBsqlite3\fP* sqlite3VdbeDb (\fBVdbe\fP *)"
.PP
.SS "SQLITE_PRIVATE void sqlite3VdbeDelete (\fBVdbe\fP *)"
.PP
.SS "SQLITE_PRIVATE void sqlite3VdbeDeleteAuxData (\fBVdbeFunc\fP *, int)"
.PP
.SS "SQLITE_PRIVATE void sqlite3VdbeDeleteObject (\fBsqlite3\fP *, \fBVdbe\fP *)"
.PP
.SS "SQLITE_PRIVATE void sqlite3VdbeDeleteUnpackedRecord (\fBUnpackedRecord\fP *)"
.PP
.SS "SQLITE_PRIVATE int sqlite3VdbeExec (\fBVdbe\fP *)"
.PP
.SS "SQLITE_PRIVATE char* sqlite3VdbeExpandSql (\fBVdbe\fP *, const char *)"
.PP
.SS "SQLITE_PRIVATE int sqlite3VdbeFinalize (\fBVdbe\fP *)"
.PP
.SS "SQLITE_PRIVATE void sqlite3VdbeFrameDelete (\fBVdbeFrame\fP *)"
.PP
.SS "SQLITE_PRIVATE int sqlite3VdbeFrameRestore (\fBVdbeFrame\fP *)"
.PP
.SS "SQLITE_PRIVATE void sqlite3VdbeFreeCursor (\fBVdbe\fP *, \fBVdbeCursor\fP *)"
.PP
.SS "SQLITE_PRIVATE \fBVdbeOp\fP* sqlite3VdbeGetOp (\fBVdbe\fP *, int)"
.PP
.SS "SQLITE_PRIVATE \fBsqlite3_value\fP* sqlite3VdbeGetValue (\fBVdbe\fP *, int, \fBu8\fP)"
.PP
.SS "SQLITE_PRIVATE int sqlite3VdbeHalt (\fBVdbe\fP *)"
.PP
.SS "SQLITE_PRIVATE int sqlite3VdbeIdxKeyCompare (\fBVdbeCursor\fP *, \fBUnpackedRecord\fP *, int *)"
.PP
.SS "SQLITE_PRIVATE int sqlite3VdbeIdxRowid (\fBsqlite3\fP *, \fBBtCursor\fP *, \fBi64\fP *)"
.PP
.SS "SQLITE_PRIVATE void sqlite3VdbeIntegerAffinity (\fBMem\fP *)"
.PP
.SS "SQLITE_PRIVATE \fBi64\fP sqlite3VdbeIntValue (\fBMem\fP *)"
.PP
.SS "SQLITE_PRIVATE void sqlite3VdbeJumpHere (\fBVdbe\fP *, int addr)"
.PP
.SS "SQLITE_PRIVATE void sqlite3VdbeLinkSubProgram (\fBVdbe\fP *, \fBSubProgram\fP *)"
.PP
.SS "SQLITE_PRIVATE int sqlite3VdbeList (\fBVdbe\fP *)"
.PP
.SS "SQLITE_PRIVATE int sqlite3VdbeMakeLabel (\fBVdbe\fP *)"
.PP
.SS "SQLITE_PRIVATE void sqlite3VdbeMakeReady (\fBVdbe\fP *, int, int, int, int, int, int)"
.PP
.SS "SQLITE_PRIVATE int sqlite3VdbeMemCopy (\fBMem\fP *, const \fBMem\fP *)"
.PP
.SS "SQLITE_PRIVATE int sqlite3VdbeMemExpandBlob (\fBMem\fP *)"
.PP
.SS "SQLITE_PRIVATE int sqlite3VdbeMemFinalize (\fBMem\fP *, \fBFuncDef\fP *)"
.PP
.SS "SQLITE_PRIVATE int sqlite3VdbeMemFromBtree (\fBBtCursor\fP *, int, int, int, \fBMem\fP *)"
.PP
.SS "SQLITE_PRIVATE int sqlite3VdbeMemGrow (\fBMem\fP * pMem, int n, int preserve)"
.PP
.SS "SQLITE_PRIVATE int sqlite3VdbeMemHandleBom (\fBMem\fP * pMem)"
.PP
.SS "SQLITE_PRIVATE int sqlite3VdbeMemIntegerify (\fBMem\fP *)"
.PP
.SS "SQLITE_PRIVATE int sqlite3VdbeMemMakeWriteable (\fBMem\fP *)"
.PP
.SS "SQLITE_PRIVATE void sqlite3VdbeMemMove (\fBMem\fP *, \fBMem\fP *)"
.PP
.SS "SQLITE_PRIVATE int sqlite3VdbeMemNulTerminate (\fBMem\fP *)"
.PP
.SS "SQLITE_PRIVATE int sqlite3VdbeMemNumerify (\fBMem\fP *)"
.PP
.SS "SQLITE_PRIVATE int sqlite3VdbeMemRealify (\fBMem\fP *)"
.PP
.SS "SQLITE_PRIVATE void sqlite3VdbeMemRelease (\fBMem\fP * p)"
.PP
.SS "SQLITE_PRIVATE void sqlite3VdbeMemReleaseExternal (\fBMem\fP * p)"
.PP
.SS "SQLITE_PRIVATE void sqlite3VdbeMemSetDouble (\fBMem\fP *, double)"
.PP
.SS "SQLITE_PRIVATE void sqlite3VdbeMemSetInt64 (\fBMem\fP *, \fBi64\fP)"
.PP
.SS "SQLITE_PRIVATE void sqlite3VdbeMemSetNull (\fBMem\fP *)"
.PP
.SS "SQLITE_PRIVATE void sqlite3VdbeMemSetRowSet (\fBMem\fP *)"
.PP
.SS "SQLITE_PRIVATE int sqlite3VdbeMemSetStr (\fBMem\fP *, const char *, int, \fBu8\fP, void(*)(void *))"
.PP
.SS "SQLITE_PRIVATE void sqlite3VdbeMemSetZeroBlob (\fBMem\fP *, int)"
.PP
.SS "SQLITE_PRIVATE void sqlite3VdbeMemShallowCopy (\fBMem\fP *, const \fBMem\fP *, int)"
.PP
.SS "SQLITE_PRIVATE void sqlite3VdbeMemStoreType (\fBMem\fP * pMem)"
.PP
.SS "SQLITE_PRIVATE int sqlite3VdbeMemStringify (\fBMem\fP *, int)"
.PP
.SS "SQLITE_PRIVATE int sqlite3VdbeMemTooBig (\fBMem\fP *)"
.PP
.SS "SQLITE_PRIVATE int sqlite3VdbeMemTranslate (\fBMem\fP *, \fBu8\fP)"
.PP
.SS "SQLITE_PRIVATE void sqlite3VdbeMutexArrayEnter (\fBVdbe\fP * p)"
.PP
.SS "SQLITE_PRIVATE int sqlite3VdbeParameterIndex (\fBVdbe\fP *, const char *, int)"
.PP
.SS "SQLITE_PRIVATE double sqlite3VdbeRealValue (\fBMem\fP *)"
.PP
.SS "SQLITE_PRIVATE int sqlite3VdbeRecordCompare (int, const void *, \fBUnpackedRecord\fP *)"
.PP
.SS "SQLITE_PRIVATE \fBUnpackedRecord\fP* sqlite3VdbeRecordUnpack (\fBKeyInfo\fP *, int, const void *, char *, int)"
.PP
.SS "SQLITE_PRIVATE int sqlite3VdbeReset (\fBVdbe\fP *)"
.PP
.SS "SQLITE_PRIVATE void sqlite3VdbeResetStepResult (\fBVdbe\fP *)"
.PP
.SS "SQLITE_PRIVATE void sqlite3VdbeResolveLabel (\fBVdbe\fP *, int)"
.PP
.SS "SQLITE_PRIVATE void sqlite3VdbeRunOnlyOnce (\fBVdbe\fP *)"
.PP
.SS "SQLITE_PRIVATE \fBu32\fP sqlite3VdbeSerialGet (const unsigned char *, \fBu32\fP, \fBMem\fP *)"
.PP
.SS "SQLITE_PRIVATE \fBu32\fP sqlite3VdbeSerialPut (\fBu8\fP * buf, int nBuf, \fBMem\fP * pMem, int file_format)"
.PP
.SS "SQLITE_PRIVATE \fBu32\fP sqlite3VdbeSerialPut (unsigned char *, int, \fBMem\fP *, int)"
.PP
.SS "SQLITE_PRIVATE \fBu32\fP sqlite3VdbeSerialType (\fBMem\fP *, int)"
.PP
.SS "SQLITE_PRIVATE \fBu32\fP sqlite3VdbeSerialTypeLen (\fBu32\fP)"
.PP
.SS "SQLITE_PRIVATE void sqlite3VdbeSetChanges (\fBsqlite3\fP *, int)"
.PP
.SS "SQLITE_PRIVATE int sqlite3VdbeSetColName (\fBVdbe\fP *, int, int, const char *, void(*)(void *))"
.PP
.SS "SQLITE_PRIVATE void sqlite3VdbeSetNumCols (\fBVdbe\fP *, int)"
.PP
.SS "SQLITE_PRIVATE void sqlite3VdbeSetSql (\fBVdbe\fP *, const char * z, int n, int)"
.PP
.SS "SQLITE_PRIVATE void sqlite3VdbeSetVarmask (\fBVdbe\fP *, int)"
.PP
.SS "SQLITE_PRIVATE void sqlite3VdbeSwap (\fBVdbe\fP *, \fBVdbe\fP *)"
.PP
.SS "SQLITE_PRIVATE \fBVdbeOp\fP* sqlite3VdbeTakeOpArray (\fBVdbe\fP *, int *, int *)"
.PP
.SS "SQLITE_PRIVATE void sqlite3VdbeUsesBtree (\fBVdbe\fP *, int)"
.PP
.SS "SQLITE_PRIVATE int sqlite3ViewGetColumnNames (\fBParse\fP *, \fBTable\fP *)"
.PP
.SS "SQLITE_PRIVATE char* sqlite3VMPrintf (\fBsqlite3\fP *, const char *, va_list)"
.PP
.SS "SQLITE_PRIVATE void sqlite3VtabArgExtend (\fBParse\fP *, \fBToken\fP *)"
.PP
.SS "SQLITE_PRIVATE void sqlite3VtabArgInit (\fBParse\fP *)"
.PP
.SS "SQLITE_PRIVATE int sqlite3VtabBegin (\fBsqlite3\fP *, \fBVTable\fP *)"
.PP
.SS "SQLITE_PRIVATE void sqlite3VtabBeginParse (\fBParse\fP *, \fBToken\fP *, \fBToken\fP *, \fBToken\fP *)"
.PP
.SS "SQLITE_PRIVATE int sqlite3VtabCallConnect (\fBParse\fP *, \fBTable\fP *)"
.PP
.SS "SQLITE_PRIVATE int sqlite3VtabCallCreate (\fBsqlite3\fP *, int, const char *, char **)"
.PP
.SS "SQLITE_PRIVATE int sqlite3VtabCallDestroy (\fBsqlite3\fP *, int, const char *)"
.PP
.SS "SQLITE_PRIVATE void sqlite3VtabClear (\fBsqlite3\fP * db, \fBTable\fP *)"
.PP
.SS "SQLITE_PRIVATE int sqlite3VtabCommit (\fBsqlite3\fP * db)"
.PP
.SS "SQLITE_PRIVATE void sqlite3VtabFinishParse (\fBParse\fP *, \fBToken\fP *)"
.PP
.SS "SQLITE_PRIVATE void sqlite3VtabLock (\fBVTable\fP *)"
.PP
.SS "SQLITE_PRIVATE void sqlite3VtabMakeWritable (\fBParse\fP *, \fBTable\fP *)"
.PP
.SS "SQLITE_PRIVATE \fBFuncDef\fP* sqlite3VtabOverloadFunction (\fBsqlite3\fP *, \fBFuncDef\fP *, int nArg, \fBExpr\fP *)"
.PP
.SS "SQLITE_PRIVATE int sqlite3VtabRollback (\fBsqlite3\fP * db)"
.PP
.SS "SQLITE_PRIVATE int sqlite3VtabSync (\fBsqlite3\fP * db, char **)"
.PP
.SS "SQLITE_PRIVATE void sqlite3VtabUnlock (\fBVTable\fP *)"
.PP
.SS "SQLITE_PRIVATE void sqlite3VtabUnlockList (\fBsqlite3\fP *)"
.PP
.SS "SQLITE_PRIVATE void sqlite3VXPrintf (\fBStrAccum\fP *, int, const char *, va_list)"
.PP
.SS "SQLITE_PRIVATE int sqlite3WalBeginReadTransaction (\fBWal\fP * pWal, int *)"
.PP
.SS "SQLITE_PRIVATE int sqlite3WalBeginWriteTransaction (\fBWal\fP * pWal)"
.PP
.SS "SQLITE_PRIVATE int sqlite3WalCallback (\fBWal\fP * pWal)"
.PP
.SS "SQLITE_PRIVATE int sqlite3WalCheckpoint (\fBWal\fP * pWal, int sync_flags, int nBuf, \fBu8\fP * zBuf)"
.PP
.SS "SQLITE_PRIVATE int sqlite3WalClose (\fBWal\fP * pWal, int sync_flags, int, \fBu8\fP *)"
.PP
.SS "SQLITE_PRIVATE \fBPgno\fP sqlite3WalDbsize (\fBWal\fP * pWal)"
.PP
.SS "SQLITE_PRIVATE int sqlite3WalDefaultHook (void *, \fBsqlite3\fP *, const char *, int)"
.PP
.SS "SQLITE_PRIVATE void sqlite3WalEndReadTransaction (\fBWal\fP * pWal)"
.PP
.SS "SQLITE_PRIVATE int sqlite3WalEndWriteTransaction (\fBWal\fP * pWal)"
.PP
.SS "SQLITE_PRIVATE int sqlite3WalExclusiveMode (\fBWal\fP * pWal, int op)"
.PP
.SS "SQLITE_PRIVATE int sqlite3WalFrames (\fBWal\fP * pWal, int, \fBPgHdr\fP *, \fBPgno\fP, int, int)"
.PP
.SS "SQLITE_PRIVATE int sqlite3WalkExpr (\fBWalker\fP *, \fBExpr\fP *)"
.PP
.SS "SQLITE_PRIVATE int sqlite3WalkExprList (\fBWalker\fP *, \fBExprList\fP *)"
.PP
.SS "SQLITE_PRIVATE int sqlite3WalkSelect (\fBWalker\fP *, \fBSelect\fP *)"
.PP
.SS "SQLITE_PRIVATE int sqlite3WalkSelectExpr (\fBWalker\fP *, \fBSelect\fP *)"
.PP
.SS "SQLITE_PRIVATE int sqlite3WalkSelectFrom (\fBWalker\fP *, \fBSelect\fP *)"
.PP
.SS "SQLITE_PRIVATE int sqlite3WalOpen (\fBsqlite3_vfs\fP *, \fBsqlite3_file\fP *, const char * zName, \fBWal\fP **)"
.PP
.SS "SQLITE_PRIVATE int sqlite3WalRead (\fBWal\fP * pWal, \fBPgno\fP pgno, int * pInWal, int nOut, \fBu8\fP * pOut)"
.PP
.SS "SQLITE_PRIVATE void sqlite3WalSavepoint (\fBWal\fP * pWal, \fBu32\fP * aWalData)"
.PP
.SS "SQLITE_PRIVATE int sqlite3WalSavepointUndo (\fBWal\fP * pWal, \fBu32\fP * aWalData)"
.PP
.SS "SQLITE_PRIVATE int sqlite3WalUndo (\fBWal\fP * pWal, int(*)(void *, \fBPgno\fP) xUndo, void * pUndoCtx)"
.PP
.SS "SQLITE_PRIVATE \fBWhereInfo\fP* sqlite3WhereBegin (\fBParse\fP *, \fBSrcList\fP *, \fBExpr\fP *, \fBExprList\fP **, \fBu16\fP)"
.PP
.SS "SQLITE_PRIVATE void sqlite3WhereEnd (\fBWhereInfo\fP *)"
.PP
.SS "SQLITE_PRIVATE void sqlite3XPrintf (\fBStrAccum\fP *, const char *,  ...)"
.PP
.SS "static void sqliteAuthBadReturnCode (\fBParse\fP * pParse)\fC [static]\fP"
.PP
.SS "static int sqliteDefaultBusyCallback (void * ptr, int count)\fC [static]\fP"
.PP
.SS "static void sqliteDeleteColumnNames (\fBsqlite3\fP * db, \fBTable\fP * pTable)\fC [static]\fP"
.PP
.SS "static int sqliteErrorFromPosixError (int posixError, int sqliteIOErr)\fC [static]\fP"
.PP
.SS "static int sqliteProcessJoin (\fBParse\fP * pParse, \fBSelect\fP * p)\fC [static]\fP"
.PP
.SS "void sqliteVdbePopStack (\fBVdbe\fP *, int)"
.PP
.SS "static void sqliteViewResetAll (\fBsqlite3\fP * db, int idx)\fC [static]\fP"
.PP
.SS "void sqliteViewTriggers (\fBParse\fP *, \fBTable\fP *, \fBExpr\fP *, int, \fBExprList\fP *)"
.PP
.SS "static void strftimeFunc (\fBsqlite3_context\fP * context, int argc, \fBsqlite3_value\fP ** argv)\fC [static]\fP"
.PP
.SS "static unsigned int strHash (const char * z, int nKey)\fC [static]\fP"
.PP
.SS "static int subjournalPage (\fBPgHdr\fP * pPg)\fC [static]\fP"
.PP
.SS "static int subjRequiresPage (\fBPgHdr\fP * pPg)\fC [static]\fP"
.PP
.SS "static \fBExpr\fP* substExpr (\fBsqlite3\fP * db, \fBExpr\fP * pExpr, int iTable, \fBExprList\fP * pEList)\fC [static]\fP"
.PP
.SS "static void substExprList (\fBsqlite3\fP *, \fBExprList\fP *, int, \fBExprList\fP *)\fC [static]\fP"
.PP
.SS "static void substrFunc (\fBsqlite3_context\fP * context, int argc, \fBsqlite3_value\fP ** argv)\fC [static]\fP"
.PP
.SS "static void substSelect (\fBsqlite3\fP *, \fBSelect\fP *, int, \fBExprList\fP *)\fC [static]\fP"
.PP
.SS "static void sumFinalize (\fBsqlite3_context\fP * context)\fC [static]\fP"
.PP
.SS "static void sumStep (\fBsqlite3_context\fP * context, int argc, \fBsqlite3_value\fP ** argv)\fC [static]\fP"
.PP
.SS "static int syncJournal (\fBPager\fP * pPager, int newHdr)\fC [static]\fP"
.PP
.SS "static int synthCollSeq (\fBsqlite3\fP * db, \fBCollSeq\fP * pColl)\fC [static]\fP"
.PP
.SS "static int tableAndColumnIndex (\fBSrcList\fP * pSrc, int N, const char * zCol, int * piTab, int * piCol)\fC [static]\fP"
.PP
.SS "static \fBTable\fP* tableOfTrigger (\fBTrigger\fP * pTrigger)\fC [static]\fP"
.PP
.SS "static \fBSrcList\fP* targetSrcList (\fBParse\fP * pParse, \fBTriggerStep\fP * pStep)\fC [static]\fP"
.PP
.SS "static int termCanDriveIndex (\fBWhereTerm\fP * pTerm, struct SrcList_item * pSrc, \fBBitmask\fP notReady)\fC [static]\fP"
.PP
.SS "static void timeFunc (\fBsqlite3_context\fP * context, int argc, \fBsqlite3_value\fP ** argv)\fC [static]\fP"
.PP
.SS "static void total_changes (\fBsqlite3_context\fP * context, int NotUsed, \fBsqlite3_value\fP ** NotUsed2)\fC [static]\fP"
.PP
.SS "static void totalFinalize (\fBsqlite3_context\fP * context)\fC [static]\fP"
.PP
.SS "static void transferJoinMarkings (\fBExpr\fP * pDerived, \fBExpr\fP * pBase)\fC [static]\fP"
.PP
.SS "static void transferParseError (\fBParse\fP * pTo, \fBParse\fP * pFrom)\fC [static]\fP"
.PP
.SS "static \fBTriggerStep\fP* triggerStepAllocate (\fBsqlite3\fP * db, \fBu8\fP op, \fBToken\fP * pName)\fC [static]\fP"
.PP
.SS "static void trimFunc (\fBsqlite3_context\fP * context, int argc, \fBsqlite3_value\fP ** argv)\fC [static]\fP"
.PP
.SS "static void typeofFunc (\fBsqlite3_context\fP * context, int NotUsed, \fBsqlite3_value\fP ** argv)\fC [static]\fP"
.PP
.SS "static int unixAccess (\fBsqlite3_vfs\fP * NotUsed, const char * zPath, int flags, int * pResOut)\fC [static]\fP"
.PP
.SS "static int unixCheckReservedLock (\fBsqlite3_file\fP * id, int * pResOut)\fC [static]\fP"
.PP
.SS "static int unixClose (\fBsqlite3_file\fP * id)\fC [static]\fP"
.PP
.SS "static int unixCurrentTime (\fBsqlite3_vfs\fP * NotUsed, double * prNow)\fC [static]\fP"
.PP
.SS "static int unixCurrentTimeInt64 (\fBsqlite3_vfs\fP * NotUsed, \fBsqlite3_int64\fP * piNow)\fC [static]\fP"
.PP
.SS "static int unixDelete (\fBsqlite3_vfs\fP * NotUsed, const char * zPath, int dirSync)\fC [static]\fP"
.PP
.SS "static int unixDeviceCharacteristics (\fBsqlite3_file\fP * NotUsed)\fC [static]\fP"
.PP
.SS "static void unixDlClose (\fBsqlite3_vfs\fP * NotUsed, void * pHandle)\fC [static]\fP"
.PP
.SS "static void unixDlError (\fBsqlite3_vfs\fP * NotUsed, int nBuf, char * zBufOut)\fC [static]\fP"
.PP
.SS "static void* unixDlOpen (\fBsqlite3_vfs\fP * NotUsed, const char * zFilename)\fC [static]\fP"
.PP
.SS "static void(*)(void) unixDlSym ()\fC [static]\fP"
.PP
.SS "static void unixEnterMutex (void)\fC [static]\fP"
.PP
.SS "static int unixFileControl (\fBsqlite3_file\fP * id, int op, void * pArg)\fC [static]\fP"
.PP
.SS "static int unixFileSize (\fBsqlite3_file\fP * id, \fBi64\fP * pSize)\fC [static]\fP"
.PP
.SS "static int unixFullPathname (\fBsqlite3_vfs\fP * pVfs, const char * zPath, int nOut, char * zOut)\fC [static]\fP"
.PP
.SS "static int unixGetLastError (\fBsqlite3_vfs\fP * NotUsed, int NotUsed2, char * NotUsed3)\fC [static]\fP"
.PP
.SS "static int unixGetTempname (int nBuf, char * zBuf)\fC [static]\fP"
.PP
.SS "static void unixLeaveMutex (void)\fC [static]\fP"
.PP
.SS "static int unixLock (\fBsqlite3_file\fP * id, int eFileLock)\fC [static]\fP"
.PP
.SS "static int unixOpen (\fBsqlite3_vfs\fP * pVfs, const char * zPath, \fBsqlite3_file\fP * pFile, int flags, int * pOutFlags)\fC [static]\fP"
.PP
.SS "static int unixOpenSharedMemory (\fBunixFile\fP * pDbFd)\fC [static]\fP"
.PP
.SS "static int unixRandomness (\fBsqlite3_vfs\fP * NotUsed, int nBuf, char * zBuf)\fC [static]\fP"
.PP
.SS "static int unixRead (\fBsqlite3_file\fP * id, void * pBuf, int amt, \fBsqlite3_int64\fP offset)\fC [static]\fP"
.PP
.SS "static int unixSectorSize (\fBsqlite3_file\fP * NotUsed)\fC [static]\fP"
.PP
.SS "static void unixShmBarrier (\fBsqlite3_file\fP * fd)\fC [static]\fP"
.PP
.SS "static int unixShmLock (\fBsqlite3_file\fP * fd, int ofst, int n, int flags)\fC [static]\fP"
.PP
.SS "static int unixShmMap (\fBsqlite3_file\fP * fd, int iRegion, int szRegion, int bExtend, void volatile ** pp)\fC [static]\fP"
.PP
.SS "static void unixShmPurge (\fBunixFile\fP * pFd)\fC [static]\fP"
.PP
.SS "static int unixShmSystemLock (\fBunixShmNode\fP * pShmNode, int lockType, int ofst, int n)\fC [static]\fP"
.PP
.SS "static int unixShmUnmap (\fBsqlite3_file\fP * fd, int deleteFlag)\fC [static]\fP"
.PP
.SS "static int unixSleep (\fBsqlite3_vfs\fP * NotUsed, int microseconds)\fC [static]\fP"
.PP
.SS "static int unixSync (\fBsqlite3_file\fP * id, int flags)\fC [static]\fP"
.PP
.SS "static const char* unixTempFileDir (void)\fC [static]\fP"
.PP
.SS "static int unixTruncate (\fBsqlite3_file\fP * id, \fBi64\fP nByte)\fC [static]\fP"
.PP
.SS "static int unixUnlock (\fBsqlite3_file\fP * id, int eFileLock)\fC [static]\fP"
.PP
.SS "static int unixWrite (\fBsqlite3_file\fP * id, const void * pBuf, int amt, \fBsqlite3_int64\fP offset)\fC [static]\fP"
.PP
.SS "static void unlockBtreeIfUnused (\fBBtShared\fP * pBt)\fC [static]\fP"
.PP
.SS "static void unlockBtreeMutex (\fBBtree\fP * p)\fC [static]\fP"
.PP
.SS "static void updateAccumulator (\fBParse\fP * pParse, \fBAggInfo\fP * pAggInfo)\fC [static]\fP"
.PP
.SS "static void updateVirtualTable (\fBParse\fP * pParse, \fBSrcList\fP * pSrc, \fBTable\fP * pTab, \fBExprList\fP * pChanges, \fBExpr\fP * pRowidExpr, int * aXRef, \fBExpr\fP * pWhere)\fC [static]\fP"
.PP
.SS "static void upperFunc (\fBsqlite3_context\fP * context, int argc, \fBsqlite3_value\fP ** argv)\fC [static]\fP"
.PP
.SS "static int vacuumFinalize (\fBsqlite3\fP * db, \fBsqlite3_stmt\fP * pStmt, char ** pzErrMsg)\fC [static]\fP"
.PP
.SS "static int vdbeCommit (\fBsqlite3\fP * db, \fBVdbe\fP * p)\fC [static]\fP"
.PP
.SS "static void vdbeFreeOpArray (\fBsqlite3\fP *, \fBOp\fP *, int)\fC [static]\fP"
.PP
.SS "static int vdbeSafety (\fBVdbe\fP * p)\fC [static]\fP"
.PP
.SS "static int vdbeSafetyNotNull (\fBVdbe\fP * p)\fC [static]\fP"
.PP
.SS "static int vdbeUnbind (\fBVdbe\fP * p, int i)\fC [static]\fP"
.PP
.SS "static void versionFunc (\fBsqlite3_context\fP * context, int NotUsed, \fBsqlite3_value\fP ** NotUsed2)\fC [static]\fP"
.PP
.SS "static void vfsUnlink (\fBsqlite3_vfs\fP * pVfs)\fC [static]\fP"
.PP
.SS "static int vtabBestIndex (\fBParse\fP * pParse, \fBTable\fP * pTab, \fBsqlite3_index_info\fP * p)\fC [static]\fP"
.PP
.SS "static int vtabCallConstructor (\fBsqlite3\fP * db, \fBTable\fP * pTab, \fBModule\fP * pMod, int(*)(\fBsqlite3\fP *, void *, int, const char *const *, \fBsqlite3_vtab\fP **, char **) xConstruct, char ** pzErr)\fC [static]\fP"
.PP
.SS "static \fBVTable\fP* vtabDisconnectAll (\fBsqlite3\fP * db, \fBTable\fP * p)\fC [static]\fP"
.PP
.SS "static int walCheckpoint (\fBWal\fP * pWal, int sync_flags, int nBuf, \fBu8\fP * zBuf)\fC [static]\fP"
.PP
.SS "static void walChecksumBytes (int nativeCksum, \fBu8\fP * a, int nByte, const \fBu32\fP * aIn, \fBu32\fP * aOut)\fC [static]\fP"
.PP
.SS "static volatile \fBWalCkptInfo\fP* walCkptInfo (\fBWal\fP * pWal)\fC [static]\fP"
.PP
.SS "static void walCleanupHash (\fBWal\fP * pWal)\fC [static]\fP"
.PP
.SS "static int walDecodeFrame (\fBWal\fP * pWal, \fBu32\fP * piPage, \fBu32\fP * pnTruncate, \fBu8\fP * aData, \fBu8\fP * aFrame)\fC [static]\fP"
.PP
.SS "static void walEncodeFrame (\fBWal\fP * pWal, \fBu32\fP iPage, \fBu32\fP nTruncate, \fBu8\fP * aData, \fBu8\fP * aFrame)\fC [static]\fP"
.PP
.SS "static int walFramePage (\fBu32\fP iFrame)\fC [static]\fP"
.PP
.SS "static \fBu32\fP walFramePgno (\fBWal\fP * pWal, \fBu32\fP iFrame)\fC [static]\fP"
.PP
.SS "static int walHash (\fBu32\fP iPage)\fC [static]\fP"
.PP
.SS "static int walHashGet (\fBWal\fP * pWal, int iHash, volatile \fBht_slot\fP ** paHash, volatile \fBu32\fP ** paPgno, \fBu32\fP * piZero)\fC [static]\fP"
.PP
.SS "static int walIndexAppend (\fBWal\fP * pWal, \fBu32\fP iFrame, \fBu32\fP iPage)\fC [static]\fP"
.PP
.SS "static void walIndexClose (\fBWal\fP * pWal, int isDelete)\fC [static]\fP"
.PP
.SS "static volatile \fBWalIndexHdr\fP* walIndexHdr (\fBWal\fP * pWal)\fC [static]\fP"
.PP
.SS "static int walIndexPage (\fBWal\fP * pWal, int iPage, volatile \fBu32\fP ** ppPage)\fC [static]\fP"
.PP
.SS "static int walIndexReadHdr (\fBWal\fP * pWal, int * pChanged)\fC [static]\fP"
.PP
.SS "static int walIndexRecover (\fBWal\fP * pWal)\fC [static]\fP"
.PP
.SS "static int walIndexTryHdr (\fBWal\fP * pWal, int * pChanged)\fC [static]\fP"
.PP
.SS "static void walIndexWriteHdr (\fBWal\fP * pWal)\fC [static]\fP"
.PP
.SS "static void walIteratorFree (\fBWalIterator\fP * p)\fC [static]\fP"
.PP
.SS "static int walIteratorInit (\fBWal\fP * pWal, \fBWalIterator\fP ** pp)\fC [static]\fP"
.PP
.SS "static int walIteratorNext (\fBWalIterator\fP * p, \fBu32\fP * piPage, \fBu32\fP * piFrame)\fC [static]\fP"
.PP
.SS "static int walLockExclusive (\fBWal\fP * pWal, int lockIdx, int n)\fC [static]\fP"
.PP
.SS "static int walLockShared (\fBWal\fP * pWal, int lockIdx)\fC [static]\fP"
.PP
.SS "static void walMerge (\fBu32\fP * aContent, \fBht_slot\fP * aLeft, int nLeft, \fBht_slot\fP ** paRight, int * pnRight, \fBht_slot\fP * aTmp)\fC [static]\fP"
.PP
.SS "static void walMergesort (\fBu32\fP * aContent, \fBht_slot\fP * aBuffer, \fBht_slot\fP * aList, int * pnList)\fC [static]\fP"
.PP
.SS "static int walNextHash (int iPriorHash)\fC [static]\fP"
.PP
.SS "static int walRestartLog (\fBWal\fP * pWal)\fC [static]\fP"
.PP
.SS "static int walTryBeginRead (\fBWal\fP * pWal, int * pChanged, int useWal, int cnt)\fC [static]\fP"
.PP
.SS "static void walUnlockExclusive (\fBWal\fP * pWal, int lockIdx, int n)\fC [static]\fP"
.PP
.SS "static void walUnlockShared (\fBWal\fP * pWal, int lockIdx)\fC [static]\fP"
.PP
.SS "static void whereAndInfoDelete (\fBsqlite3\fP * db, \fBWhereAndInfo\fP * p)\fC [static]\fP"
.PP
.SS "static void whereClauseClear (\fBWhereClause\fP *)\fC [static]\fP"
.PP
.SS "static void whereClauseInit (\fBWhereClause\fP * pWC, \fBParse\fP * pParse, \fBWhereMaskSet\fP * pMaskSet)\fC [static]\fP"
.PP
.SS "static int whereClauseInsert (\fBWhereClause\fP * pWC, \fBExpr\fP * p, \fBu8\fP wtFlags)\fC [static]\fP"
.PP
.SS "static char* whereForeignKeys (\fBParse\fP * pParse, \fBTable\fP * pTab)\fC [static]\fP"
.PP
.SS "static void whereInfoFree (\fBsqlite3\fP * db, \fBWhereInfo\fP * pWInfo)\fC [static]\fP"
.PP
.SS "static void whereOrInfoDelete (\fBsqlite3\fP * db, \fBWhereOrInfo\fP * p)\fC [static]\fP"
.PP
.SS "static char* whereOrName (\fBsqlite3\fP * db, char * zWhere, char * zConstant)\fC [static]\fP"
.PP
.SS "static int whereRangeScanEst (\fBParse\fP * pParse, \fBIndex\fP * p, int nEq, \fBWhereTerm\fP * pLower, \fBWhereTerm\fP * pUpper, int * piEst)\fC [static]\fP"
.PP
.SS "static void whereSplit (\fBWhereClause\fP * pWC, \fBExpr\fP * pExpr, int op)\fC [static]\fP"
.PP
.SS "static char* whereTempTriggers (\fBParse\fP * pParse, \fBTable\fP * pTab)\fC [static]\fP"
.PP
.SS "static int write32bits (\fBsqlite3_file\fP * fd, \fBi64\fP offset, \fBu32\fP val)\fC [static]\fP"
.PP
.SS "static int writeJournalHdr (\fBPager\fP * pPager)\fC [static]\fP"
.PP
.SS "static int writeMasterJournal (\fBPager\fP * pPager, const char * zMaster)\fC [static]\fP"
.PP
.SS "static int xferCompatibleCollation (const char * z1, const char * z2)\fC [static]\fP"
.PP
.SS "static int xferCompatibleIndex (\fBIndex\fP * pDest, \fBIndex\fP * pSrc)\fC [static]\fP"
.PP
.SS "static int xferOptimization (\fBParse\fP * pParse, \fBTable\fP * pDest, \fBSelect\fP * pSelect, int onError, int iDbDest)\fC [static]\fP"
.PP
.SS "static void yy_accept (\fByyParser\fP *)\fC [static]\fP"
.PP
.SS "static void yy_destructor (\fByyParser\fP * yypParser, YYCODETYPE yymajor, \fBYYMINORTYPE\fP * yypminor)\fC [static]\fP"
.PP
.SS "static int yy_find_reduce_action (int stateno, YYCODETYPE iLookAhead)\fC [static]\fP"
.PP
.SS "static int yy_find_shift_action (\fByyParser\fP * pParser, YYCODETYPE iLookAhead)\fC [static]\fP"
.PP
.SS "static int yy_pop_parser_stack (\fByyParser\fP * pParser)\fC [static]\fP"
.PP
.SS "static void yy_reduce (\fByyParser\fP * yypParser, int yyruleno)\fC [static]\fP"
.PP
.SS "static void yy_shift (\fByyParser\fP * yypParser, int yyNewState, int yyMajor, \fBYYMINORTYPE\fP * yypMinor)\fC [static]\fP"
.PP
.SS "static void yy_syntax_error (\fByyParser\fP * yypParser, int yymajor, \fBYYMINORTYPE\fP yyminor)\fC [static]\fP"
.PP
.SS "static void yyStackOverflow (\fByyParser\fP * yypParser, \fBYYMINORTYPE\fP * yypMinor)\fC [static]\fP"
.PP
.SS "static void zeroblobFunc (\fBsqlite3_context\fP * context, int argc, \fBsqlite3_value\fP ** argv)\fC [static]\fP"
.PP
.SS "static int zeroJournalHdr (\fBPager\fP * pPager, int doTruncate)\fC [static]\fP"
.PP
.SS "static void zeroPage (\fBMemPage\fP * pPage, int flags)\fC [static]\fP"
.PP
.SH "Variable Documentation"
.PP 
.SS "const char \fBaDigits\fP[] = '0123456789ABCDEF0123456789abcdef'\fC [static]\fP"
.PP
.SS "const int \fBaHardLimit\fP[]\fC [static]\fP"
.PP
\fBInitial value:\fP
.PP
.nf
 {
  SQLITE_MAX_LENGTH,
  SQLITE_MAX_SQL_LENGTH,
  SQLITE_MAX_COLUMN,
  SQLITE_MAX_EXPR_DEPTH,
  SQLITE_MAX_COMPOUND_SELECT,
  SQLITE_MAX_VDBE_OP,
  SQLITE_MAX_FUNCTION_ARG,
  SQLITE_MAX_ATTACHED,
  SQLITE_MAX_LIKE_PATTERN_LENGTH,
  SQLITE_MAX_VARIABLE_NUMBER,
  SQLITE_MAX_TRIGGER_DEPTH,
}
.fi
.SS "const unsigned char \fBaJournalMagic\fP[]\fC [static]\fP"
.PP
\fBInitial value:\fP
.PP
.nf
 {
  0xd9, 0xd5, 0x05, 0xf9, 0x20, 0xa1, 0x63, 0xd7,
}
.fi
.SS "const char \fBaPrefix\fP[] = '-x0\\000X0'\fC [static]\fP"
.PP
.SS "const char* const \fBazCompileOpt\fP[]\fC [static]\fP"
.PP
.SS "const \fBet_info\fP \fBfmtinfo\fP[]\fC [static]\fP"
.PP
\fBInitial value:\fP
.PP
.nf
 {
  {  'd', 10, 1, etRADIX,      0,  0 },
  {  's',  0, 4, etSTRING,     0,  0 },
  {  'g',  0, 1, etGENERIC,    30, 0 },
  {  'z',  0, 4, etDYNSTRING,  0,  0 },
  {  'q',  0, 4, etSQLESCAPE,  0,  0 },
  {  'Q',  0, 4, etSQLESCAPE2, 0,  0 },
  {  'w',  0, 4, etSQLESCAPE3, 0,  0 },
  {  'c',  0, 0, etCHARX,      0,  0 },
  {  'o',  8, 0, etRADIX,      0,  2 },
  {  'u', 10, 0, etRADIX,      0,  0 },
  {  'x', 16, 0, etRADIX,      16, 1 },
  {  'X', 16, 0, etRADIX,      0,  4 },

  {  'f',  0, 1, etFLOAT,      0,  0 },
  {  'e',  0, 1, etEXP,        30, 0 },
  {  'E',  0, 1, etEXP,        14, 0 },
  {  'G',  0, 1, etGENERIC,    14, 0 },

  {  'i', 10, 1, etRADIX,      0,  0 },
  {  'n',  0, 0, etSIZE,       0,  0 },
  {  '%',  0, 0, etPERCENT,    0,  0 },
  {  'p', 16, 0, etPOINTER,    0,  1 },


  {  'T',  0, 2, etTOKEN,      0,  0 },
  {  'S',  0, 2, etSRCLIST,    0,  0 },
  {  'r', 10, 3, etORDINAL,    0,  0 },
}
.fi
.SS "struct \fBcompareInfo\fP \fBglobInfo\fP = { '*', '?', '[', 0 }\fC [static]\fP"
.PP
.SS "const char \fBhexdigits\fP[]\fC [static]\fP"
.PP
\fBInitial value:\fP
.PP
.nf
 {
  '0', '1', '2', '3', '4', '5', '6', '7',
  '8', '9', 'A', 'B', 'C', 'D', 'E', 'F' 
}
.fi
.SS "\fBunixInodeInfo\fP* \fBinodeList\fP = 0\fC [static]\fP"
.PP
.SS "YYCODETYPE \fBlhs\fP"
.PP
.SS "struct \fBcompareInfo\fP \fBlikeInfoAlt\fP = { '%', '_', 0, 0 }\fC [static]\fP"
.PP
.SS "struct \fBcompareInfo\fP \fBlikeInfoNorm\fP = { '%', '_', 0, 1 }\fC [static]\fP"
.PP
.SS "SQLITE_WSD struct \fBMem0Global\fP  \fBmem0\fP\fC [static]\fP"
.PP
.SS "struct \fBsqlite3_io_methods\fP \fBMemJournalMethods\fP\fC [static]\fP"
.PP
\fBInitial value:\fP
.PP
.nf
 {
  1,                
  memjrnlClose,     
  memjrnlRead,      
  memjrnlWrite,     
  memjrnlTruncate,  
  memjrnlSync,      
  memjrnlFileSize,  
  0,                
  0,                
  0,                
  0,                
  0,                
  0,                
  0,                
  0,                
  0,                
  0                 
}
.fi
.SS "unsigned char \fBnrhs\fP"
.PP
.SS "SQLITE_WSD struct \fBPCacheGlobal\fP  \fBpcache1_g\fP\fC [static]\fP"
.PP
.SS "SQLITE_API char* \fBsqlite3_temp_directory\fP = 0"
.PP
.SS "SQLITE_API char* \fBsqlite3_temp_directory\fP"
.PP
.SS "SQLITE_API const char \fBsqlite3_version\fP[] = SQLITE_VERSION"
.PP
.SS "const \fBsqlite3_api_routines\fP \fBsqlite3Apis\fP\fC [static]\fP"
.PP
.SS "SQLITE_WSD struct \fBsqlite3AutoExtList\fP  \fBsqlite3Autoext\fP\fC [static]\fP"
.PP
.SS "SQLITE_PRIVATE SQLITE_WSD struct \fBSqlite3Config\fP \fBsqlite3Config\fP"
.PP
.SS "SQLITE_PRIVATE const unsigned char \fBsqlite3CtypeMap\fP[256]"
.PP
.SS "SQLITE_PRIVATE SQLITE_WSD \fBFuncDefHash\fP \fBsqlite3GlobalFunctions\fP"
.PP
.SS "SQLITE_WSD struct \fBBenignMallocHooks\fP  \fBsqlite3Hooks\fP\fC [static]\fP"
.PP
.SS "SQLITE_PRIVATE const \fBToken\fP \fBsqlite3IntTokens\fP[]"
.PP
\fBInitial value:\fP
.PP
.nf
 {
   { '0', 1 },
   { '1', 1 }
}
.fi
.SS "SQLITE_PRIVATE const int \fBsqlite3one\fP = 1"
.PP
.SS "SQLITE_PRIVATE const unsigned char \fBsqlite3OpcodeProperty\fP[] = OPFLG_INITIALIZER"
.PP
.SS "SQLITE_PRIVATE void(*)(void) sqlite3OsDlSym(\fBsqlite3_vfs\fP *, void *, const char *)"
.PP
.SS "SQLITE_PRIVATE int \fBsqlite3PendingByte\fP = 0x40000000"
.PP
.SS "SQLITE_WSD struct \fBsqlite3PrngType\fP  \fBsqlite3Prng\fP\fC [static]\fP"
.PP
.SS "SQLITE_WSD struct \fBsqlite3PrngType\fP \fBsqlite3SavedPrng\fP\fC [static]\fP"
.PP
.SS "\fBBtShared\fP* SQLITE_WSD \fBsqlite3SharedCacheList\fP = 0\fC [static]\fP"
.PP
.SS "SQLITE_WSD struct \fBsqlite3StatType\fP  \fBsqlite3Stat\fP\fC [static]\fP"
.PP
.SS "SQLITE_PRIVATE const unsigned char \fBsqlite3UpperToLower\fP[]"
.PP
.SS "const unsigned char \fBsqlite3Utf8Trans1\fP[]\fC [static]\fP"
.PP
\fBInitial value:\fP
.PP
.nf
 {
  0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
  0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
  0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
  0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f,
  0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
  0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
  0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
  0x00, 0x01, 0x02, 0x03, 0x00, 0x01, 0x00, 0x00,
}
.fi
.SS "\fBsqlite3_vfs\fP* SQLITE_WSD \fBvfsList\fP = 0\fC [static]\fP"
.PP
.SS "const YYACTIONTYPE \fByy_action\fP[]\fC [static]\fP"
.PP
.SS "const YYACTIONTYPE \fByy_default\fP[]\fC [static]\fP"
.PP
.SS "const YYCODETYPE \fByy_lookahead\fP[]\fC [static]\fP"
.PP
.SS "const short \fByy_reduce_ofst\fP[]\fC [static]\fP"
.PP
.SS "const short \fByy_shift_ofst\fP[]\fC [static]\fP"
.PP
.SS "const YYCODETYPE \fByyFallback\fP[]\fC [static]\fP"
.PP
.SS "struct { ... }   \fByyRuleInfo\fP[]\fC [static]\fP"
.PP
.SS "const \fBYYMINORTYPE\fP \fByyzerominor\fP = { 0 }\fC [static]\fP"
.PP
.SS "const char \fBzMagicHeader\fP[] = SQLITE_FILE_HEADER\fC [static]\fP"
.PP
.SH "Author"
.PP 
Generated automatically by Doxygen for upkeeper from the source code.
